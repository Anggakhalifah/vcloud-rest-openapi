{
  "openapi": "3.0.2",
  "info": {
    "title": "vCloud Director",
    "license": {
      "name": "Â© 2018 VMware, Inc. All rights reserved."
    },
    "version": "Revision 20180216 Version 30.0"
  },
  "paths": {
    "/admin/": {},
    "/admin/catalog/{id}": {},
    "/admin/catalog/{id}/action/publish": {},
    "/admin/catalog/{id}/action/publishToExternalOrganizations": {},
    "/admin/catalog/{id}/action/subscribeToExternalCatalog": {},
    "/admin/catalog/{id}/extension": {},
    "/admin/catalog/{id}/extension/{selectorExtensionId}": {},
    "/admin/catalog/{id}/metadata": {},
    "/admin/catalog/{id}/metadata/{domain}/{key}": {},
    "/admin/catalog/{id}/metadata/{key}": {},
    "/admin/catalog/{id}/owner": {},
    "/admin/catalogs/extension": {},
    "/admin/catalogs/extension/{selectorExtensionId}": {},
    "/admin/edgeGateway/{id}": {},
    "/admin/edgeGateway/{id}/action/configureServices": {},
    "/admin/edgeGateway/{id}/action/configureSyslogServerSettings": {},
    "/admin/edgeGateway/{id}/action/convertToAdvancedGateway": {},
    "/admin/edgeGateway/{id}/action/convertToAdvancedNetworking": {},
    "/admin/edgeGateway/{id}/action/disableDistributedRouting": {},
    "/admin/edgeGateway/{id}/action/enableDistributedRouting": {},
    "/admin/edgeGateway/{id}/action/modifyFormFactor": {},
    "/admin/edgeGateway/{id}/action/reapplyServices": {},
    "/admin/edgeGateway/{id}/action/redeploy": {},
    "/admin/edgeGateway/{id}/action/syncSyslogServerSettings": {},
    "/admin/edgeGateway/{id}/action/updateProperties": {},
    "/admin/edgeGateway/{id}/action/upgradeConfig": {},
    "/admin/event/{id}": {},
    "/admin/group/{id}": {},
    "/admin/groups/query": {},
    "/admin/network/{id}": {},
    "/admin/network/{id}/action/convertToDistributedInterface": {},
    "/admin/network/{id}/action/convertToInternalInterface": {},
    "/admin/network/{id}/action/convertToSubInterface": {},
    "/admin/network/{id}/action/reset": {},
    "/admin/network/{id}/action/syncSyslogServerSettings": {},
    "/admin/network/{id}/allocatedAddresses": {},
    "/admin/network/{id}/metadata": {},
    "/admin/network/{id}/metadata/{domain}/{key}": {},
    "/admin/network/{id}/metadata/{key}": {},
    "/admin/org/{id}": {},
    "/admin/org/{id}/action/disable": {},
    "/admin/org/{id}/action/enable": {},
    "/admin/org/{id}/associations": {},
    "/admin/org/{id}/associations/localAssociationData": {},
    "/admin/org/{id}/associations/localAssociationData/action/regenerateKeyPair": {},
    "/admin/org/{id}/associations/{remoteSiteId}/{remoteOrgId}": {},
    "/admin/org/{id}/catalogs": {},
    "/admin/org/{id}/events": {},
    "/admin/org/{id}/extension": {},
    "/admin/org/{id}/extension/{selectorExtensionId}": {},
    "/admin/org/{id}/groups": {},
    "/admin/org/{id}/metadata": {},
    "/admin/org/{id}/metadata/{domain}/{key}": {},
    "/admin/org/{id}/metadata/{key}": {},
    "/admin/org/{id}/networks": {},
    "/admin/org/{id}/settings": {},
    "/admin/org/{id}/settings/email": {},
    "/admin/org/{id}/settings/federation": {},
    "/admin/org/{id}/settings/federation/action/regenerateFederationCertificate": {},
    "/admin/org/{id}/settings/general": {},
    "/admin/org/{id}/settings/guestPersonalizationSettings": {},
    "/admin/org/{id}/settings/ldap": {},
    "/admin/org/{id}/settings/ldap/action/resetLdapCertificate": {},
    "/admin/org/{id}/settings/ldap/action/resetLdapKeyStore": {},
    "/admin/org/{id}/settings/ldap/action/resetLdapSspiKeytab": {},
    "/admin/org/{id}/settings/ldap/action/updateLdapCertificate": {},
    "/admin/org/{id}/settings/ldap/action/updateLdapKeyStore": {},
    "/admin/org/{id}/settings/ldap/action/updateLdapSspiKeytab": {},
    "/admin/org/{id}/settings/oauth": {},
    "/admin/org/{id}/settings/operationLimitsSettings": {},
    "/admin/org/{id}/settings/passwordPolicy": {},
    "/admin/org/{id}/settings/vAppLeaseSettings": {},
    "/admin/org/{id}/settings/vAppLeaseSettings/action/expireVAppsRuntimeLease": {},
    "/admin/org/{id}/settings/vAppLeaseSettings/action/expireVAppsStorageLease": {},
    "/admin/org/{id}/settings/vAppTemplateLeaseSettings": {},
    "/admin/org/{id}/settings/vAppTemplateLeaseSettings/action/expireVAppTemplatesStorageLease": {},
    "/admin/org/{id}/users": {},
    "/admin/org/{id}/vdcs": {},
    "/admin/org/{id}/vdcsparams": {},
    "/admin/org/{orgId}/right/{id}": {},
    "/admin/org/{orgId}/rights": {},
    "/admin/org/{orgId}/role/{id}": {},
    "/admin/org/{orgId}/role/{id}/action/relinkToTemplate": {},
    "/admin/org/{orgId}/role/{id}/action/unlinkFromTemplate": {},
    "/admin/org/{orgId}/roles": {},
    "/admin/org/{orgId}/roles/query": {},
    "/admin/orgs": {},
    "/admin/orgs/extension": {},
    "/admin/orgs/extension/{selectorExtensionId}": {},
    "/admin/orgs/query": {},
    "/admin/providervdc/{id}": {},
    "/admin/providervdc/{id}/extension": {},
    "/admin/providervdc/{id}/extension/{selectorExtensionId}": {},
    "/admin/providervdc/{id}/metadata": {},
    "/admin/providervdc/{id}/metadata/{domain}/{key}": {},
    "/admin/providervdc/{id}/metadata/{key}": {},
    "/admin/providervdc/{id}/vdcReferences": {},
    "/admin/providervdcs/extension": {},
    "/admin/providervdcs/extension/{selectorExtensionId}": {},
    "/admin/pvdcStorageProfile/{id}": {},
    "/admin/pvdcStorageProfile/{id}/metadata": {},
    "/admin/pvdcStorageProfile/{id}/metadata/{domain}/{key}": {},
    "/admin/pvdcStorageProfile/{id}/metadata/{key}": {},
    "/admin/right/{id}": {},
    "/admin/rights/query": {},
    "/admin/role/{id}": {},
    "/admin/role/{id}/action/relinkToTemplate": {},
    "/admin/role/{id}/action/unlinkFromTemplate": {},
    "/admin/roles": {},
    "/admin/roles/query": {},
    "/admin/strandedUsers/query": {},
    "/admin/user/{id}": {},
    "/admin/user/{id}/action/takeOwnership": {},
    "/admin/user/{id}/action/unlock": {},
    "/admin/user/{id}/entityRights": {},
    "/admin/user/{id}/grantedRights": {},
    "/admin/users/query": {},
    "/admin/vdc/{id}": {},
    "/admin/vdc/{id}/action/disable": {},
    "/admin/vdc/{id}/action/enable": {},
    "/admin/vdc/{id}/action/registerVApp": {},
    "/admin/vdc/{id}/edgeGateways": {},
    "/admin/vdc/{id}/extension": {},
    "/admin/vdc/{id}/extension/{selectorExtensionId}": {},
    "/admin/vdc/{id}/metadata": {},
    "/admin/vdc/{id}/metadata/{domain}/{key}": {},
    "/admin/vdc/{id}/metadata/{key}": {},
    "/admin/vdc/{id}/migrateVcdniToVxlan": {},
    "/admin/vdc/{id}/networks": {},
    "/admin/vdc/{id}/vdcStorageProfiles": {},
    "/admin/vdcStorageProfile/{id}": {},
    "/admin/vdcStorageProfile/{id}/metadata": {},
    "/admin/vdcStorageProfile/{id}/metadata/{domain}/{key}": {},
    "/admin/vdcStorageProfile/{id}/metadata/{key}": {},
    "/admin/vdcs/extension": {},
    "/admin/vdcs/extension/{selectorExtensionId}": {},
    "/admin/vdcs/query": {}
  },
  "components": {
    "schemas": {
      "AmqpConfigurationType": {
        "title": "AmqpConfigurationType",
        "description": "Represents a list of AMQP Configuration items",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "amqpBrokers": {
                "readOnly": true,
                "description": "List of AMQP Broker configurations.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AmqpBrokersType"
                  }
                ]
              },
              "amqpComponentConfigurations": {
                "readOnly": true,
                "description": "List of AMQP Broker configurations.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AmqpComponentConfigurationsType"
                  }
                ]
              }
            },
            "required": [
              "amqpBrokers",
              "amqpComponentConfigurations"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AmqpComponentConfigurationsType": {
        "title": "AmqpComponentConfigurationsType",
        "description": "Represents an AMQP Component Configuration list",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "amqpComponentConfiguration": {
                "readOnly": true,
                "description": "AMQP Component Configuration.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AmqpComponentConfigurationType"
                }
              }
            },
            "required": [
              "amqpComponentConfiguration"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AmqpComponentConfigurationType": {
        "title": "AmqpComponentConfigurationType",
        "description": "Represents an AMQP Component Configuration.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "description": "Name of AMQP configuration component.",
                "type": "string"
              },
              "amqpConfigList": {
                "description": "List of AMQP config entries for a component.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AmqpConfigListType"
                  }
                ]
              }
            },
            "required": [
              "name",
              "amqpConfigList"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AmqpConfigListType": {
        "title": "AmqpConfigListType",
        "description": "Represents an AMQP Configuration key value pair list",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "configEntry": {
                "readOnly": true,
                "description": "Reference to an AMQP Configuration item.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AmqpConfigEntryType"
                }
              }
            },
            "required": [
              "configEntry"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AmqpConfigEntryType": {
        "title": "AmqpConfigEntryType",
        "description": "AMQP Component config entry.",
        "type": "object",
        "additionalProperties": false
      },
      "AmqpBrokersType": {
        "title": "AmqpBrokersType",
        "description": "Represents a list of AMQP broker configurations.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "amqpBrokerConfiguration": {
                "readOnly": true,
                "description": "Reference to an AMQP Configuration item.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AmqpBrokerConfigurationType"
                }
              }
            },
            "required": [
              "amqpBrokerConfiguration"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AmqpBrokerConfigurationType": {
        "title": "AmqpBrokerConfigurationType",
        "description": "Represents configuration for an AMQP broker",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "amqpHost": {
                "description": "Hostname of the AMQP broker.",
                "type": "string"
              },
              "amqpPort": {
                "description": "Port used by the AMQP broker.",
                "type": "integer",
                "format": "int32"
              },
              "amqpUsername": {
                "description": "Username for the AMQP broker.",
                "type": "string"
              },
              "amqpPassword": {
                "nullable": true,
                "description": "Password for the AMQP broker.",
                "type": "string"
              },
              "amqpVHost": {
                "description": "Virtual host for the AMQP broker.",
                "type": "string"
              },
              "amqpUseSSL": {
                "description": "Use SSL for communication with the AMQP broker.",
                "type": "boolean"
              },
              "amqpSslAcceptAll": {
                "nullable": true,
                "description": "Accept all SSL certificates. Must be true if AmqpUseSSL is true.",
                "type": "boolean"
              }
            },
            "required": [
              "amqpHost",
              "amqpPort",
              "amqpUsername",
              "amqpPassword",
              "amqpVHost",
              "amqpUseSSL",
              "amqpSslAcceptAll"
            ],
            "additionalProperties": false
          }
        ]
      },
      "TaskRequestBaseType": {
        "title": "TaskRequestBaseType",
        "description": "Base type for blocking tasks.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityType"
          },
          {
            "type": "object",
            "properties": {
              "createdTime": {
                "readOnly": true,
                "description": "The date/time that the blocking task was created.",
                "type": "string",
                "format": "date-time"
              },
              "timeoutDate": {
                "readOnly": true,
                "description": "The date/time at which this request times out. Requests time out if not acted upon within a configured interval. When a request times out, the action specified in timeoutAction is taken automatically.",
                "type": "string",
                "format": "date-time"
              },
              "timeoutAction": {
                "readOnly": true,
                "description": "Action that is automatically taken when a request times out. One of:  \n**resume** (The task will be resumed.)  \n**abort** (The task will be aborted. Transient objects are cleaned up. Task status is set to ABORTED.)  \n**fail** (The task will be failed. Transient object status and task status are set to ERROR.)",
                "type": "string"
              },
              "organization": {
                "readOnly": true,
                "description": "The organization in which the blocking task runs.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "user": {
                "nullable": true,
                "readOnly": true,
                "description": "The user who triggered the blocking task.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "taskOwner": {
                "nullable": true,
                "readOnly": true,
                "description": "The owner of the blocking task.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              }
            },
            "required": [
              "createdTime",
              "timeoutDate",
              "timeoutAction",
              "organization",
              "user",
              "taskOwner"
            ],
            "additionalProperties": false
          }
        ]
      },
      "RequestOperationParamsType": {
        "title": "RequestOperationParamsType",
        "description": "Represents parameters to a request.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "message": {
                "description": "Message that will be associated with the action.",
                "type": "string"
              }
            },
            "required": [
              "message"
            ],
            "additionalProperties": false
          }
        ]
      },
      "EventPropertiesType": {
        "title": "EventPropertiesType",
        "description": "List of event\\-specific properties.",
        "type": "object",
        "additionalProperties": false
      },
      "EventType": {
        "title": "EventType",
        "description": "Parameters for creating an event.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "description": "A string identifying the type of the event. Length must be between 1 and 128 characters. Cannot start with com/vmware/vcloud.",
                "type": "string"
              },
              "serviceNamespace": {
                "description": "Identifier of the external service that posted the event. Length must be between 1 and 128 characters. Cannot start with com.vmware.vcloud.",
                "type": "string"
              },
              "success": {
                "description": "True if the event represents a successful operation.",
                "type": "boolean"
              },
              "typeFull": {
                "description": "A message describing the event. Length must be between 0 and 2000 characters.",
                "type": "string"
              },
              "owner": {
                "nullable": true,
                "description": "A reference to the owner of the event.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "user": {
                "nullable": true,
                "description": "A reference to the user for which the event was created.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "eventProperties": {
                "nullable": true,
                "description": "List of event\\-specific properties.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EventPropertiesType"
                  }
                ]
              }
            },
            "required": [
              "type",
              "serviceNamespace",
              "success",
              "typeFull",
              "owner",
              "user",
              "eventProperties"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AuditEventType": {
        "title": "AuditEventType",
        "description": "Audit event",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityType"
          },
          {
            "type": "object",
            "properties": {
              "eventType": {
                "readOnly": true,
                "description": "A string identifying the type of the event.",
                "type": "string"
              },
              "serviceNamespace": {
                "readOnly": true,
                "description": "Identifier of the external service that posted the event or 'com.vmware.vcloud' for internal events.",
                "type": "string"
              },
              "timeStamp": {
                "readOnly": true,
                "description": "Timestamp of the event.",
                "type": "string",
                "format": "date-time"
              },
              "success": {
                "readOnly": true,
                "description": "True if the event represents a successful operation. False otherwise.",
                "type": "boolean"
              },
              "org": {
                "readOnly": true,
                "description": "A reference to the organization to which the event was posted.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "owner": {
                "nullable": true,
                "readOnly": true,
                "description": "A reference to the owner of the event.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "user": {
                "readOnly": true,
                "description": "A reference to the user for which the event was created.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "details": {
                "nullable": true,
                "readOnly": true,
                "description": "Event properties in JSON format.",
                "type": "string"
              }
            },
            "required": [
              "eventType",
              "serviceNamespace",
              "timeStamp",
              "success",
              "org",
              "owner",
              "user",
              "details"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ProviderVdcType": {
        "title": "ProviderVdcType",
        "description": "Represents a Provider vDC.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityType"
          },
          {
            "type": "object",
            "properties": {
              "status": {
                "readOnly": true,
                "description": "Creation status of the provider VDC. One of:  \n \\-1 (creation failed)  \n 0 (not ready)  \n 1 (ready)  \n 2 (unknown)  \n 3 (unrecognized)",
                "type": "integer",
                "format": "int32"
              },
              "computeCapacity": {
                "nullable": true,
                "readOnly": true,
                "description": "Read\\-only indicator of CPU and memory capacity.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RootComputeCapacityType"
                  }
                ]
              },
              "storageCapacity": {
                "nullable": true,
                "readOnly": true,
                "description": "Read\\-only indicator of datastore capacity.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProviderVdcCapacityType"
                  }
                ]
              },
              "availableNetworks": {
                "nullable": true,
                "readOnly": true,
                "description": "Read\\-only list of available networks.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AvailableNetworksType"
                  }
                ]
              },
              "storageProfiles": {
                "nullable": true,
                "readOnly": true,
                "description": "Container for references to vSphere storage profiles available to this Provider vDC.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProviderVdcStorageProfilesType"
                  }
                ]
              },
              "capabilities": {
                "nullable": true,
                "readOnly": true,
                "description": "Read\\-only list of virtual hardware versions supported by this Provider vDC.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CapabilitiesType"
                  }
                ]
              },
              "vdcs": {
                "nullable": true,
                "description": "Read\\-only list of organization vDCs backed by this Provider vDC.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VdcsType"
                  }
                ]
              },
              "isEnabled": {
                "nullable": true,
                "description": "True if this Provider vDC is enabled and can provide resources to organization vDCs. A Provider vDC is always enabled on creation.",
                "type": "boolean"
              },
              "networkPoolReferences": {
                "nullable": true,
                "readOnly": true,
                "description": "Read\\-only list of network pools used by this Provider vDC.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NetworkPoolReferencesType"
                  }
                ]
              }
            },
            "required": [
              "status",
              "computeCapacity",
              "storageCapacity",
              "availableNetworks",
              "storageProfiles",
              "capabilities",
              "vdcs",
              "isEnabled",
              "networkPoolReferences"
            ],
            "additionalProperties": false
          }
        ]
      },
      "CreateVdcParamsType": {
        "title": "CreateVdcParamsType",
        "description": "Parameters for creating an organization vDC.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ParamsType"
          },
          {
            "type": "object",
            "properties": {
              "allocationModel": {
                "description": "The allocation model used by this vDC. One of:  \n**AllocationVApp** (Pay as you go. Resources are committed to a vDC only when vApps are created in it. When you use this allocation model, any Limit values you specify for Memory and CPU are ignored on create and returned as 0 on retrieve.)  \n**AllocationPool** (Only a percentage of the resources you allocate are committed to the organization vDC.)  \n**ReservationPool** (All the resources you allocate are committed as a pool to the organization vDC. vApps in vDCs that support this allocation model can specify values for resource and limit.)",
                "type": "string"
              },
              "computeCapacity": {
                "description": "The compute capacity allocated to this vDC.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ComputeCapacityType"
                  }
                ]
              },
              "nicQuota": {
                "nullable": true,
                "description": "Maximum number of virtual NICs allowed in this vDC. Defaults to 0, which specifies an unlimited number.",
                "type": "integer",
                "format": "int32"
              },
              "networkQuota": {
                "nullable": true,
                "description": "Maximum number of network objects that can be deployed in this vDC. Defaults to 0, which means no networks can be deployed.",
                "type": "integer",
                "format": "int32"
              },
              "vmQuota": {
                "nullable": true,
                "description": "The maximum number of VMs that can be created in this vDC. Includes deployed and undeployed VMs in vApps and vApp templates. Defaults to 0, which specifies an unlimited number.",
                "type": "integer",
                "format": "int32"
              },
              "isEnabled": {
                "nullable": true,
                "description": "True if this vDC is enabled for use by the organization vDCs. A vDC is always enabled on creation.",
                "type": "boolean"
              },
              "vdcStorageProfile": {
                "readOnly": true,
                "description": "Storage profiles supported by this vDC.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VdcStorageProfileParamsType"
                }
              },
              "resourceGuaranteedMemory": {
                "nullable": true,
                "description": "Percentage of allocated memory resources guaranteed to vApps deployed in this vDC. For example, if this value is 0.75, then 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. Value defaults to 1.0 if the element is empty.",
                "type": "number",
                "format": "double"
              },
              "resourceGuaranteedCpu": {
                "nullable": true,
                "description": "Percentage of allocated CPU resources guaranteed to vApps deployed in this vDC. For example, if this value is 0.75, then 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. Value defaults to 1.0 if the element is empty.",
                "type": "number",
                "format": "double"
              },
              "vCpuInMhz": {
                "nullable": true,
                "description": "Specifies the clock frequency, in Megahertz, for any virtual CPU that is allocated to a VM. A VM with 2 vCPUs will consume twice as much of this value. Ignored for ReservationPool. Required when AllocationModel is AllocationVApp or AllocationPool, and may not be less than 256 MHz. Defaults to 1000 MHz if the element is empty or missing. As of API version 5.7 this element became redundant with the \"VCpuInMhz2\" element in VdcType. Both elements are set to the same value in responses. However, on requests this element's value is the one that's used.",
                "type": "integer",
                "format": "int64"
              },
              "isThinProvision": {
                "nullable": true,
                "description": "Boolean to request thin provisioning. Request will be honored only if the underlying datastore supports it. Thin provisioning saves storage space by committing it on demand. This allows over\\-allocation of storage.",
                "type": "boolean"
              },
              "networkPoolReference": {
                "nullable": true,
                "description": "Reference to a network pool in the Provider vDC. Required if this vDC will contain routed or isolated networks.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "providerVdcReference": {
                "nullable": true,
                "description": "A reference to the Provider vDC from which this organization vDC is provisioned.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "resourcePoolRefs": {
                "nullable": true,
                "readOnly": true,
                "description": "Optional list of additional resource pools to back this Organization vDC. Specified resource pools must be backed by different clusters, and must not back an existing Organization vDC.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vcloud-ext:VimObjectRefsType"
                  }
                ]
              },
              "usesFastProvisioning": {
                "nullable": true,
                "description": "Boolean to request fast provisioning. Request will be honored only if the underlying datastore supports it. Fast provisioning can reduce the time it takes to create virtual machines by using vSphere linked clones. If you disable fast provisioning, all provisioning operations will result in full clones.",
                "type": "boolean"
              },
              "overCommitAllowed": {
                "nullable": true,
                "description": "Set to false to disallow creation of the VDC if the AllocationModel is AllocationPool or ReservationPool and the ComputeCapacity you specified is greater than what the backing Provider VDC can supply. Defaults to true if empty or missing.",
                "type": "boolean"
              },
              "vmDiscoveryEnabled": {
                "nullable": true,
                "description": "True if discovery of vCenter VMs is enabled for resource pools backing this vDC. If left unspecified, the actual behaviour depends on enablement at the organization level and at the system level.",
                "type": "boolean"
              }
            },
            "required": [
              "allocationModel",
              "computeCapacity",
              "nicQuota",
              "networkQuota",
              "vmQuota",
              "isEnabled",
              "vdcStorageProfile",
              "resourceGuaranteedMemory",
              "resourceGuaranteedCpu",
              "vCpuInMhz",
              "isThinProvision",
              "networkPoolReference",
              "providerVdcReference",
              "resourcePoolRefs",
              "usesFastProvisioning",
              "overCommitAllowed",
              "vmDiscoveryEnabled"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AdminVdcType": {
        "title": "AdminVdcType",
        "description": "Represents the admin view of an organization vDC.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VdcType"
          },
          {
            "type": "object",
            "properties": {
              "resourceGuaranteedMemory": {
                "nullable": true,
                "description": "Percentage of allocated memory resources guaranteed to vApps deployed in this vDC. For example, if this value is 0.75, then 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. Value defaults to 1.0 if the element is empty.",
                "type": "number",
                "format": "double"
              },
              "resourceGuaranteedCpu": {
                "nullable": true,
                "description": "Percentage of allocated CPU resources guaranteed to vApps deployed in this vDC. For example, if this value is 0.75, then 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. Value defaults to 1.0 if the element is empty.",
                "type": "number",
                "format": "double"
              },
              "vCpuInMhz": {
                "nullable": true,
                "description": "Specifies the clock frequency, in Megahertz, for any virtual CPU that is allocated to a VM. A VM with 2 vCPUs will consume twice as much of this value. Ignored for ReservationPool. Required when AllocationModel is AllocationVApp or AllocationPool, and may not be less than 256 MHz. Defaults to 1000 MHz if the element is empty or missing.",
                "type": "integer",
                "format": "int64"
              },
              "isThinProvision": {
                "nullable": true,
                "description": "Boolean to request thin provisioning. Request will be honored only if the underlying datastore supports it. Thin provisioning saves storage space by committing it on demand. This allows over\\-allocation of storage.",
                "type": "boolean"
              },
              "networkPoolReference": {
                "nullable": true,
                "description": "Reference to a network pool in the Provider vDC.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "vendorServices": {
                "nullable": true,
                "readOnly": true,
                "description": "Vendor services defined for this org vDC.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VendorServicesType"
                  }
                ]
              },
              "providerVdcReference": {
                "nullable": true,
                "description": "A reference to the ProviderVdc from which this vDC is provisioned.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "resourcePoolRefs": {
                "nullable": true,
                "readOnly": true,
                "description": "A set of references to the vCenter Resource Pools backing this VDC.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vcloud-ext:VimObjectRefsType"
                  }
                ]
              },
              "usesFastProvisioning": {
                "nullable": true,
                "description": "Boolean to request fast provisioning. Request will be honored only if the underlying datastore supports it. Fast provisioning can reduce the time it takes to create virtual machines by using vSphere linked clones. If you disable fast provisioning, all provisioning operations will result in full clones.",
                "type": "boolean"
              },
              "overCommitAllowed": {
                "nullable": true,
                "description": "Always null in the response to a GET request. On update, set to false to disallow the update if the AllocationModel is AllocationPool or ReservationPool and the ComputeCapacity you specified is greater than what the backing Provider VDC can supply. Defaults to true if empty or missing.",
                "type": "boolean"
              },
              "vmDiscoveryEnabled": {
                "nullable": true,
                "description": "True if discovery of vCenter VMs is enabled for resource pools backing this vDC.",
                "type": "boolean"
              },
              "universalNetworkPoolReference": {
                "nullable": true,
                "description": "Reference to a universal network pool.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              }
            },
            "required": [
              "resourceGuaranteedMemory",
              "resourceGuaranteedCpu",
              "vCpuInMhz",
              "isThinProvision",
              "networkPoolReference",
              "vendorServices",
              "providerVdcReference",
              "resourcePoolRefs",
              "usesFastProvisioning",
              "overCommitAllowed",
              "vmDiscoveryEnabled",
              "universalNetworkPoolReference"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VdcReferencesType": {
        "title": "VdcReferencesType",
        "description": "List of organization vDCs backed by this Provider vDC.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "vdcReference": {
                "readOnly": true,
                "description": "A reference to an organization vDC.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReferenceType"
                }
              }
            },
            "required": [
              "vdcReference"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ProviderVdcCapacityType": {
        "title": "ProviderVdcCapacityType",
        "description": "Represents resource capacity in a Provider vDC.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "units": {
                "readOnly": true,
                "description": "Units in which the capacity is measured. For CPU devices, this is always Megahertz, represented by the string MHz.",
                "type": "string"
              },
              "allocation": {
                "nullable": true,
                "readOnly": true,
                "description": "Number of Units that have been allocated to consumers.",
                "type": "integer",
                "format": "int64"
              },
              "reserved": {
                "nullable": true,
                "readOnly": true,
                "description": "Number of Units that have been reserved.",
                "type": "integer",
                "format": "int64"
              },
              "total": {
                "readOnly": true,
                "description": "Total number of Units that can be allocated to all consumers.",
                "type": "integer",
                "format": "int64"
              },
              "used": {
                "nullable": true,
                "readOnly": true,
                "description": "Percentage of the allocation in use.",
                "type": "integer",
                "format": "int64"
              },
              "overhead": {
                "nullable": true,
                "readOnly": true,
                "description": "Number of Units allocated to system resources such as vShield Manager virtual machines and shadow virtual machines provisioned from this Provider vDC.",
                "type": "integer",
                "format": "int64"
              }
            },
            "required": [
              "units",
              "allocation",
              "reserved",
              "total",
              "used",
              "overhead"
            ],
            "additionalProperties": false
          }
        ]
      },
      "RootComputeCapacityType": {
        "title": "RootComputeCapacityType",
        "description": "Represents compute capacity with units.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "cpu": {
                "readOnly": true,
                "description": "Read\\-only indicator of CPU capacity available in the Provider vDC.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProviderVdcCapacityType"
                  }
                ]
              },
              "memory": {
                "readOnly": true,
                "description": "Read\\-only indicator of memory capacity available in the Provider vDC.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProviderVdcCapacityType"
                  }
                ]
              },
              "isElastic": {
                "nullable": true,
                "readOnly": true,
                "description": "True if compute capacity can grow or shrink based on demand.",
                "type": "boolean"
              },
              "isHA": {
                "nullable": true,
                "readOnly": true,
                "description": "True if compute capacity is highly available.",
                "type": "boolean"
              }
            },
            "required": [
              "cpu",
              "memory",
              "isElastic",
              "isHA"
            ],
            "additionalProperties": false
          }
        ]
      },
      "NetworkPoolReferencesType": {
        "title": "NetworkPoolReferencesType",
        "description": "Container for references to network pools in this vDC.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "networkPoolReference": {
                "readOnly": true,
                "description": "A reference to a network pool.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReferenceType"
                }
              }
            },
            "required": [
              "networkPoolReference"
            ],
            "additionalProperties": false
          }
        ]
      },
      "NetworkPoolType": {
        "title": "NetworkPoolType",
        "description": "Represents a network pool.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceEntityType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ProviderVdcStorageProfilesType": {
        "title": "ProviderVdcStorageProfilesType",
        "description": "Container for references to storage profiles associated with a Provider vDC.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "providerVdcStorageProfile": {
                "description": "A reference to a Provider vDC storage profile.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReferenceType"
                }
              }
            },
            "required": [
              "providerVdcStorageProfile"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ProviderVdcStorageProfileType": {
        "title": "ProviderVdcStorageProfileType",
        "description": "Represents a Provider vDC storage profile.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityType"
          },
          {
            "type": "object",
            "properties": {
              "enabled": {
                "nullable": true,
                "description": "True if this storage profile is enabled for use in this vDC.",
                "type": "boolean"
              },
              "units": {
                "readOnly": true,
                "description": "Units of capacity.",
                "type": "string"
              },
              "capacityTotal": {
                "nullable": true,
                "readOnly": true,
                "description": "Total capacity of this storage profile.",
                "type": "number",
                "format": "double"
              },
              "capacityUsed": {
                "nullable": true,
                "readOnly": true,
                "description": "Used capacity in this storage profile.",
                "type": "number",
                "format": "double"
              },
              "iopsCapacity": {
                "nullable": true,
                "readOnly": true,
                "description": "IOPS capacity in this storage profile.",
                "type": "integer",
                "format": "int64"
              },
              "iopsAllocated": {
                "nullable": true,
                "readOnly": true,
                "description": "Allocated IOPS in this storage profile.",
                "type": "integer",
                "format": "int64"
              }
            },
            "required": [
              "enabled",
              "units",
              "capacityTotal",
              "capacityUsed",
              "iopsCapacity",
              "iopsAllocated"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VdcStorageProfileParamsType": {
        "title": "VdcStorageProfileParamsType",
        "description": "Represents the parameters to create a storage profile in an organization vDC",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "enabled": {
                "nullable": true,
                "description": "True if this storage profile is enabled for use in the vDC.",
                "type": "boolean"
              },
              "units": {
                "description": "Units used to define Limit.",
                "type": "string"
              },
              "limit": {
                "description": "Maximum number of Units allocated for this storage profile. A value of 0 specifies unlimited Units.",
                "type": "integer",
                "format": "int64"
              },
              "default": {
                "description": "True if this is default storage profile for this vDC. The default storage profile is used when an object that can specify a storage profile is created with no storage profile specified.",
                "type": "boolean"
              },
              "iopsSettings": {
                "nullable": true,
                "description": "When NOT provided, disk storage placement ignores IOPs considerations; otherwise, this element holds all the disk IOPs related settings, including a subordinate Enabled flag. When that flag is false, disk provisioning using this profile will behave identically as if this element was not provided in the first place.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VdcStorageProfileIopsSettingsType"
                  }
                ]
              },
              "providerVdcStorageProfile": {
                "description": "Reference to a Provider vDC storage profile.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              }
            },
            "required": [
              "enabled",
              "units",
              "limit",
              "default",
              "iopsSettings",
              "providerVdcStorageProfile"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AdminVdcStorageProfileType": {
        "title": "AdminVdcStorageProfileType",
        "description": "Represents a storage profile in an organization vDC.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VdcStorageProfileType"
          },
          {
            "type": "object",
            "properties": {
              "providerVdcStorageProfile": {
                "description": "Reference to a Provider vDC storage profile.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              }
            },
            "required": [
              "providerVdcStorageProfile"
            ],
            "additionalProperties": false
          }
        ]
      },
      "UpdateVdcStorageProfilesType": {
        "title": "UpdateVdcStorageProfilesType",
        "description": "Parameters for updating storage profiles in an organization vDC.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ParamsType"
          },
          {
            "type": "object",
            "properties": {
              "addStorageProfile": {
                "description": "Storage profile to add to the organization vDC.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VdcStorageProfileParamsType"
                }
              },
              "removeStorageProfile": {
                "description": "Storage profile to remove from the organization vDC.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReferenceType"
                }
              }
            },
            "required": [
              "addStorageProfile",
              "removeStorageProfile"
            ],
            "additionalProperties": false
          }
        ]
      },
      "PhasesType": {
        "title": "PhasesType",
        "description": "An extensibility phase represents a point in a workflow where control can be passed to an extension. Each phase may define its own message format for communicating with the extension.",
        "type": "object",
        "additionalProperties": false
      },
      "SelectorExtensionType": {
        "title": "SelectorExtensionType",
        "description": "Represents the association between a registered extension and a selector. At the selector level it defines a default policy of association. At the instance level it defines an overridden policy or a selector instance specific association.",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentifiableResourceType"
          },
          {
            "type": "object",
            "properties": {
              "enabled": {
                "nullable": true,
                "description": "True if this extension selector association is enabled.",
                "type": "boolean"
              },
              "priority": {
                "nullable": true,
                "description": "Specifies priority level of a extension selector association.",
                "type": "integer"
              },
              "objectExtensionId": {
                "description": "Opaque string identifying the associated registered object extension.",
                "type": "string"
              },
              "phases": {
                "nullable": true,
                "description": "One or more Phases implemented by this extension in the context of this Selector.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhasesType"
                  }
                ]
              }
            },
            "required": [
              "enabled",
              "priority",
              "objectExtensionId",
              "phases"
            ],
            "additionalProperties": false
          }
        ]
      },
      "SelectorExtensionsType": {
        "title": "SelectorExtensionsType",
        "description": "Represents the collection of selector extensions.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "selectorExtension": {
                "description": "Represents the association between a registered extension and a selector.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SelectorExtensionType"
                }
              }
            },
            "required": [
              "selectorExtension"
            ],
            "additionalProperties": false
          }
        ]
      },
      "CertificateUpdateParamsType": {
        "title": "CertificateUpdateParamsType",
        "description": "Parameters for certificate update.",
        "allOf": [
          {
            "$ref": "#/components/schemas/FileUploadParamsType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "CertificateUploadSocketType": {
        "title": "CertificateUploadSocketType",
        "description": "Upload socket for certificate.",
        "allOf": [
          {
            "$ref": "#/components/schemas/FileUploadSocketType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "KeystoreUpdateParamsType": {
        "title": "KeystoreUpdateParamsType",
        "description": "Parameters for keystore update.",
        "allOf": [
          {
            "$ref": "#/components/schemas/FileUploadParamsType"
          },
          {
            "type": "object",
            "properties": {
              "password": {
                "description": "Password for the keystore.",
                "type": "string"
              }
            },
            "required": [
              "password"
            ],
            "additionalProperties": false
          }
        ]
      },
      "KeystoreUploadSocketType": {
        "title": "KeystoreUploadSocketType",
        "description": "Upload socket for keystore.",
        "allOf": [
          {
            "$ref": "#/components/schemas/FileUploadSocketType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "SspiKeytabUpdateParamsType": {
        "title": "SspiKeytabUpdateParamsType",
        "description": "Parameters for SSPI keytab update.",
        "allOf": [
          {
            "$ref": "#/components/schemas/FileUploadParamsType"
          },
          {
            "type": "object",
            "properties": {
              "SspiServiceProviderName": {
                "description": "Service provider name for SSPI.",
                "type": "string"
              }
            },
            "required": [
              "SspiServiceProviderName"
            ],
            "additionalProperties": false
          }
        ]
      },
      "SspiKeytabUploadSocketType": {
        "title": "SspiKeytabUploadSocketType",
        "description": "Upload socket for SSPI keytab.",
        "allOf": [
          {
            "$ref": "#/components/schemas/FileUploadSocketType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "TrustStoreUpdateParamsType": {
        "title": "TrustStoreUpdateParamsType",
        "description": "Parameters for updating the truststore.",
        "allOf": [
          {
            "$ref": "#/components/schemas/FileUploadParamsType"
          },
          {
            "type": "object",
            "properties": {
              "password": {
                "description": "Password for the truststore.",
                "type": "string"
              }
            },
            "required": [
              "password"
            ],
            "additionalProperties": false
          }
        ]
      },
      "TrustStoreUploadSocketType": {
        "title": "TrustStoreUploadSocketType",
        "description": "Upload socket for the truststore.",
        "allOf": [
          {
            "$ref": "#/components/schemas/FileUploadSocketType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "UserType": {
        "title": "UserType",
        "description": "Represents a local or imported user.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityType"
          },
          {
            "type": "object",
            "properties": {
              "fullName": {
                "nullable": true,
                "description": "Full name of the user.",
                "type": "string"
              },
              "emailAddress": {
                "nullable": true,
                "description": "Email address of the user.",
                "type": "string"
              },
              "telephone": {
                "nullable": true,
                "description": "Telephone number of the user.",
                "type": "string"
              },
              "isEnabled": {
                "nullable": true,
                "description": "True if the user is enabled and can log in.",
                "type": "boolean"
              },
              "isLocked": {
                "nullable": true,
                "description": "True if the user account has been locked due to too many invalid login attempts. A locked user account can be re\\-enabled by updating the user with this flag set to false. Only the system can set the value to true.",
                "type": "boolean"
              },
              "iM": {
                "nullable": true,
                "description": "User's instant messaging address.",
                "type": "string"
              },
              "nameInSource": {
                "nullable": true,
                "readOnly": true,
                "description": "User name as retrieved from, and in the encoding used by, the specified identity provider.",
                "type": "string"
              },
              "isAlertEnabled": {
                "nullable": true,
                "deprecated": true,
                "description": "This field is unused and is deprecated. (True if alerts are enabled for the user.)",
                "type": "boolean"
              },
              "alertEmailPrefix": {
                "nullable": true,
                "deprecated": true,
                "description": "This field is unused and is deprecated. (String to prepend to alert message Subject line.)",
                "type": "string"
              },
              "alertEmail": {
                "nullable": true,
                "deprecated": true,
                "description": "This field is unused and is deprecated. (True if this user should get alert email.)",
                "type": "string"
              },
              "isExternal": {
                "nullable": true,
                "description": "On creation, specifies whether this user should be imported from the organization's LDAP service or created locally. Ignored if ProviderType is SAML or OAUTH. On retrieval, indicates whether the user is local or imported.",
                "type": "boolean"
              },
              "providerType": {
                "nullable": true,
                "description": "Identity provider type for this this user. One of:  \n**INTEGRATED** (The user is created locally or imported from LDAP.)  \n**SAML** (The user is imported from a SAML identity provider.)  \n**OAUTH** (The user is imported from an OAUTH identity provider.)  \n If missing or empty the default value is **INTEGRATED**.",
                "type": "string"
              },
              "isDefaultCached": {
                "nullable": true,
                "deprecated": true,
                "description": "This field is unused and is deprecated. (True if this user is cached by default.)",
                "type": "boolean"
              },
              "isGroupRole": {
                "nullable": true,
                "description": "True if this user has a group role.",
                "type": "boolean"
              },
              "storedVmQuota": {
                "nullable": true,
                "description": "Quota of vApps that this user can store. A value of 0 specifies an unlimited quota.",
                "type": "integer",
                "format": "int32"
              },
              "deployedVmQuota": {
                "nullable": true,
                "description": "Quota of vApps that this user can deploy concurrently. A value of 0 specifies an unlimited quota.",
                "type": "integer",
                "format": "int32"
              },
              "role": {
                "nullable": true,
                "description": "A reference to the user's role. When you are creating a User, the request body must contain exactly one Role element. If the Role element is empty when retrieved,the user inherits a role from the group.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "password": {
                "nullable": true,
                "description": "The user's password. This value is never returned by GET. It is inspected on create and modify. On modify, the absence of this element indicates that the password should not be changed.",
                "type": "string"
              },
              "groupReferences": {
                "nullable": true,
                "readOnly": true,
                "description": "Container for references to groups of which this user is a member.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GroupsListType"
                  }
                ]
              }
            },
            "required": [
              "fullName",
              "emailAddress",
              "telephone",
              "isEnabled",
              "isLocked",
              "iM",
              "nameInSource",
              "isAlertEnabled",
              "alertEmailPrefix",
              "alertEmail",
              "isExternal",
              "providerType",
              "isDefaultCached",
              "isGroupRole",
              "storedVmQuota",
              "deployedVmQuota",
              "role",
              "password",
              "groupReferences"
            ],
            "additionalProperties": false
          }
        ]
      },
      "GroupType": {
        "title": "GroupType",
        "description": "Represents a group in this organization.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityType"
          },
          {
            "type": "object",
            "properties": {
              "nameInSource": {
                "nullable": true,
                "description": "Group name as retrieved from, and in the encoding used by, the specified identity provider.",
                "type": "string"
              },
              "usersList": {
                "nullable": true,
                "readOnly": true,
                "description": "Container for references to users in the group.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UsersListType"
                  }
                ]
              },
              "providerType": {
                "nullable": true,
                "description": "Identity provider type for this this group. One of:  \n**INTEGRATED** (The group is imported from LDAP.)  \n**SAML** (The group is imported from a SAML identity provider.)  \n If missing or empty the default value is **INTEGRATED**.",
                "type": "string"
              },
              "role": {
                "nullable": true,
                "description": "The default role for users in this group.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              }
            },
            "required": [
              "nameInSource",
              "usersList",
              "providerType",
              "role"
            ],
            "additionalProperties": false
          }
        ]
      },
      "UsersListType": {
        "title": "UsersListType",
        "description": "Container for references to users.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "userReference": {
                "readOnly": true,
                "description": "A reference to a user.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReferenceType"
                }
              }
            },
            "required": [
              "userReference"
            ],
            "additionalProperties": false
          }
        ]
      },
      "GroupsListType": {
        "title": "GroupsListType",
        "description": "Container for references to groups.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "groupReference": {
                "readOnly": true,
                "description": "A reference to a group.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReferenceType"
                }
              }
            },
            "required": [
              "groupReference"
            ],
            "additionalProperties": false
          }
        ]
      },
      "RightType": {
        "title": "RightType",
        "description": "Represents a right.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityType"
          },
          {
            "type": "object",
            "properties": {
              "category": {
                "readOnly": true,
                "description": "Assigns a category to the right.",
                "type": "string"
              },
              "bundleKey": {
                "nullable": true,
                "description": "Key used for name localization.",
                "type": "string"
              },
              "serviceNamespace": {
                "nullable": true,
                "readOnly": true,
                "description": "Namespace of the external service that created the right.",
                "type": "string"
              }
            },
            "required": [
              "category",
              "bundleKey",
              "serviceNamespace"
            ],
            "additionalProperties": false
          }
        ]
      },
      "RightReferencesType": {
        "title": "RightReferencesType",
        "description": "Container for references to rights.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "rightReference": {
                "readOnly": true,
                "description": "A reference to a right.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReferenceType"
                }
              }
            },
            "required": [
              "rightReference"
            ],
            "additionalProperties": false
          }
        ]
      },
      "RoleType": {
        "title": "RoleType",
        "description": "A named collection of rights.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityType"
          },
          {
            "type": "object",
            "properties": {
              "rightReferences": {
                "nullable": true,
                "description": "Container for references to the rights assigned to this role.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RightReferencesType"
                  }
                ]
              }
            },
            "required": [
              "rightReferences"
            ],
            "additionalProperties": false
          }
        ]
      },
      "RoleReferencesType": {
        "title": "RoleReferencesType",
        "description": "Container for references to roles.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "roleReference": {
                "readOnly": true,
                "description": "A reference to a role.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReferenceType"
                }
              }
            },
            "required": [
              "roleReference"
            ],
            "additionalProperties": false
          }
        ]
      },
      "OrganizationReferenceType": {
        "title": "OrganizationReferenceType",
        "description": "Represents a reference to an organization.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ReferenceType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "OrganizationReferencesType": {
        "title": "OrganizationReferencesType",
        "description": "Represents the admin view of this cloud.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "organizationReference": {
                "readOnly": true,
                "description": "A reference to an AdminOrgType object.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrganizationReferenceType"
                }
              }
            },
            "required": [
              "organizationReference"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ProviderVdcReferencesType": {
        "title": "ProviderVdcReferencesType",
        "description": "Container for references to Provider vDCs.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "providerVdcReference": {
                "readOnly": true,
                "description": "A reference to a Provider vDC.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReferenceType"
                }
              }
            },
            "required": [
              "providerVdcReference"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VCloudType": {
        "title": "VCloudType",
        "description": "Represents the admin view of a cloud.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityType"
          },
          {
            "type": "object",
            "properties": {
              "organizationReferences": {
                "nullable": true,
                "readOnly": true,
                "description": "Container for references to AdminOrg objects in the system.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OrganizationReferencesType"
                  }
                ]
              },
              "providerVdcReferences": {
                "nullable": true,
                "readOnly": true,
                "description": "A container for references to ProviderVdc objects in the system.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProviderVdcReferencesType"
                  }
                ]
              },
              "rightReferences": {
                "nullable": true,
                "readOnly": true,
                "description": "A container for references to Right objects in the system.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RightReferencesType"
                  }
                ]
              },
              "roleReferences": {
                "nullable": true,
                "readOnly": true,
                "description": "A container for references to Role objects in the system.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RoleReferencesType"
                  }
                ]
              },
              "networks": {
                "nullable": true,
                "readOnly": true,
                "description": "A container for references to ExternalNetwork objects in the system.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NetworksType"
                  }
                ]
              }
            },
            "required": [
              "organizationReferences",
              "providerVdcReferences",
              "rightReferences",
              "roleReferences",
              "networks"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AdminOrgType": {
        "title": "AdminOrgType",
        "description": "Represents the admin view of an organization.",
        "allOf": [
          {
            "$ref": "#/components/schemas/OrgType"
          },
          {
            "type": "object",
            "properties": {
              "settings": {
                "description": "Settings for this organization. Establishes quotas, limits, and policies. Specifies how the organization connects to LDAP and email services.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OrgSettingsType"
                  }
                ]
              },
              "users": {
                "nullable": true,
                "readOnly": true,
                "description": "Container for references to users in this organization.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UsersListType"
                  }
                ]
              },
              "groups": {
                "nullable": true,
                "readOnly": true,
                "description": "Container for references to groups in this organization.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GroupsListType"
                  }
                ]
              },
              "catalogs": {
                "nullable": true,
                "readOnly": true,
                "description": "Container for references to catalogs in this organization.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CatalogsListType"
                  }
                ]
              },
              "vdcs": {
                "nullable": true,
                "readOnly": true,
                "description": "Container for references to vDCs in this organization.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VdcsType"
                  }
                ]
              },
              "vdcTemplates": {
                "nullable": true,
                "readOnly": true,
                "description": "Container for references to VDC templates in this organization.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VdcTemplatesType"
                  }
                ]
              },
              "networks": {
                "nullable": true,
                "readOnly": true,
                "description": "Container for references to organization vDC networks in this organization.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NetworksType"
                  }
                ]
              },
              "orgAssociations": {
                "nullable": true,
                "description": "Container for the references to other organizations whose content will be listed with this organization.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OrgAssociationsType"
                  }
                ]
              },
              "rightReferences": {
                "nullable": true,
                "readOnly": true,
                "description": "A container for references to Right objects in the organization.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OrganizationRightsType"
                  }
                ]
              },
              "roleReferences": {
                "nullable": true,
                "readOnly": true,
                "description": "A container for references to Role objects in the organization.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OrganizationRolesType"
                  }
                ]
              },
              "roleTemplateReferences": {
                "nullable": true,
                "readOnly": true,
                "description": "A container for references to Role objects in the organization.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RoleReferencesType"
                  }
                ]
              }
            },
            "required": [
              "settings",
              "users",
              "groups",
              "catalogs",
              "vdcs",
              "vdcTemplates",
              "networks",
              "orgAssociations",
              "rightReferences",
              "roleReferences",
              "roleTemplateReferences"
            ],
            "additionalProperties": false
          }
        ]
      },
      "OrgVAppTemplateLeaseSettingsType": {
        "title": "OrgVAppTemplateLeaseSettingsType",
        "description": "Represents default vAppTemplate lease policies for this organization.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "deleteOnStorageLeaseExpiration": {
                "nullable": true,
                "description": "Delete on storage lease expiration. Default is false. If true, storage for a vAppTemplate is deleted when the vAppTemplate lease expires. If false, the storage is flagged for deletion, but not deleted.",
                "type": "boolean"
              },
              "storageLeaseSeconds": {
                "nullable": true,
                "description": "Storage lease in seconds",
                "type": "integer",
                "format": "int32"
              }
            },
            "required": [
              "deleteOnStorageLeaseExpiration",
              "storageLeaseSeconds"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VdcTemplatesType": {
        "title": "VdcTemplatesType",
        "description": "Container for VdcTemplateType",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "vdcTemplate": {
                "readOnly": true,
                "description": "A reference to a VDC template object.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VdcTemplateType"
                }
              }
            },
            "required": [
              "vdcTemplate"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VdcTemplateType": {
        "title": "VdcTemplateType",
        "description": "A reference to a VDC template.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityType"
          },
          {
            "type": "object",
            "properties": {
              "vdcTemplateSpecification": {
                "readOnly": true,
                "description": "A reference to the specification for a VDC template object.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VdcTemplateSpecificationType"
                  }
                ]
              }
            },
            "required": [
              "vdcTemplateSpecification"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VdcTemplateListType": {
        "title": "VdcTemplateListType",
        "description": "Represents a list of VDC templates.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "vdcTemplate": {
                "readOnly": true,
                "description": "Reference to a VDC template.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReferenceType"
                }
              }
            },
            "required": [
              "vdcTemplate"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AllocationPoolVdcTemplateSpecificationType": {
        "title": "AllocationPoolVdcTemplateSpecificationType",
        "description": "Specification for a VDC template using the AllocationPool allocation model.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VdcTemplateSpecificationType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "AllocationVappVdcTemplateSpecificationType": {
        "title": "AllocationVappVdcTemplateSpecificationType",
        "description": "Specification for a VDC template using the AllocationVApp allocation model.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VdcTemplateSpecificationType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ReservationPoolVdcTemplateSpecificationType": {
        "title": "ReservationPoolVdcTemplateSpecificationType",
        "description": "Specification for a VDC template using the ReservationPool allocation model.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VdcTemplateSpecificationType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "VdcTemplateSpecificationGatewayConfigurationType": {
        "title": "VdcTemplateSpecificationGatewayConfigurationType",
        "description": "Defines a gateway and NAT Routed organization VDC network to be created.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "gateway": {
                "readOnly": true,
                "description": "EdgeGateway configuration for the VDC created by this template. The following restrictions apply:\n* You may not specify a BackwardCompatibilityMode or an EdgeGatewayServiceConfiguration.\n* The GatewayInterfaces element must contain exactly one GatewayInterface. That GatewayInterface must have an InterfaceType of uplink and must not contain a SubnetParticipation element.\n\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GatewayType"
                  }
                ]
              },
              "network": {
                "readOnly": true,
                "description": "Org VDC network configuration created by this template. The following restrictions apply:\n* You may not specify a BackwardCompatibilityMode, EdgeGatewayServiceConfiguration, or NetworkFeatures.\n* The NetworkConfiguration must specify a FenceMode of natRouted.\n\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OrgVdcNetworkType"
                  }
                ]
              }
            },
            "required": [
              "gateway",
              "network"
            ],
            "additionalProperties": false
          }
        ]
      },
      "InstantiateVdcTemplateParamsType": {
        "title": "InstantiateVdcTemplateParamsType",
        "description": "A basic type used to pass arguments to the instantiate VDC template operation, this provides a name and optional description for a VDC instantiated from a template.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "description": "Typically used to name or identify the subject of the request. For example, the name of the object being created or modified.",
                "type": "string"
              },
              "source": {
                "description": "A reference to a source object, which must be a VDC template.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "description": {
                "nullable": true,
                "description": "Optional description.",
                "type": "string"
              }
            },
            "required": [
              "name",
              "source",
              "description"
            ],
            "additionalProperties": false
          }
        ]
      },
      "NetworksType": {
        "title": "NetworksType",
        "description": "Container for references to ExternalNetwork objects.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "network": {
                "readOnly": true,
                "description": "A reference to an ExternalNetwork object.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReferenceType"
                }
              }
            },
            "required": [
              "network"
            ],
            "additionalProperties": false
          }
        ]
      },
      "CatalogsListType": {
        "title": "CatalogsListType",
        "description": "Container for references to catalogs.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "catalogReference": {
                "readOnly": true,
                "description": "A reference to a catalog.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReferenceType"
                }
              }
            },
            "required": [
              "catalogReference"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ExternalNetworkType": {
        "title": "ExternalNetworkType",
        "description": "Represents the admin view of an external network.",
        "allOf": [
          {
            "$ref": "#/components/schemas/NetworkType"
          },
          {
            "type": "object",
            "properties": {
              "providerInfo": {
                "nullable": true,
                "readOnly": true,
                "description": "Shows vCenter server and port group moref used for external network.",
                "type": "string"
              },
              "networkBackingInfo": {
                "nullable": true,
                "readOnly": true,
                "description": "List of network backings (vCenter server and port group moref) for this network.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NetworkBackingInfoType"
                  }
                ]
              }
            },
            "required": [
              "providerInfo",
              "networkBackingInfo"
            ],
            "additionalProperties": false
          }
        ]
      },
      "OrgSettingsType": {
        "title": "OrgSettingsType",
        "description": "Container for this organization's settings.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "orgGeneralSettings": {
                "nullable": true,
                "description": "Represents general settings for this organization.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OrgGeneralSettingsType"
                  }
                ]
              },
              "vAppLeaseSettings": {
                "nullable": true,
                "description": "Represents default lease durations and related policies for this organization. Runtime lease default is 7 days. Storage lease default is 30 days.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OrgLeaseSettingsType"
                  }
                ]
              },
              "vAppTemplateLeaseSettings": {
                "nullable": true,
                "description": "Represents default vAppTemplate lease policies for this organization. Storage lease default is 30 days.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OrgVAppTemplateLeaseSettingsType"
                  }
                ]
              },
              "orgLdapSettings": {
                "nullable": true,
                "description": "Represents the hostname and connection details for this organization's primary LDAP service.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OrgLdapSettingsType"
                  }
                ]
              },
              "orgEmailSettings": {
                "nullable": true,
                "description": "Represents the email settings for this organization.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OrgEmailSettingsType"
                  }
                ]
              },
              "orgPasswordPolicySettings": {
                "nullable": true,
                "description": "Represents the password policy settings for this organization.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OrgPasswordPolicySettingsType"
                  }
                ]
              },
              "orgOperationLimitsSettings": {
                "nullable": true,
                "description": "Represents operation limits settings for this organization.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OrgOperationLimitsSettingsType"
                  }
                ]
              },
              "orgFederationSettings": {
                "nullable": true,
                "description": "Represents federated identity settings for this organization.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OrgFederationSettingsType"
                  }
                ]
              },
              "orgOAuthSettings": {
                "nullable": true,
                "description": "Contains OAuth identity provider settings for this organization.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OrgOAuthSettingsType"
                  }
                ]
              }
            },
            "required": [
              "orgGeneralSettings",
              "vAppLeaseSettings",
              "vAppTemplateLeaseSettings",
              "orgLdapSettings",
              "orgEmailSettings",
              "orgPasswordPolicySettings",
              "orgOperationLimitsSettings",
              "orgFederationSettings",
              "orgOAuthSettings"
            ],
            "additionalProperties": false
          }
        ]
      },
      "OrgGeneralSettingsType": {
        "title": "OrgGeneralSettingsType",
        "description": "Represents general settings for an organization.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "canPublishCatalogs": {
                "nullable": true,
                "description": "True if this organization is allowed to share catalogs.",
                "type": "boolean"
              },
              "canPublishExternally": {
                "nullable": true,
                "description": "True if this organization allows creation of catalog feeds for consumption by external organizations.",
                "type": "boolean"
              },
              "canSubscribe": {
                "nullable": true,
                "description": "True if this organization allows subscription to external catalog feeds.",
                "type": "boolean"
              },
              "deployedVMQuota": {
                "nullable": true,
                "description": "Maximum number of virtual machines that can be deployed simultaneously by a member of this organization.",
                "type": "integer",
                "format": "int32"
              },
              "storedVmQuota": {
                "nullable": true,
                "description": "Maximum number of virtual machines in vApps or vApp templates that can be stored in an undeployed state by a member of this organization.",
                "type": "integer",
                "format": "int32"
              },
              "useServerBootSequence": {
                "nullable": true,
                "description": "This value is ignored.",
                "type": "boolean"
              },
              "delayAfterPowerOnSeconds": {
                "nullable": true,
                "description": "Specifies this organization's default for virtual machine boot delay after power on.",
                "type": "integer",
                "format": "int32"
              },
              "vdcQuota": {
                "nullable": true,
                "description": "Maximum number of VDCs allowed in this organization. A value of \\-1 means there is no maximum. A value of 0 means this organization cannot create any VDCs.",
                "type": "integer",
                "format": "int32"
              },
              "vmDiscoveryEnabled": {
                "nullable": true,
                "description": "True if discovery of vCenter VMs is enabled for resource pools backing this vDC.",
                "type": "boolean"
              }
            },
            "required": [
              "canPublishCatalogs",
              "canPublishExternally",
              "canSubscribe",
              "deployedVMQuota",
              "storedVmQuota",
              "useServerBootSequence",
              "delayAfterPowerOnSeconds",
              "vdcQuota",
              "vmDiscoveryEnabled"
            ],
            "additionalProperties": false
          }
        ]
      },
      "OrgLeaseSettingsType": {
        "title": "OrgLeaseSettingsType",
        "description": "Represents default lease durations and policies for this organization.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "deleteOnStorageLeaseExpiration": {
                "nullable": true,
                "description": "If true, storage for a vApp is deleted when the vApp's lease expires. If false, the storage is flagged for deletion, but not deleted.",
                "type": "boolean"
              },
              "deploymentLeaseSeconds": {
                "nullable": true,
                "description": "Default duration of a vApp deployment lease, in seconds.",
                "type": "integer",
                "format": "int32"
              },
              "storageLeaseSeconds": {
                "nullable": true,
                "description": "Default duration of a storage lease, in seconds.",
                "type": "integer",
                "format": "int32"
              },
              "powerOffOnRuntimeLeaseExpiration": {
                "nullable": true,
                "description": "When true, vApps are powered off when the runtime lease expires. When false or missing, vApps are suspended when the runtime lease expires.",
                "type": "boolean"
              }
            },
            "required": [
              "deleteOnStorageLeaseExpiration",
              "deploymentLeaseSeconds",
              "storageLeaseSeconds",
              "powerOffOnRuntimeLeaseExpiration"
            ],
            "additionalProperties": false
          }
        ]
      },
      "OrgFederationSettingsType": {
        "title": "OrgFederationSettingsType",
        "description": "Represents federation settings for identity federation.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "sAMLMetadata": {
                "nullable": true,
                "description": "XML\\-encoded SAML 2.0 metadata from this organization's identity provider. If empty, this organization does not support SAML. Download this content over a secure connection from a trusted source (typically your identity provider's SAML metadata URL).",
                "type": "string"
              },
              "enabled": {
                "nullable": true,
                "description": "This boolean value indicates whether the Identity Provider for the organization is enabled or disabled.",
                "type": "boolean"
              },
              "certificateExpiration": {
                "nullable": true,
                "readOnly": true,
                "description": "The expiration time of this org's certificate.",
                "type": "string",
                "format": "date-time"
              },
              "samlSPEntityId": {
                "nullable": true,
                "description": "Service Provider Entity ID to be used when generating SP Metadata",
                "type": "string",
                "format": "uri"
              },
              "roleAttributeName": {
                "nullable": true,
                "description": "The name of the SAML attribute that returns the identifiers of all the groups of which the user is a member.",
                "type": "string"
              },
              "samlSPKeyAndCertificateChain": {
                "nullable": true,
                "description": "Container for an organization's PEM\\-encoded private key and certificate chain. The private key and the public key from the leaf certificate are used during SAML message processing. Not returned on GET",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SamlSPKeyAndCertificateChainType"
                  }
                ]
              }
            },
            "required": [
              "sAMLMetadata",
              "enabled",
              "certificateExpiration",
              "samlSPEntityId",
              "roleAttributeName",
              "samlSPKeyAndCertificateChain"
            ],
            "additionalProperties": false
          }
        ]
      },
      "SamlSPKeyAndCertificateChainType": {
        "title": "SamlSPKeyAndCertificateChainType",
        "description": "Container for an organization's PEM\\-encoded private key and public key certificate chain used during SAML\\-token processing.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "key": {
                "description": "PEM\\-encoded private key body in PKCS#8 format. Key is used during SAML operations for this Org.",
                "type": "string"
              },
              "certificateChain": {
                "description": "PEM\\-formatted X509 certificate chain. The public key from the leaf certificate is used during SAML operations for this Org.",
                "type": "string"
              }
            },
            "required": [
              "key",
              "certificateChain"
            ],
            "additionalProperties": false
          }
        ]
      },
      "OrgOAuthSettingsType": {
        "title": "OrgOAuthSettingsType",
        "description": "Contains OAuth identity provider settings for an organization.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "issuerId": {
                "nullable": true,
                "description": "Issuer Id for the OAuth Identity Provider.",
                "type": "string"
              },
              "oAuthKeyConfigurations": {
                "nullable": true,
                "readOnly": true,
                "description": "A list of OAuth Key configurations.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OAuthKeyConfigurationsListType"
                  }
                ]
              },
              "enabled": {
                "nullable": true,
                "description": "True if the OAuth Identity Provider for this organization is enabled. Unset or empty defaults to true.",
                "type": "boolean"
              }
            },
            "required": [
              "issuerId",
              "oAuthKeyConfigurations",
              "enabled"
            ],
            "additionalProperties": false
          }
        ]
      },
      "OAuthKeyConfigurationsListType": {
        "title": "OAuthKeyConfigurationsListType",
        "description": "Contains a list of OAuth Key configurations.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "oAuthKeyConfiguration": {
                "readOnly": true,
                "description": "OAuth key configuration.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OAuthKeyConfigurationType"
                }
              }
            },
            "required": [
              "oAuthKeyConfiguration"
            ],
            "additionalProperties": false
          }
        ]
      },
      "OAuthKeyConfigurationType": {
        "title": "OAuthKeyConfigurationType",
        "description": "OAuth Key Configuration",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "keyId": {
                "description": "Identifier for the key used by the Identity Provider. This key id is expected to be present in the header portion of OAuth tokens issued by by the Identity provider.",
                "type": "string"
              },
              "algorithm": {
                "description": "Identifies the cryptographic algorithm family of the key. Supported values are RSA and EC for asymmetric keys.",
                "type": "string"
              },
              "key": {
                "description": "PEM formatted key body. Key is used during validation of OAuth tokens for this Org.",
                "type": "string"
              },
              "expirationDate": {
                "nullable": true,
                "description": "Expiration date for this key. If specified, tokens signed with this key should be considered invalid after this time.",
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "keyId",
              "algorithm",
              "key",
              "expirationDate"
            ],
            "additionalProperties": false
          }
        ]
      },
      "OrgLdapSettingsType": {
        "title": "OrgLdapSettingsType",
        "description": "Represents LDAP connection settings for an organization.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "orgLdapMode": {
                "nullable": true,
                "description": "Defines whether this organization is connected to an LDAP service, and whether it uses the system default LDAP service or a custom LDAP service. One of:  \n**NONE** (This organization has no LDAP connection.)  \n**SYSTEM** (This organization uses the system default LDAP service.)  \n**CUSTOM** (This organization uses the LDAP service specified in CustomOrgLdapSettings.)",
                "type": "string"
              },
              "customUsersOu": {
                "nullable": true,
                "description": "If OrgLdapMode is SYSTEM, specifies an LDAP attribute=value pair to use for OU (organizational unit).",
                "type": "string"
              },
              "customOrgLdapSettings": {
                "nullable": true,
                "description": "If OrgLdapMode is CUSTOM, this element defines the hostname and connection details for the organization's LDAP service.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CustomOrgLdapSettingsType"
                  }
                ]
              }
            },
            "required": [
              "orgLdapMode",
              "customUsersOu",
              "customOrgLdapSettings"
            ],
            "additionalProperties": false
          }
        ]
      },
      "CustomOrgLdapSettingsType": {
        "title": "CustomOrgLdapSettingsType",
        "description": "Represents connection details for an organization's LDAP service.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "hostName": {
                "nullable": true,
                "description": "Hostname of the LDAP server.",
                "type": "string"
              },
              "port": {
                "description": "Port at which to connect to the LDAP service.",
                "type": "integer",
                "format": "int32"
              },
              "isSsl": {
                "nullable": true,
                "description": "True if the LDAP service requires an SSL connection.",
                "type": "boolean"
              },
              "isSslAcceptAll": {
                "nullable": true,
                "description": "True if the LDAP service accepts all SSL certificates.",
                "type": "boolean"
              },
              "realm": {
                "nullable": true,
                "description": "LDAP realm to use when looking up users.",
                "type": "string"
              },
              "searchBase": {
                "nullable": true,
                "description": "LDAP search base.",
                "type": "string"
              },
              "userName": {
                "nullable": true,
                "description": "Username to use when logging in to LDAP, specified using LDAP attribute=value pairs (for example: cn=\"ldap\\-admin\", c=\"example\", dc=\"com\").",
                "type": "string"
              },
              "password": {
                "nullable": true,
                "description": "Password for the user identified by UserName. This value is never returned by GET. It is inspected on create and modify. On modify, the absence of this element indicates that the password should not be changed.",
                "type": "string"
              },
              "authenticationMechanism": {
                "description": "One of:  \n**SIMPLE** (Simple authentication as specified in RFC 2251 and RFC 2829.)  \n**KERBEROS** (Kerberos authentication)  \n**MD5DIGEST** (Digest MD5 authentication as specified in RFC 2831.)   \n**NTLM** (Windows NTLM authentication.)",
                "type": "string"
              },
              "groupSearchBase": {
                "nullable": true,
                "description": "LDAP group search base.",
                "type": "string"
              },
              "isGroupSearchBaseEnabled": {
                "description": "True if the group search base is enabled.",
                "type": "boolean"
              },
              "connectorType": {
                "description": "Defines LDAP service implementation type. One of:  \n**ACTIVE\\_DIRECTORY** (LDAP service provided by Microsoft Active Directory.)  \n**OPEN\\_LDAP** (LDAP service provided by Open LDAP).",
                "type": "string"
              },
              "userAttributes": {
                "description": "Defines how LDAP attributes are used when importing a user.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OrgLdapUserAttributesType"
                  }
                ]
              },
              "groupAttributes": {
                "description": "Defines how LDAP attributes are used when importing a group.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OrgLdapGroupAttributesType"
                  }
                ]
              },
              "useExternalKerberos": {
                "nullable": true,
                "description": "Set to true to use an external Kerberos service.",
                "type": "boolean"
              }
            },
            "required": [
              "hostName",
              "port",
              "isSsl",
              "isSslAcceptAll",
              "realm",
              "searchBase",
              "userName",
              "password",
              "authenticationMechanism",
              "groupSearchBase",
              "isGroupSearchBaseEnabled",
              "connectorType",
              "userAttributes",
              "groupAttributes",
              "useExternalKerberos"
            ],
            "additionalProperties": false
          }
        ]
      },
      "OrgLdapGroupAttributesType": {
        "title": "OrgLdapGroupAttributesType",
        "description": "Defines how a group is imported from LDAP.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "objectClass": {
                "description": "LDAP objectClass of which imported groups are members. For example, group.",
                "type": "string"
              },
              "objectIdentifier": {
                "description": "LDAP attribute to use as the unique identifier for a group. For example, objectGuid.",
                "type": "string"
              },
              "groupName": {
                "description": "LDAP attribute to use for the group name. For example, cn.",
                "type": "string"
              },
              "membership": {
                "description": "LDAP attribute to use when getting the members of a group. For example, member.",
                "type": "string"
              },
              "membershipIdentifier": {
                "description": "LDAP attribute that identifies a group as a member of another group. For example, dn.",
                "type": "string"
              },
              "backLinkIdentifier": {
                "nullable": true,
                "readOnly": true,
                "description": "LDAP group attribute used to identify a group member.",
                "type": "string"
              }
            },
            "required": [
              "objectClass",
              "objectIdentifier",
              "groupName",
              "membership",
              "membershipIdentifier",
              "backLinkIdentifier"
            ],
            "additionalProperties": false
          }
        ]
      },
      "OrgLdapUserAttributesType": {
        "title": "OrgLdapUserAttributesType",
        "description": "Defines how LDAP attributes are used when importing a user.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "objectClass": {
                "description": "LDAP objectClass of which imported users are members. For example, user or person",
                "type": "string"
              },
              "objectIdentifier": {
                "description": "LDAP attribute to use as the unique identifier for a user. For example, objectGuid.",
                "type": "string"
              },
              "userName": {
                "description": "LDAP attribute to use when looking up a user name to import. For example, userPrincipalName or samAccountName.",
                "type": "string"
              },
              "email": {
                "description": "LDAP attribute to use for the user's email address. For example, mail.",
                "type": "string"
              },
              "fullName": {
                "description": "LDAP attribute to use for the user's full name. For example, displayName.",
                "type": "string"
              },
              "givenName": {
                "description": "LDAP attribute to use for the user's given name. For example, givenName.",
                "type": "string"
              },
              "surname": {
                "description": "LDAP attribute to use for the user's surname. For example, sn.",
                "type": "string"
              },
              "telephone": {
                "description": "LDAP attribute to use for the user's telephone number. For example, telephoneNumber.",
                "type": "string"
              },
              "groupMembershipIdentifier": {
                "description": "LDAP attribute that identifies a user as a member of a group. For example, dn.",
                "type": "string"
              },
              "groupBackLinkIdentifier": {
                "nullable": true,
                "description": "LDAP attribute that returns the identifiers of all the groups of which the user is a member.",
                "type": "string"
              }
            },
            "required": [
              "objectClass",
              "objectIdentifier",
              "userName",
              "email",
              "fullName",
              "givenName",
              "surname",
              "telephone",
              "groupMembershipIdentifier",
              "groupBackLinkIdentifier"
            ],
            "additionalProperties": false
          }
        ]
      },
      "OrgEmailSettingsType": {
        "title": "OrgEmailSettingsType",
        "description": "Represents the email settings for an organization.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "isDefaultSmtpServer": {
                "description": "True if this organization uses the system default SMTP server.",
                "type": "boolean"
              },
              "isDefaultOrgEmail": {
                "description": "True if this organization uses the system default email properties.",
                "type": "boolean"
              },
              "fromEmailAddress": {
                "description": "If IsDefaultOrgEmail is false, specifies the sender's email address that appears in email notifications.",
                "type": "string"
              },
              "defaultSubjectPrefix": {
                "description": "If IsDefaultOrgEmail is false, specifies a prefix for system email notifications.",
                "type": "string"
              },
              "isAlertEmailToAllAdmins": {
                "description": "True if system email notifications should be sent to all users who have the Administrator role.",
                "type": "boolean"
              },
              "alertEmailTo": {
                "readOnly": true,
                "description": "If IsAlertEmailToAllAdmins is false, specifies a list of users to receive system email notifications.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "smtpServerSettings": {
                "nullable": true,
                "description": "If IsDefaultSmtpServer is false, specifies connection details for an SMTP server to use.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SmtpServerSettingsType"
                  }
                ]
              }
            },
            "required": [
              "isDefaultSmtpServer",
              "isDefaultOrgEmail",
              "fromEmailAddress",
              "defaultSubjectPrefix",
              "isAlertEmailToAllAdmins",
              "alertEmailTo",
              "smtpServerSettings"
            ],
            "additionalProperties": false
          }
        ]
      },
      "SmtpServerSettingsType": {
        "title": "SmtpServerSettingsType",
        "description": "Defines connection details for the organization s SMTP server. If IsDefaultSmtpServer (in OrgEmailSettings) is false, the SmtpServerSettings element is taken into account.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "isUseAuthentication": {
                "description": "True if the SMTP server requires authentication.",
                "type": "boolean"
              },
              "host": {
                "description": "Hostname of the SMTP server.",
                "type": "string"
              },
              "port": {
                "nullable": true,
                "description": "Port number of the SMTP server.",
                "type": "integer",
                "format": "int32"
              },
              "username": {
                "description": "Username to use when logging in to the SMTP service. (Required if IsUseAuthentication is True).",
                "type": "string"
              },
              "password": {
                "nullable": true,
                "description": "Password for the user identified by Username. This value is never returned by GET. It is inspected on create and modify. On modify, the absence of this element indicates that the password should not be changed. Required if IsUseAuthentication is true.",
                "type": "string"
              },
              "smtpSecureMode": {
                "nullable": true,
                "description": "Security protocol to use when connecting to the SMTP server. One of:  \n startTls \\-\\- Use the STARTTLS protocol  \n ssl \\-\\- \\-Use the SSL/TLS protocol  \n none \\-\\- Do not use any security protocol",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SmtpSecureModeType"
                  }
                ]
              },
              "sslTrustStore": {
                "nullable": true,
                "description": "Custom truststore to use to trust peer certificates when establishing a secure connection using SSL/STARTTLS (when enabled).",
                "type": "string"
              }
            },
            "required": [
              "isUseAuthentication",
              "host",
              "port",
              "username",
              "password",
              "smtpSecureMode",
              "sslTrustStore"
            ],
            "additionalProperties": false
          }
        ]
      },
      "OrgPasswordPolicySettingsType": {
        "title": "OrgPasswordPolicySettingsType",
        "description": "Represents password policy settings for this organization.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "accountLockoutEnabled": {
                "description": "Set to true to enable account lockout for logins to this organization.",
                "type": "boolean"
              },
              "invalidLoginsBeforeLockout": {
                "description": "Number of invalid login attempts that will trigger account lockout.",
                "type": "integer",
                "format": "int32"
              },
              "accountLockoutIntervalMinutes": {
                "description": "Number of minutes an account that is locked out will remain locked.",
                "type": "integer",
                "format": "int32"
              }
            },
            "required": [
              "accountLockoutEnabled",
              "invalidLoginsBeforeLockout",
              "accountLockoutIntervalMinutes"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AdminCatalogType": {
        "title": "AdminCatalogType",
        "description": "Represents the admin view of a catalog.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CatalogType"
          },
          {
            "type": "object",
            "properties": {
              "catalogStorageProfiles": {
                "nullable": true,
                "description": "Container for VdcStorageProfile elements that reference storage profiles used by this catalog.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CatalogStorageProfilesType"
                  }
                ]
              },
              "externalCatalogSubscriptionParams": {
                "nullable": true,
                "description": "Configuration parameters for a catalog that has an external subscription.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExternalCatalogSubscriptionParamsType"
                  }
                ]
              },
              "publishExternalCatalogParams": {
                "nullable": true,
                "description": "Configuration parameters for a catalog that is published externally.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PublishExternalCatalogParamsType"
                  }
                ]
              }
            },
            "required": [
              "catalogStorageProfiles",
              "externalCatalogSubscriptionParams",
              "publishExternalCatalogParams"
            ],
            "additionalProperties": false
          }
        ]
      },
      "OrgsType": {
        "title": "OrgsType",
        "description": "Represents a list of organizations.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "org": {
                "readOnly": true,
                "description": "Reference to an organization.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReferenceType"
                }
              }
            },
            "required": [
              "org"
            ],
            "additionalProperties": false
          }
        ]
      },
      "CatalogStorageProfilesType": {
        "title": "CatalogStorageProfilesType",
        "description": "Container for VdcStorageProfile elements that reference storage profiles used by a catalog.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "vdcStorageProfile": {
                "description": "A reference to a VDC storage profile.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReferenceType"
                }
              }
            },
            "required": [
              "vdcStorageProfile"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ExternalCatalogSubscriptionParamsType": {
        "title": "ExternalCatalogSubscriptionParamsType",
        "description": "Configuration parameters for a catalog that has an external subscription.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "subscribeToExternalFeeds": {
                "nullable": true,
                "description": "True enables the external subscription configured by these parameters.",
                "type": "boolean"
              },
              "location": {
                "nullable": true,
                "description": "Endpoint URL to subscribe to.",
                "type": "string"
              },
              "password": {
                "nullable": true,
                "description": "Password required by the endpoint.",
                "type": "string"
              },
              "expectedSslThumbprint": {
                "nullable": true,
                "description": "Expected SSL thumbprint of the endpoint.",
                "type": "string"
              },
              "localCopy": {
                "nullable": true,
                "description": "If true, synchronization creates a local copy of all items. Defaults to false, which defers creation of the local copy until the item is required by an operation such as instantiation.",
                "type": "boolean"
              }
            },
            "required": [
              "subscribeToExternalFeeds",
              "location",
              "password",
              "expectedSslThumbprint",
              "localCopy"
            ],
            "additionalProperties": false
          }
        ]
      },
      "PublishExternalCatalogParamsType": {
        "title": "PublishExternalCatalogParamsType",
        "description": "Configuration parameters for a catalog that is published externally.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "isPublishedExternally": {
                "nullable": true,
                "description": "True enables external publication as configured by these parameters.",
                "type": "boolean"
              },
              "catalogPublishedUrl": {
                "nullable": true,
                "description": "Read\\-only endpoint URL supplied by the server. External subscribers can connect to the catalog at this URL.",
                "type": "string"
              },
              "password": {
                "nullable": true,
                "description": "Password required when connecting to the endpoint.",
                "type": "string"
              },
              "isCacheEnabled": {
                "nullable": true,
                "description": "True enables content caching for this catalog. All items in the catalog are created and stored in transfer storage. If false, items are not placed in transfer storage until they are requested by a subscriber.",
                "type": "boolean"
              },
              "preserveIdentityInfoFlag": {
                "nullable": true,
                "description": "True includes BIOS UUIDs and MAC addresses in the downloaded OVF package. If false, those information will be excluded.",
                "type": "boolean"
              }
            },
            "required": [
              "isPublishedExternally",
              "catalogPublishedUrl",
              "password",
              "isCacheEnabled",
              "preserveIdentityInfoFlag"
            ],
            "additionalProperties": false
          }
        ]
      },
      "OrgGuestPersonalizationSettingsType": {
        "title": "OrgGuestPersonalizationSettingsType",
        "description": "Represents default guest personalization settings for an organization. These values are applied during guest customization of virtual machines in this organization if their GuestCustomizationSection specifies UseOrgSettings.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "domainUsername": {
                "nullable": true,
                "description": "Username of an administrator for the Windows domain specified in DomainName.",
                "type": "string"
              },
              "domainPassword": {
                "nullable": true,
                "description": "Password for the user identified by DomainUsername.",
                "type": "string"
              },
              "domainName": {
                "nullable": true,
                "description": "Name of the domain for which DomainUsername has join rights",
                "type": "string"
              },
              "allowDomainSettings": {
                "nullable": true,
                "description": "True if virtual machines in this organization can join a Windows domain.",
                "type": "boolean"
              },
              "accountOrganizationalUnit": {
                "nullable": true,
                "description": "Value of the organizational unit (OU) LDAP attribute for DomainUsername.",
                "type": "string"
              }
            },
            "required": [
              "domainUsername",
              "domainPassword",
              "domainName",
              "allowDomainSettings",
              "accountOrganizationalUnit"
            ],
            "additionalProperties": false
          }
        ]
      },
      "OrgOperationLimitsSettingsType": {
        "title": "OrgOperationLimitsSettingsType",
        "description": "Represents operation limits settings for an organization. An operation is defined as resource\\-intensive if it returns a Task object. The default value for all operation limits settings is 0, which specifies no limit.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "consolesPerVmLimit": {
                "nullable": true,
                "description": "Maximum number of remote consoles that can be open for a single VM.",
                "type": "integer",
                "format": "int32"
              },
              "operationsPerUser": {
                "nullable": true,
                "description": "Maximum number of resource\\-intensive operations requested by a user in this organization that can be simultaneously eligible to run. When a user makes a request that would cause this limit to be exceeded, the requested operation is queued but remains ineligible to run until enough of the user's eligible requests have been run to allow an ineligible request to become eligible.",
                "type": "integer",
                "format": "int32"
              },
              "operationsPerOrg": {
                "nullable": true,
                "description": "Maximum number of resource\\-intensive operations owned by this organization that can be simultaneously eligible to run. When an organization member makes a request that would cause this limit to be exceeded, the requested operation is queued but remains ineligible to run until enough of the organization's eligible requests have been run to allow an ineligible request to become eligible.",
                "type": "integer",
                "format": "int32"
              },
              "queuedOperationsPerUser": {
                "nullable": true,
                "description": "Maximum number of resource\\-intensive operations that a user in this organization can queue. When a user makes a request that would cause this limit to be exceeded, the request fails and returns HTTP status 400.",
                "type": "integer",
                "format": "int32"
              },
              "queuedOperationsPerOrg": {
                "nullable": true,
                "description": "Maximum number of queued resource\\-intensive operations allowed for all users in this organization. When an organization member makes a request that would cause this limit to be exceeded, the request fails and returns HTTP status 400.",
                "type": "integer",
                "format": "int32"
              }
            },
            "required": [
              "consolesPerVmLimit",
              "operationsPerUser",
              "operationsPerOrg",
              "queuedOperationsPerUser",
              "queuedOperationsPerOrg"
            ],
            "additionalProperties": false
          }
        ]
      },
      "OrganizationRightsType": {
        "title": "OrganizationRightsType",
        "description": "Represents all the rights that have been granted to an organization.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "rightReference": {
                "readOnly": true,
                "description": "A reference to a role.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReferenceType"
                }
              }
            },
            "required": [
              "rightReference"
            ],
            "additionalProperties": false
          }
        ]
      },
      "OrganizationRolesType": {
        "title": "OrganizationRolesType",
        "description": "Represents all the roles available in an organization.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "roleReference": {
                "readOnly": true,
                "description": "A reference to a role.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReferenceType"
                }
              }
            },
            "required": [
              "roleReference"
            ],
            "additionalProperties": false
          }
        ]
      },
      "NotificationType": {
        "title": "NotificationType",
        "description": "vCloud Director AMQP notification in XML format. This notification format has been deprecated in favor of a JSON format. It might be removed in a future release.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "description": "The type of the notification. A string of the form com/vmware/vcloud/event/*object\\-type*/*event\\-type*.****",
                "type": "string"
              },
              "eventId": {
                "description": "A unique identifier for the event.",
                "type": "string"
              },
              "link": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/vcloud:LinkType"
                }
              },
              "entityLink": {
                "readOnly": true,
                "description": "Contains a reference to the entity associated with the notification.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/vcloud:EntityLinkType"
                }
              },
              "timestamp": {
                "description": "Timestamp applied when the notification was posted.",
                "type": "string",
                "format": "date-time"
              },
              "operationSuccess": {
                "description": "True if the notification refers to a successful operation.",
                "type": "boolean"
              }
            },
            "required": [
              "type",
              "eventId",
              "link",
              "entityLink",
              "timestamp",
              "operationSuccess"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ObjectExtensionType": {
        "title": "ObjectExtensionType",
        "description": "Represents a registered object extension.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:IdentifiableResourceType"
          },
          {
            "type": "object",
            "properties": {
              "namespace": {
                "nullable": true,
                "description": "Extension service namespace. Must be unique among all registered services.",
                "type": "string"
              },
              "enabled": {
                "nullable": true,
                "description": "True if this extension service is enabled.",
                "type": "boolean"
              },
              "exchange": {
                "nullable": true,
                "description": "AMQP exchange that messages for this extension service are published to.",
                "type": "string"
              },
              "contentType": {
                "nullable": true,
                "description": "AMQP message body content type used. Supported values are: XML JSON Defaults to XML if none is specified.",
                "type": "string"
              },
              "vendor": {
                "nullable": true,
                "description": "Extension service vendor name.",
                "type": "string"
              }
            },
            "required": [
              "namespace",
              "enabled",
              "exchange",
              "contentType",
              "vendor"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ObjectExtensionsType": {
        "title": "ObjectExtensionsType",
        "description": "The collection of registered object extensions.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "objectExtension": {
                "description": "Represents a registered object extension.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ObjectExtensionType"
                }
              }
            },
            "required": [
              "objectExtension"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ExtensionServicesType": {
        "title": "ExtensionServicesType",
        "description": "List of references to registered extension services.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "AdminServiceType": {
        "title": "AdminServiceType",
        "description": "Represents an extension service.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:EntityType"
          },
          {
            "type": "object",
            "properties": {
              "namespace": {
                "nullable": true,
                "description": "Extension service namespace. Must be unique among all registered services.",
                "type": "string"
              },
              "enabled": {
                "nullable": true,
                "description": "True if this extension service is enabled.",
                "type": "boolean"
              },
              "authorizationEnabled": {
                "nullable": true,
                "description": "True if this service participates in the vCloud API REST authorization framework for extension services.",
                "type": "boolean"
              },
              "routingKey": {
                "nullable": true,
                "description": "AMQP routing key for this extension service.",
                "type": "string"
              },
              "priority": {
                "nullable": true,
                "description": "Extension service priority. An integer between 0\\-100. A value of 50 denotes a neutral priority.",
                "type": "integer",
                "format": "int32"
              },
              "exchange": {
                "nullable": true,
                "description": "AMQP exchange that messages for this extension service are published to.",
                "type": "string"
              },
              "vendor": {
                "nullable": true,
                "description": "Extension service vendor name.",
                "type": "string"
              },
              "apiFilters": {
                "nullable": true,
                "description": "Container for API filters defined by an extension service.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApiFiltersType"
                  }
                ]
              },
              "serviceLinks": {
                "nullable": true,
                "description": "Container for values used to create links defined by an extension service.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AdminServiceLinksType"
                  }
                ]
              },
              "apiDefinitions": {
                "nullable": true,
                "description": "Container for values used to specify an API defined by an extension service.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AdminApiDefinitionsType"
                  }
                ]
              },
              "resourceClasses": {
                "nullable": true,
                "description": "Container for values that define extension service resource classes.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceClassesType"
                  }
                ]
              }
            },
            "required": [
              "namespace",
              "enabled",
              "authorizationEnabled",
              "routingKey",
              "priority",
              "exchange",
              "vendor",
              "apiFilters",
              "serviceLinks",
              "apiDefinitions",
              "resourceClasses"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ApiFilterType": {
        "title": "ApiFilterType",
        "description": "Represents an extension service API filter as a UrlPattern or a ResponseContentType.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:IdentifiableResourceType"
          },
          {
            "type": "object",
            "properties": {
              "urlPattern": {
                "nullable": true,
                "description": "Request URL pattern, written as a regular expression pattern recognized by java.util.regex.Pattern. Requests matching the pattern are sent to this extension service. Element content cannot exceed 1024 characters. UrlPattern is mutually exclusive with ResponseContentType.",
                "type": "string"
              },
              "responseContentType": {
                "nullable": true,
                "description": "Response Content\\-Type, expressed as a MIME Content\\-Type string. Responses whose Content\\-Type attribute has a value that matches this string are routed to the service. ResponseContentType is mutually exclusive with UrlPattern.",
                "type": "string"
              }
            },
            "required": [
              "urlPattern",
              "responseContentType"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ApiFiltersType": {
        "title": "ApiFiltersType",
        "description": "Container for extension service API filters.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "apiFilter": {
                "description": "Represents an extension service API filter.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApiFilterType"
                }
              }
            },
            "required": [
              "apiFilter"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AdminApiDefinitionType": {
        "title": "AdminApiDefinitionType",
        "description": "Represents an extension service API definition.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:EntityType"
          },
          {
            "type": "object",
            "properties": {
              "entryPoint": {
                "nullable": true,
                "description": "The URL to which a client can send requests to this extension service API. URL string must be <=255 characters. Can include the variable {baseUri}, which represents the vCloud Director REST API base URL.",
                "type": "string"
              },
              "namespace": {
                "nullable": true,
                "description": "The namespace of this external service API definition. Must be <=255 characters.",
                "type": "string"
              },
              "apiVendor": {
                "nullable": true,
                "description": "The name of the external service API vendor. Not required to be the same as the vendor of the external service this API definition is associated with. Must be <=255 characters.",
                "type": "string"
              },
              "supportedApiVersions": {
                "nullable": true,
                "description": "Supported extension service API versions.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VersionsType"
                  }
                ]
              },
              "files": {
                "nullable": true,
                "description": "List of files associated with this extension service API definition.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AdminFileDescriptorsType"
                  }
                ]
              }
            },
            "required": [
              "entryPoint",
              "namespace",
              "apiVendor",
              "supportedApiVersions",
              "files"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AdminApiDefinitionsType": {
        "title": "AdminApiDefinitionsType",
        "description": "Represents a list of extension service API definitions.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "apiDefinition": {
                "description": "Represents a single extension service API definition.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdminApiDefinitionType"
                }
              }
            },
            "required": [
              "apiDefinition"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VersionsType": {
        "title": "VersionsType",
        "description": "Represents a list of API versions supported by an ApiVendor.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "version": {
                "readOnly": true,
                "description": "Single API version supported by an ApiVendor.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "version"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AdminFileDescriptorType": {
        "title": "AdminFileDescriptorType",
        "description": "Represents an extension service API definition file.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:IdentifiableResourceType"
          },
          {
            "type": "object",
            "properties": {
              "description": {
                "nullable": true,
                "description": "Description of this extension service API definition file.",
                "type": "string"
              },
              "file": {
                "nullable": true,
                "description": "A reference to this extension service API definition file.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vcloud:ReferenceType"
                  }
                ]
              }
            },
            "required": [
              "description",
              "file"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AdminFileDescriptorsType": {
        "title": "AdminFileDescriptorsType",
        "description": "A list of extension service API definition file descriptors.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "fileDescriptor": {
                "description": "Represents an extension service API definition file.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdminFileDescriptorType"
                }
              }
            },
            "required": [
              "fileDescriptor"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AdminServiceLinkType": {
        "title": "AdminServiceLinkType",
        "description": "Represents a service link defined by an extension service.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:IdentifiableResourceType"
          },
          {
            "type": "object",
            "properties": {
              "linkHref": {
                "nullable": true,
                "description": "The value of href attribute of this service Link. Can be any URI, and can include the variables {baseUri} and {resourceId}. When constructing the href value of the Link, vCloud Director replaces {baseUri} with the vCloud Director REST API base URL, and replaces {resourceId} with the UUID portion of the id attribute value of the resource in which the Link is inserted. Must be <=255 characters.",
                "type": "string"
              },
              "mimeType": {
                "nullable": true,
                "description": "The value, specified as a MIME content type, of the type attribute of the Link. Must be <=255 characters.",
                "type": "string"
              },
              "rel": {
                "nullable": true,
                "description": "The value of the rel attribute of the Link. Must be <=255 characters.",
                "type": "string"
              },
              "resourceType": {
                "nullable": true,
                "description": "The object type, specified as a MIME content type, of the object in which the Link appears. Must be <=255 characters.",
                "type": "string"
              },
              "resourceId": {
                "nullable": true,
                "description": "The id of the resource in which this Link appears. The resource must be of the type specified in ResourceType. If this element is missing or empty, the Link appears in all resources of the specified type. Must be <=255 characters.",
                "type": "string"
              },
              "externalResourceId": {
                "nullable": true,
                "description": "The id of an external resource managed by an extension. The value of this element will appear as the id attribute of the Link element. Must be <=255 characters.",
                "type": "string"
              }
            },
            "required": [
              "linkHref",
              "mimeType",
              "rel",
              "resourceType",
              "resourceId",
              "externalResourceId"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AdminServiceLinksType": {
        "title": "AdminServiceLinksType",
        "description": "A list of service links for extension services.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "serviceLink": {
                "description": "Represents a service link defined by an extension service.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdminServiceLinkType"
                }
              }
            },
            "required": [
              "serviceLink"
            ],
            "additionalProperties": false
          }
        ]
      },
      "BundleUploadParamsType": {
        "title": "BundleUploadParamsType",
        "description": "Parameters for initializing an upload session for an extension service localization bundle.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "fileSize": {
                "description": "Size in bytes of the extension service localization bundle that will be uploaded.",
                "type": "integer",
                "format": "int64"
              },
              "serviceNamespace": {
                "description": "The service namespace to which this extension service localization bundle applies.",
                "type": "string"
              }
            },
            "required": [
              "fileSize",
              "serviceNamespace"
            ],
            "additionalProperties": false
          }
        ]
      },
      "BundleUploadSocketType": {
        "title": "BundleUploadSocketType",
        "description": "Upload information for an extension service localization bundle.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "uploadLocation": {
                "readOnly": true,
                "description": "Upload URL for an extension service localization bundle.",
                "type": "string"
              }
            },
            "required": [
              "uploadLocation"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AclAccessType": {
        "title": "AclAccessType",
        "description": "Represents an access type in an extension service ACL rule.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "access": {
                "nullable": true,
                "description": "The access type. One of:  \n Entity  \n Shared  \n Published.",
                "type": "string"
              },
              "entity": {
                "nullable": true,
                "description": "Required when Access value is Entity. Contains a reference to the entity for which the action is authorized.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vcloud:ReferenceType"
                  }
                ]
              }
            },
            "required": [
              "access",
              "entity"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AclRuleType": {
        "title": "AclRuleType",
        "description": "Represents an extension service ACL rule.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:EntityType"
          },
          {
            "type": "object",
            "properties": {
              "serviceResourceAccess": {
                "nullable": true,
                "readOnly": true,
                "description": "Specifies service resource access. One of:  \n Entity \\-\\- The action is authorized for the resource referenced in the Entity element in this container.  \n Shared \\-\\- The action is authorized for all resources in this resource class.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AclAccessType"
                  }
                ]
              },
              "organizationAccess": {
                "nullable": true,
                "readOnly": true,
                "description": "Specifies organization access. One of:  \n Entity \\-\\- The action is authorized for the organization referenced in the Entity element in this container.  \n Shared \\-\\- The action is authorized for all members of the organization that owns the resource.  \n Published \\-\\- The action is authorized for all members of any organization in the cloud.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AclAccessType"
                  }
                ]
              },
              "principalAccess": {
                "nullable": true,
                "readOnly": true,
                "description": "Specifies principal access. One of:  \n Entity \\-\\- The action is authorized for the User referenced in the Entity element in this container, or for any role that includes the Right referenced in the Entity element in this container.  \n Shared \\-\\- The action is authorized for all users.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AclAccessType"
                  }
                ]
              }
            },
            "required": [
              "serviceResourceAccess",
              "organizationAccess",
              "principalAccess"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ResourceClassActionType": {
        "title": "ResourceClassActionType",
        "description": "Defines the HTTP methods allowed on a URL pattern associated with an extension service resource class.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:EntityType"
          },
          {
            "type": "object",
            "properties": {
              "httpMethod": {
                "nullable": true,
                "readOnly": true,
                "description": "HTTP method, one of: GET, PUT, POST, DELETE.",
                "type": "string"
              },
              "urlPattern": {
                "nullable": true,
                "readOnly": true,
                "description": "The relative URL of the resource as a named regular expression where (?<id\\>) matches the resource identifier. For example:  \n /backup/restore  \n /backup/restore/(?<id\\>[\\-,a\\-g,0\\-9]\\*)  \n Must be <=1024 characters.",
                "type": "string"
              },
              "aclRules": {
                "nullable": true,
                "description": "Container for values used to create ACL rules for an extension service resource class action.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AclRulesType"
                  }
                ]
              }
            },
            "required": [
              "httpMethod",
              "urlPattern",
              "aclRules"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ResourceClassType": {
        "title": "ResourceClassType",
        "description": "Represents a resource class defined by an external service.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:EntityType"
          },
          {
            "type": "object",
            "properties": {
              "mimeType": {
                "nullable": true,
                "readOnly": true,
                "description": "The MIME type for extension service resources of this resource class. Must be <=128 characters.",
                "type": "string"
              },
              "urlTemplate": {
                "nullable": true,
                "readOnly": true,
                "description": "A template for constructing the href attribute value for resources of this class. Can be any URI, and can include the variables {baseUri} and {resourceId}. When constructing the href value, vCloud Director replaces {baseUri} with the vCloud Director REST API base URL, and replaces {resourceId} the UUID portion of the resource id. Must be <=1024 characters.",
                "type": "string"
              },
              "nid": {
                "nullable": true,
                "readOnly": true,
                "description": "The Namespace Identifier for resources of this type, as specified in RFC2141. Must be <=255 characters.",
                "type": "string"
              },
              "urnPattern": {
                "nullable": true,
                "readOnly": true,
                "description": "The Namespace Specific String for resources of this type, as specified in RFC2141. Can be a string or a named regular expression, where (?<id\\>) matches the resource identifier. Must be <=255 characters.",
                "type": "string"
              },
              "serviceResources": {
                "nullable": true,
                "description": "Container for values used to create service resources defined by this extension service.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ServiceResourcesType"
                  }
                ]
              },
              "resourceClassActions": {
                "nullable": true,
                "description": "Container for values used to create resource class actions defined for this resource class.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceClassActionsType"
                  }
                ]
              }
            },
            "required": [
              "mimeType",
              "urlTemplate",
              "nid",
              "urnPattern",
              "serviceResources",
              "resourceClassActions"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ServiceResourceType": {
        "title": "ServiceResourceType",
        "description": "Represents an instance of resource class defined by an extension service.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:EntityType"
          },
          {
            "type": "object",
            "properties": {
              "org": {
                "nullable": true,
                "readOnly": true,
                "description": "Organization that this extension service resource belongs to.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vcloud:ReferenceType"
                  }
                ]
              },
              "externalObjectId": {
                "nullable": true,
                "readOnly": true,
                "description": "Object identifier for this extension service resource. Must be <=255 characters.",
                "type": "string"
              }
            },
            "required": [
              "org",
              "externalObjectId"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ResourceClassesType": {
        "title": "ResourceClassesType",
        "description": "A list of resource classes defined by an extension service.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "resourceClass": {
                "readOnly": true,
                "description": "Represents a resource class defined by an extension service.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceClassType"
                }
              }
            },
            "required": [
              "resourceClass"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ServiceResourcesType": {
        "title": "ServiceResourcesType",
        "description": "A list of extension service resources.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "serviceResource": {
                "description": "Represents an extension service resource.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ServiceResourceType"
                }
              }
            },
            "required": [
              "serviceResource"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ResourceClassActionsType": {
        "title": "ResourceClassActionsType",
        "description": "A list of extension service resource class actions.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "resourceClassAction": {
                "description": "Represents an extension service resource class action.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceClassActionType"
                }
              }
            },
            "required": [
              "resourceClassAction"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AclRulesType": {
        "title": "AclRulesType",
        "description": "A list of extension service resource class action ACL rules.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "aclRule": {
                "description": "Represents an extension service resource class action ACL rule.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AclRuleType"
                }
              }
            },
            "required": [
              "aclRule"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AuthorizationCheckParamsType": {
        "title": "AuthorizationCheckParamsType",
        "description": "Parameters for an authorization check request.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "user": {
                "nullable": true,
                "readOnly": true,
                "description": "The user for which an authorization check is requested.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vcloud:ReferenceType"
                  }
                ]
              },
              "httpMethod": {
                "nullable": true,
                "readOnly": true,
                "description": "One of: GET, PUT, POST, DELETE",
                "type": "string"
              },
              "uRL": {
                "nullable": true,
                "readOnly": true,
                "description": "The relative URL which is to be checked. Examples: /backup/restore, /backup/restore/{id}, /api/admin/org/{id}.",
                "type": "string"
              }
            },
            "required": [
              "user",
              "httpMethod",
              "uRL"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AuthorizationCheckResponseType": {
        "title": "AuthorizationCheckResponseType",
        "description": "Response to an authorization check request.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "isAuthorized": {
                "nullable": true,
                "readOnly": true,
                "description": "True if the referenced user is authorized to make the specified HTTP request to the specified URL.",
                "type": "boolean"
              }
            },
            "required": [
              "isAuthorized"
            ],
            "additionalProperties": false
          }
        ]
      },
      "SystemSettingsType": {
        "title": "SystemSettingsType",
        "description": "Represents system\\-level settings.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "generalSettings": {
                "nullable": true,
                "description": "General settings.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GeneralSettingsType"
                  }
                ]
              },
              "notificationsSettings": {
                "nullable": true,
                "description": "Notifications settings.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotificationsSettingsType"
                  }
                ]
              },
              "ldapSettings": {
                "nullable": true,
                "description": "LDAP settings.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LdapSettingsType"
                  }
                ]
              },
              "amqpSettings": {
                "nullable": true,
                "description": "AMQP settings.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AmqpSettingsType"
                  }
                ]
              },
              "emailSettings": {
                "nullable": true,
                "description": "Email settings.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EmailSettingsType"
                  }
                ]
              },
              "license": {
                "nullable": true,
                "description": "Settings for retrieving and updating vCloud Director license information.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LicenseType"
                  }
                ]
              },
              "brandingSettings": {
                "nullable": true,
                "description": "BrandingSettings stores all information about how to brand the product for vCloud service, like provider name, logo etc.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BrandingSettingsType"
                  }
                ]
              },
              "blockingTaskSettings": {
                "nullable": true,
                "description": "Blocking task settings.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BlockingTaskSettingsType"
                  }
                ]
              },
              "passwordPolicySettings": {
                "nullable": true,
                "description": "Password policy settings for the cloud provider administrator. These are also inherited by organizations, unless overridden at the organization level.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SystemPasswordPolicySettingsType"
                  }
                ]
              },
              "kerberosSettings": {
                "nullable": true,
                "description": "Kerberos settings.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/KerberosSettingsType"
                  }
                ]
              },
              "lookupServiceSettings": {
                "nullable": true,
                "description": "vSphere lookup service settings.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LookupServiceSettingsType"
                  }
                ]
              },
              "catalogSettings": {
                "nullable": true,
                "description": "Catalog settings.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CatalogSettingsType"
                  }
                ]
              },
              "operationLimitsSettings": {
                "nullable": true,
                "description": "Global Tenant Throttling limits",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OperationLimitsSettingsType"
                  }
                ]
              }
            },
            "required": [
              "generalSettings",
              "notificationsSettings",
              "ldapSettings",
              "amqpSettings",
              "emailSettings",
              "license",
              "brandingSettings",
              "blockingTaskSettings",
              "passwordPolicySettings",
              "kerberosSettings",
              "lookupServiceSettings",
              "catalogSettings",
              "operationLimitsSettings"
            ],
            "additionalProperties": false
          }
        ]
      },
      "GeneralSettingsType": {
        "title": "GeneralSettingsType",
        "description": "General system settings.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "absoluteSessionTimeoutMinutes": {
                "description": "Minutes after which a client session times out even when it is active.",
                "type": "integer",
                "format": "int32"
              },
              "activityLogDisplayDays": {
                "description": "Days of logged activities to be displayed to the users.",
                "type": "integer",
                "format": "int32"
              },
              "activityLogKeepDays": {
                "description": "Days of logged activities to keep in the system.",
                "type": "integer",
                "format": "int32"
              },
              "allowOverlappingExtNets": {
                "description": "True to allow creation of multiple external networks on the same LAN segment.",
                "type": "boolean"
              },
              "chargebackEventsKeepDays": {
                "nullable": true,
                "description": "Days for which events are to be kept in Chargeback Tables.",
                "type": "integer",
                "format": "int32"
              },
              "chargebackTablesCleanupJobTimeInSeconds": {
                "nullable": true,
                "description": "Time of the day at which the chargeback tables cleanup job should run.",
                "type": "integer",
                "format": "int32"
              },
              "consoleProxyExternalAddress": {
                "nullable": true,
                "description": "Use this address to access the console proxy from the public side of a firewall or load\\-balancer.  \n Leave empty to clear the address.",
                "type": "string"
              },
              "hostCheckDelayInSeconds": {
                "description": "Interval between host status checks, in seconds.",
                "type": "integer",
                "format": "int32"
              },
              "hostCheckTimeoutSeconds": {
                "description": "Number of seconds to wait for a response from a host before marking it as hung or down.",
                "type": "integer",
                "format": "int32"
              },
              "installationId": {
                "nullable": true,
                "readOnly": true,
                "description": "The vCloud Director installation Id. An integer in the range 0 \\- 63.",
                "type": "integer",
                "format": "int32"
              },
              "ipReservationTimeoutSeconds": {
                "description": "Number of seconds to keep released IP addresses on hold before making them available for allocation again. This is typically set to 2 hours to allow old entries to expire from client ARP tables.",
                "type": "integer",
                "format": "int32"
              },
              "syslogServerSettings": {
                "nullable": true,
                "description": "Default syslog server settings for networks. If logging is configured for firewall rules, the logs will be directed to these syslog servers. If you change these values, you must synchronize the syslog server settings for each vApp network or Edge Gateway in the system by running its syncSyslogServerSettings action.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vcloud:SyslogServerSettingsType"
                  }
                ]
              },
              "loginNameOnly": {
                "nullable": true,
                "deprecated": true,
                "description": "System login policy setting (deprecated).",
                "type": "boolean"
              },
              "prePopDefaultName": {
                "description": "Pre\\-populate default configuration and virtual machine name.",
                "type": "boolean"
              },
              "quarantineEnabled": {
                "description": "True if uploads should be quarantined.",
                "type": "boolean"
              },
              "quarantineResponseTimeoutSeconds": {
                "description": "The length of time, in seconds, before a quarantined transfer is flagged as Timed Out.",
                "type": "integer",
                "format": "int32"
              },
              "restApiBaseHttpUri": {
                "nullable": true,
                "description": "Base REST API URL for HTTP connections from the public side of a firewall, load\\-balancer, or proxy.  \n Leave empty to clear the address.",
                "type": "string"
              },
              "restApiBaseUri": {
                "nullable": true,
                "description": "Base REST API URL for HTTPS connections from the public side of a firewall, load\\-balancer, or proxy.  \n Leave empty to clear the address.",
                "type": "string"
              },
              "restApiBaseUriPublicCertChain": {
                "nullable": true,
                "description": "SSL public certificate chain for the RestApiBaseUri. If you specify an address in RestApiBaseUri, you must place the certificate chain for that address here. The certificate chain must consist of zero or more PEM\\-encoded X.509 certificates.",
                "type": "string"
              },
              "sessionTimeoutMinutes": {
                "description": "Number of minutes to timeout client session.",
                "type": "integer",
                "format": "int32"
              },
              "showStackTraces": {
                "description": "Boolean flag to turn on/off the display of exception stack traces.",
                "type": "boolean"
              },
              "syncStartDate": {
                "description": "Number of minutes to timeout client session.",
                "type": "string",
                "format": "date-time"
              },
              "syncIntervalInHours": {
                "description": "LDAP sync repeats interval time in hours.",
                "type": "integer",
                "format": "int64"
              },
              "systemExternalHttpAddress": {
                "nullable": true,
                "description": "URL for VCD Web Console HTTP connections from the public side of a firewall, load\\-balancer, or proxy.  \n Leave empty to clear the address.",
                "type": "string"
              },
              "systemExternalAddress": {
                "nullable": true,
                "description": "URL for VCD Web Console HTTPS connections from the public side of a firewall, load\\-balancer, or proxy.  \n Leave empty to clear the address.",
                "type": "string"
              },
              "systemExternalAddressPublicCertChain": {
                "nullable": true,
                "description": "SSL public certificate chain for SystemExternalAddress. If you specify an address in SystemExternalAddress, you must place the certificate chain for that address here. The certificate chain must consist of zero or more PEM\\-encoded X.509 certificates.",
                "type": "string"
              },
              "tenantPortalExternalHttpAddress": {
                "nullable": true,
                "description": "URL for TenantPortal HTTP connections from the public side of a firewall, load\\-balancer, or proxy.  \n Leave empty to clear the address.",
                "type": "string"
              },
              "tenantPortalExternalAddress": {
                "nullable": true,
                "description": "URL for TenantPortal HTTPS connections from the public side of a firewall, load\\-balancer, or proxy.  \n Leave empty to clear the address.",
                "type": "string"
              },
              "tenantPortalPublicCertChain": {
                "nullable": true,
                "description": "SSL public certificate chain for TenantPortalExternalAddress. If you specify an address in TenantPortalExternalAddress, you must place the certificate chain for that address here. The certificate chain must consist of zero or more PEM\\-encoded X.509 certificates.",
                "type": "string"
              },
              "transferSessionTimeoutSeconds": {
                "description": "Transfer sessions time out in this number of seconds.",
                "type": "integer",
                "format": "int32"
              },
              "verifyVcCertificates": {
                "description": "Boolean flag to apply a strict trust check to vCenter certificates.",
                "type": "boolean"
              },
              "vcTruststorePassword": {
                "nullable": true,
                "description": "Password for the vCenter truststore, if used. If empty or no password is passed then no update is performed.",
                "type": "string"
              },
              "vcTruststoreContents": {
                "nullable": true,
                "description": "vCenter truststore bytes (if used).",
                "type": "string"
              },
              "vcTruststoreType": {
                "nullable": true,
                "description": "vCenter truststore type (JKS, JCEKS, PKCS12).",
                "type": "string"
              },
              "vmrcVersion": {
                "nullable": true,
                "readOnly": true,
                "description": "VMRC version.",
                "type": "string"
              },
              "verifyVsmCertificates": {
                "nullable": true,
                "description": "Boolean flag to apply a strict trust check to vShield Manager certificates.",
                "type": "boolean"
              },
              "elasticAllocationPool": {
                "nullable": true,
                "description": "Controls elasticity in Organization VDCs whose AllocationModel is AllocationPool. When set to true, Organization VDCs with this model can use resource pools from all clusters available to the backing Provider VDC. When set to false, these Organization VDCs are restricted to a single resource pool. By default, this flag is set to false restricting AllocationPool Organization VDCs to a single resource pool.",
                "type": "boolean"
              },
              "advancedNetworkingEnabled": {
                "nullable": true,
                "description": "True if Advanced Networking has been enabled for this system.",
                "type": "boolean"
              },
              "advancedNetworkingDfwApiUrl": {
                "nullable": true,
                "description": "REST API URL for Advanced Networking distributed firewall.",
                "type": "string"
              },
              "advancedNetworkingDfwUiUrl": {
                "nullable": true,
                "description": "Web interface URL for Advanced Networking distributed firewall.",
                "type": "string"
              },
              "advancedNetworkingGatewayApiUrl": {
                "nullable": true,
                "description": "REST API URL for Advanced Networking Edge Gateway.",
                "type": "string"
              },
              "advancedNetworkingGatewayUiUrl": {
                "nullable": true,
                "description": "Web interface URL for Advanced Networking Edge Gateway.",
                "type": "string"
              },
              "maxVdcQuota": {
                "nullable": true,
                "description": "Maximum number of VDCs allowed in this organization. A value of \\-1 means there is no maximum. A value of 0 means this organization cannot create any VDCs. This value is used to initialize VdcQuota in the OrgGeneralSettings of a new organization.",
                "type": "integer",
                "format": "int32"
              },
              "subInterfacesEnabled": {
                "nullable": true,
                "description": "A value of true enables use of subinterfaces when creating organization VDC networks in this organization.",
                "type": "boolean"
              },
              "vmDiscoveryEnabled": {
                "nullable": true,
                "description": "True if discovery of vCenter VMs is enabled for this installation.",
                "type": "boolean"
              },
              "allowFipsModeForEdgeGateways": {
                "nullable": true,
                "description": "True if it is ok to enable FIPS mode on edge gateways",
                "type": "boolean"
              }
            },
            "required": [
              "absoluteSessionTimeoutMinutes",
              "activityLogDisplayDays",
              "activityLogKeepDays",
              "allowOverlappingExtNets",
              "chargebackEventsKeepDays",
              "chargebackTablesCleanupJobTimeInSeconds",
              "consoleProxyExternalAddress",
              "hostCheckDelayInSeconds",
              "hostCheckTimeoutSeconds",
              "installationId",
              "ipReservationTimeoutSeconds",
              "syslogServerSettings",
              "loginNameOnly",
              "prePopDefaultName",
              "quarantineEnabled",
              "quarantineResponseTimeoutSeconds",
              "restApiBaseHttpUri",
              "restApiBaseUri",
              "restApiBaseUriPublicCertChain",
              "sessionTimeoutMinutes",
              "showStackTraces",
              "syncStartDate",
              "syncIntervalInHours",
              "systemExternalHttpAddress",
              "systemExternalAddress",
              "systemExternalAddressPublicCertChain",
              "tenantPortalExternalHttpAddress",
              "tenantPortalExternalAddress",
              "tenantPortalPublicCertChain",
              "transferSessionTimeoutSeconds",
              "verifyVcCertificates",
              "vcTruststorePassword",
              "vcTruststoreContents",
              "vcTruststoreType",
              "vmrcVersion",
              "verifyVsmCertificates",
              "elasticAllocationPool",
              "advancedNetworkingEnabled",
              "advancedNetworkingDfwApiUrl",
              "advancedNetworkingDfwUiUrl",
              "advancedNetworkingGatewayApiUrl",
              "advancedNetworkingGatewayUiUrl",
              "maxVdcQuota",
              "subInterfacesEnabled",
              "vmDiscoveryEnabled",
              "allowFipsModeForEdgeGateways"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AmqpSettingsType": {
        "title": "AmqpSettingsType",
        "description": "Represents the settings for the AMQP broker.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "amqpHost": {
                "description": "Hostname of the AMQP broker.",
                "type": "string"
              },
              "amqpPort": {
                "description": "Port of the AMQP broker.",
                "type": "integer",
                "format": "int32"
              },
              "amqpUsername": {
                "description": "Username for the AMQP broker.",
                "type": "string"
              },
              "amqpPassword": {
                "nullable": true,
                "description": "Password for the AMQP broker.",
                "type": "string"
              },
              "amqpExchange": {
                "description": "AMQP exchange for publishing.",
                "type": "string"
              },
              "amqpVHost": {
                "description": "Virtual host for the AMQP broker.",
                "type": "string"
              },
              "amqpUseSSL": {
                "description": "Use SSL for communication with the AMQP broker.",
                "type": "boolean"
              },
              "amqpSslAcceptAll": {
                "nullable": true,
                "description": "Accept all SSL certificates. Must be set to true in case of SSL enabled.",
                "type": "boolean"
              },
              "amqpPrefix": {
                "nullable": true,
                "description": "AMQP vcloud instance prefix.",
                "type": "string"
              }
            },
            "required": [
              "amqpHost",
              "amqpPort",
              "amqpUsername",
              "amqpPassword",
              "amqpExchange",
              "amqpVHost",
              "amqpUseSSL",
              "amqpSslAcceptAll",
              "amqpPrefix"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AmqpSettingsTestType": {
        "title": "AmqpSettingsTestType",
        "description": "Represents the result from AMQP settings test.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "valid": {
                "description": "Result from AMQP settings test. True, if settings are valid.",
                "type": "boolean"
              },
              "error": {
                "nullable": true,
                "readOnly": true,
                "description": "The error of an invalid AMQP settings test.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vcloud:ErrorType"
                  }
                ]
              }
            },
            "required": [
              "valid",
              "error"
            ],
            "additionalProperties": false
          }
        ]
      },
      "NotificationsSettingsType": {
        "title": "NotificationsSettingsType",
        "description": "Represents the settings related to Notifications.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "enableNotifications": {
                "description": "Boolean flag to turn on/off notification messages.",
                "type": "boolean"
              }
            },
            "required": [
              "enableNotifications"
            ],
            "additionalProperties": false
          }
        ]
      },
      "BlockingTaskSettingsType": {
        "title": "BlockingTaskSettingsType",
        "description": "Represents the settings related to blocking tasks.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "timeoutAction": {
                "description": "Action to be taken by the automatic timeout policy processing when it gets triggered due to timeout. One of: resume (The task will be resumed.), abort (The task will be aborted. Transient objects are cleaned up. Task status is set to ABORTED.), fail (The task will be failed. Transient object status and task status are set to ERROR.)",
                "type": "string"
              },
              "blockingTaskOperations": {
                "description": "Task operations which are enabled for blocking. If this element is empty or not supplied no operations will block.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vcloud:TaskOperationListType"
                  }
                ]
              }
            },
            "required": [
              "timeoutAction",
              "blockingTaskOperations"
            ],
            "additionalProperties": false
          }
        ]
      },
      "SystemPasswordPolicySettingsType": {
        "title": "SystemPasswordPolicySettingsType",
        "description": "Represents the settings related to Password Policy.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "accountLockoutEnabled": {
                "description": "Boolean flag to turn on/off the account lockout feature.",
                "type": "boolean"
              },
              "adminAccountLockoutEnabled": {
                "description": "Boolean flag to indicate whether system administrator accounts can lockout.",
                "type": "boolean"
              },
              "invalidLoginsBeforeLockout": {
                "description": "Number of invalid login attempts that will trigger account lockout.",
                "type": "integer",
                "format": "int32"
              }
            },
            "required": [
              "accountLockoutEnabled",
              "adminAccountLockoutEnabled",
              "invalidLoginsBeforeLockout"
            ],
            "additionalProperties": false
          }
        ]
      },
      "LdapSettingsType": {
        "title": "LdapSettingsType",
        "description": "Defines the hostname and connection details for system LDAP service.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "hostName": {
                "nullable": true,
                "description": "Hostname of the LDAP server.",
                "type": "string"
              },
              "port": {
                "description": "Port at which to connect to the LDAP service.",
                "type": "integer",
                "format": "int32"
              },
              "isSsl": {
                "description": "True if the LDAP service requires an SSL connection.",
                "type": "boolean"
              },
              "isSslAcceptAll": {
                "description": "True if the LDAP service accepts all SSL certificates.",
                "type": "boolean"
              },
              "realm": {
                "nullable": true,
                "description": "LDAP realm to use when looking up users.",
                "type": "string"
              },
              "pagedSearchDisabled": {
                "description": "True if paged search is disabled.",
                "type": "boolean"
              },
              "pageSize": {
                "nullable": true,
                "description": "Size of the page.",
                "type": "integer",
                "format": "int32"
              },
              "maxResults": {
                "nullable": true,
                "description": "Maximum results returned.",
                "type": "integer",
                "format": "int32"
              },
              "maxUserGroups": {
                "nullable": true,
                "description": "Maximum results returned for user groups.",
                "type": "integer",
                "format": "int32"
              },
              "searchBase": {
                "nullable": true,
                "description": "LDAP search base.",
                "type": "string"
              },
              "userName": {
                "nullable": true,
                "description": "Username to use when logging in to LDAP, specified using LDAP attribute=value pairs (for example: cn=\"ldap\\-admin\", c=\"example\", dc=\"com\").",
                "type": "string"
              },
              "password": {
                "nullable": true,
                "description": "Password for the user identified by UserName. This value is never returned by GET. It is inspected on create and modify. On modify, the absence of this element indicates that the password should not be changed.",
                "type": "string"
              },
              "authenticationMechanism": {
                "description": "Defines the authentication mechanism used by the LDAP service.",
                "type": "string"
              },
              "groupSearchBase": {
                "nullable": true,
                "description": "LDAP group search base.",
                "type": "string"
              },
              "isGroupSearchBaseEnabled": {
                "description": "True if the group search base is enabled.",
                "type": "boolean"
              },
              "connectorType": {
                "description": "Defines the type of the LDAP service.",
                "type": "string"
              },
              "userAttributes": {
                "description": "Defines how LDAP attributes are used when importing a user.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LdapUserAttributesType"
                  }
                ]
              },
              "groupAttributes": {
                "description": "Defines how LDAP attributes are used when importing a group.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LdapGroupAttributesType"
                  }
                ]
              },
              "useExternalKerberos": {
                "description": "Set to true to use an external Kerberos service.",
                "type": "boolean"
              }
            },
            "required": [
              "hostName",
              "port",
              "isSsl",
              "isSslAcceptAll",
              "realm",
              "pagedSearchDisabled",
              "pageSize",
              "maxResults",
              "maxUserGroups",
              "searchBase",
              "userName",
              "password",
              "authenticationMechanism",
              "groupSearchBase",
              "isGroupSearchBaseEnabled",
              "connectorType",
              "userAttributes",
              "groupAttributes",
              "useExternalKerberos"
            ],
            "additionalProperties": false
          }
        ]
      },
      "LdapGroupAttributesType": {
        "title": "LdapGroupAttributesType",
        "description": "Defines how a group is imported from LDAP.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "objectClass": {
                "description": "LDAP objectClass of which imported groups are members. For example, group.",
                "type": "string"
              },
              "objectIdentifier": {
                "description": "LDAP attribute to use as the unique identifier for a group. For example, objectGuid.",
                "type": "string"
              },
              "groupName": {
                "description": "LDAP attribute to use for the group name. For example, cn.",
                "type": "string"
              },
              "membership": {
                "description": "LDAP attribute to use when getting the members of a group. For example, member.",
                "type": "string"
              },
              "membershipIdentifier": {
                "description": "LDAP attribute that identifies a group as a member of another group. For example, dn.",
                "type": "string"
              },
              "backLinkIdentifier": {
                "nullable": true,
                "readOnly": true,
                "description": "LDAP group attribute used to identify a group member.",
                "type": "string"
              }
            },
            "required": [
              "objectClass",
              "objectIdentifier",
              "groupName",
              "membership",
              "membershipIdentifier",
              "backLinkIdentifier"
            ],
            "additionalProperties": false
          }
        ]
      },
      "LdapUserAttributesType": {
        "title": "LdapUserAttributesType",
        "description": "Defines how LDAP attributes are used when importing a user.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "objectClass": {
                "description": "LDAP objectClass of which imported users are members. For example, user or person",
                "type": "string"
              },
              "objectIdentifier": {
                "description": "LDAP attribute to use as the unique identifier for a user. For example, objectGuid.",
                "type": "string"
              },
              "userName": {
                "description": "LDAP attribute to use when looking up a user name to import. For example, userPrincipalName or samAccountName.",
                "type": "string"
              },
              "email": {
                "description": "LDAP attribute to use for the user's email address. For example mail.",
                "type": "string"
              },
              "fullName": {
                "description": "LDAP attribute to use for the user's full name. For example displayName.",
                "type": "string"
              },
              "givenName": {
                "description": "LDAP attribute to use for the user's given name. For example, givenName.",
                "type": "string"
              },
              "surname": {
                "description": "LDAP attribute to use for the user's surname. For example sn.",
                "type": "string"
              },
              "telephone": {
                "description": "LDAP attribute to use for the user's telephone number. For example telephoneNumber.",
                "type": "string"
              },
              "groupMembershipIdentifier": {
                "description": "LDAP attribute that identifies a user as a member of a group. For example, dn.",
                "type": "string"
              },
              "groupBackLinkIdentifier": {
                "nullable": true,
                "description": "LDAP attribute that returns the identifiers of all the groups of which the user is a member.",
                "type": "string"
              }
            },
            "required": [
              "objectClass",
              "objectIdentifier",
              "userName",
              "email",
              "fullName",
              "givenName",
              "surname",
              "telephone",
              "groupMembershipIdentifier",
              "groupBackLinkIdentifier"
            ],
            "additionalProperties": false
          }
        ]
      },
      "BrandingSettingsType": {
        "title": "BrandingSettingsType",
        "description": "Information used to customize the vCloud Director Web console. Include provider\\-specific text and values.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "companyName": {
                "description": "Text to display in the vCloud Director Web console header and footer.",
                "type": "string"
              },
              "loginPageCustomizationTheme": {
                "nullable": true,
                "description": "Allows setting a login page custom theme. See the online help for more information.",
                "type": "string"
              },
              "theme": {
                "nullable": true,
                "description": "Deprecated. Use PreviewCustomTheme and FinalCustomTheme instead.",
                "type": "string"
              },
              "previewCustomTheme": {
                "nullable": true,
                "description": "Allows setting a custom theme. See the online help for more information.",
                "type": "string"
              },
              "finalCustomTheme": {
                "nullable": true,
                "description": "The online help provides information on how you can customize the vCloud Director Web console theme.",
                "type": "string"
              },
              "aboutCompanyUrl": {
                "nullable": true,
                "description": "A URL to a site that provides additional information about your company.",
                "type": "string"
              },
              "supportUrl": {
                "nullable": true,
                "description": "A URL to a site that provides support information from your company. This URL will be used for the Support link in the the vCloud Director Web console Help menu.",
                "type": "string"
              },
              "signUpUrl": {
                "nullable": true,
                "description": "A URL to a site that allows a user to sign up for vCloud Director services provided by your company. This URL will be used for the Sign Up link on the vCloud Director Web console Login page.",
                "type": "string"
              },
              "forgotUserNameOrPasswordURL": {
                "nullable": true,
                "description": "A URL to a site that allows a user of your company's vCloud Director service to recover a forgotten user name or password. This URL will be used for the Forgot Password link on the vCloud Director Web console Login page.",
                "type": "string"
              }
            },
            "required": [
              "companyName",
              "loginPageCustomizationTheme",
              "theme",
              "previewCustomTheme",
              "finalCustomTheme",
              "aboutCompanyUrl",
              "supportUrl",
              "signUpUrl",
              "forgotUserNameOrPasswordURL"
            ],
            "additionalProperties": false
          }
        ]
      },
      "LicenseType": {
        "title": "LicenseType",
        "description": "This is used by the API to update and retrieve site license specific information.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "serialNumber": {
                "nullable": true,
                "description": "The site wide serial number string.",
                "type": "string"
              },
              "licensedVMCount": {
                "nullable": true,
                "readOnly": true,
                "description": "The number of VMs this product is licensed for.",
                "type": "integer",
                "format": "int32"
              },
              "expirationDate": {
                "nullable": true,
                "readOnly": true,
                "description": "The expiration date for this serial number. This is a read only field. for the API client. The license manager will set this field appropriately.",
                "type": "string",
                "format": "date-time"
              },
              "validSerial": {
                "nullable": true,
                "readOnly": true,
                "description": "Flag indicating whether the provided serial is valid. This is a read only field for the API client. The license manager will set this flag appropriately.",
                "type": "boolean"
              },
              "expired": {
                "nullable": true,
                "readOnly": true,
                "description": "Flag indicating whether the provided serial number has expired. This is a read\\-only field for the API. The license manager will set this flag appropriately.",
                "type": "boolean"
              },
              "persisted": {
                "nullable": true,
                "readOnly": true,
                "description": "Flag indicating whether this license element is persisted. Note that starting with vCloud 5.5 attempting to set an expired license key while the system is federated with component\\-manager will not persist the key in the CIS Licensing sub system. Otherwise, for compatibility reason, if the key is expired and the system is not federated with component manager then this key gets persisted in the vCloud local licensing system.",
                "type": "boolean"
              },
              "publishingToRemoteSitesFeature": {
                "nullable": true,
                "readOnly": true,
                "description": "Flag indicating whether the provided serial number has feature 'publishing\\-to\\-remote\\-sites'. This is a read\\-only field for the API. The license manager will set this flag appropriately.",
                "type": "boolean"
              },
              "subscribingToRemoteSitesFeature": {
                "nullable": true,
                "readOnly": true,
                "description": "Flag indicating whether the provided serial number has feature 'subscribing\\-to\\-remote\\-sites'. This is a read\\-only field for the API. The license manager will set this flag appropriately.",
                "type": "boolean"
              },
              "licenseMetricsInfo": {
                "nullable": true,
                "description": "Report of License usage metrics.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LicenseMetricsInfoType"
                  }
                ]
              }
            },
            "required": [
              "serialNumber",
              "licensedVMCount",
              "expirationDate",
              "validSerial",
              "expired",
              "persisted",
              "publishingToRemoteSitesFeature",
              "subscribingToRemoteSitesFeature",
              "licenseMetricsInfo"
            ],
            "additionalProperties": false
          }
        ]
      },
      "LicenseMetricsInfoType": {
        "title": "LicenseMetricsInfoType",
        "description": "Report of License usage metrics.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "vRAM": {
                "nullable": true,
                "readOnly": true,
                "description": "Virtual memory allocation.",
                "type": "integer",
                "format": "int64"
              },
              "vCPU": {
                "nullable": true,
                "readOnly": true,
                "description": "Number of virtual processors used.",
                "type": "integer",
                "format": "int64"
              },
              "runningVMs": {
                "nullable": true,
                "readOnly": true,
                "description": "Number of VMs.",
                "type": "integer",
                "format": "int64"
              },
              "physicalMemoryUsed": {
                "nullable": true,
                "readOnly": true,
                "description": "Physical memory used during the observation period.",
                "type": "integer",
                "format": "int64"
              },
              "physicalSocketCount": {
                "nullable": true,
                "readOnly": true,
                "description": "Network sockets use count.",
                "type": "integer",
                "format": "int32"
              },
              "availablePhysicalMemory": {
                "nullable": true,
                "readOnly": true,
                "description": "Total physical memory used during the observation period.",
                "type": "integer",
                "format": "int64"
              },
              "lastUpdate": {
                "nullable": true,
                "readOnly": true,
                "description": "Date that the report was collected.",
                "type": "string",
                "format": "date-time"
              },
              "publishingToRemoteSites": {
                "nullable": true,
                "readOnly": true,
                "description": "Whether the content\\-catalog feature to publish to external sites is used.",
                "type": "boolean"
              },
              "subscribingToRemoteSites": {
                "nullable": true,
                "readOnly": true,
                "description": "Whether the content\\-catalog feature to subscribe to external sites is used.",
                "type": "boolean"
              }
            },
            "required": [
              "vRAM",
              "vCPU",
              "runningVMs",
              "physicalMemoryUsed",
              "physicalSocketCount",
              "availablePhysicalMemory",
              "lastUpdate",
              "publishingToRemoteSites",
              "subscribingToRemoteSites"
            ],
            "additionalProperties": false
          }
        ]
      },
      "EmailSettingsType": {
        "title": "EmailSettingsType",
        "description": "Represents system email settings.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "senderEmailAddress": {
                "nullable": true,
                "description": "Sender email address in an email notification or alert.",
                "type": "string"
              },
              "emailSubjectPrefix": {
                "nullable": true,
                "description": "The prefix used in the email subject line for all email notifications and alerts from the system.",
                "type": "string"
              },
              "alertEmailToAllAdmins": {
                "description": "True if alert emails should be sent to to all system administrators.",
                "type": "boolean"
              },
              "alertEmailTo": {
                "nullable": true,
                "description": "A comma\\-separated list of email addresses to send alert messages to.",
                "type": "string"
              },
              "smtpSettings": {
                "description": "The SMTP server for email notifications and alerts.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SmtpSettingsType"
                  }
                ]
              }
            },
            "required": [
              "senderEmailAddress",
              "emailSubjectPrefix",
              "alertEmailToAllAdmins",
              "alertEmailTo",
              "smtpSettings"
            ],
            "additionalProperties": false
          }
        ]
      },
      "SmtpSettingsType": {
        "title": "SmtpSettingsType",
        "description": "The SMTP server for email notifications and alerts.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "useAuthentication": {
                "description": "A flag to indicate if the SMTP requires login authentication. If this flag is set to true, caller must provide user name and password.",
                "type": "boolean"
              },
              "smtpServerName": {
                "nullable": true,
                "description": "SMTP server hostname.",
                "type": "string"
              },
              "smtpServerPort": {
                "nullable": true,
                "description": "SMTP server port.",
                "type": "integer",
                "format": "int32"
              },
              "ssl": {
                "nullable": true,
                "deprecated": true,
                "description": "True if the SMTP server requires an SSL connection.",
                "type": "boolean"
              },
              "smtpSecureMode": {
                "nullable": true,
                "description": "Security protocol to use when connecting to the SMTP server. One of:  \n startTls \\-\\- Use the STARTTLS protocol  \n ssl \\-\\- \\-Use the SSL/TLS protocol  \n none \\-\\- Do not use any security protocol",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vcloud:SmtpSecureModeType"
                  }
                ]
              },
              "sslTrustStore": {
                "nullable": true,
                "description": "Custom truststore to use to trust peer certificates when establishing a secure connection using SSL/STARTTLS (when enabled).",
                "type": "string"
              },
              "userName": {
                "nullable": true,
                "description": "SMTP admin user name. 128 characters or less.",
                "type": "string"
              },
              "password": {
                "nullable": true,
                "description": "SMTP admin password. 128 characters or less.",
                "type": "string"
              }
            },
            "required": [
              "useAuthentication",
              "smtpServerName",
              "smtpServerPort",
              "ssl",
              "smtpSecureMode",
              "sslTrustStore",
              "userName",
              "password"
            ],
            "additionalProperties": false
          }
        ]
      },
      "KerberosSettingsType": {
        "title": "KerberosSettingsType",
        "description": "Global Kerberos settings.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "allowLowerCaseRealms": {
                "description": "A value of true allows the use of lower\\-case characters in realm names.",
                "type": "boolean"
              },
              "realm": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RealmType"
                }
              }
            },
            "required": [
              "allowLowerCaseRealms",
              "realm"
            ],
            "additionalProperties": false
          }
        ]
      },
      "RealmType": {
        "title": "RealmType",
        "description": "Kerberos realm information.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "kdc": {
                "description": "The KDC for the current realm.",
                "type": "string"
              },
              "name": {
                "description": "The name of the realm. Must be all upper\\-case characters unless AllowLowerCaseRealms is true.",
                "type": "string"
              },
              "domain": {
                "description": "The list of all DNS suffixes associated with the realm.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "kdc",
              "name",
              "domain"
            ],
            "additionalProperties": false
          }
        ]
      },
      "LookupServiceSettingsType": {
        "title": "LookupServiceSettingsType",
        "description": "Information that allows vCloud Director to connect to a vSphere lookup service.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "lookupServiceUrl": {
                "nullable": true,
                "description": "The URL of the vSphere Lookup Service. If empty or missing on PUT, any registered lookup service is unregistered.",
                "type": "string"
              }
            },
            "required": [
              "lookupServiceUrl"
            ],
            "additionalProperties": false
          }
        ]
      },
      "LookupServiceParamsType": {
        "title": "LookupServiceParamsType",
        "description": "Parameters for a register or unregister Lookup Service request. If LookupServiceUrl is present and not empty, the request registers a lookup service. If LookupServiceUrl is missing or empty, the request unregisters a lookup service.",
        "allOf": [
          {
            "$ref": "#/components/schemas/LookupServiceSettingsType"
          },
          {
            "type": "object",
            "properties": {
              "userName": {
                "description": "The vSphere SSO service user name of a user who has administrative privileges.",
                "type": "string"
              },
              "password": {
                "description": "The vSphere SSO service password for the user named in userName.",
                "type": "string"
              },
              "vCDUrl": {
                "nullable": true,
                "deprecated": true,
                "description": "The vCloud Director public login URL. This element is deprecated and should be left empty when using API version 5.6 and later, which obtain this address from SystemSettings:GeneralSettings:SystemExternalAddress.",
                "type": "string"
              }
            },
            "required": [
              "userName",
              "password",
              "vCDUrl"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VcTrustStoreUpdateParamsType": {
        "title": "VcTrustStoreUpdateParamsType",
        "description": "Parameters for updating the vCenter truststore.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:FileUploadParamsType"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "description": "Type of the trust store. One of:  \n JKS  \n JCEKS  \n PKCS12",
                "type": "string"
              },
              "password": {
                "description": "Password for the vCenter trust store.",
                "type": "string"
              }
            },
            "required": [
              "type",
              "password"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VcTrustStoreUploadSocketType": {
        "title": "VcTrustStoreUploadSocketType",
        "description": "Upload socket for vCenter trust store.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:FileUploadSocketType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "CatalogSettingsType": {
        "title": "CatalogSettingsType",
        "description": "Catalog settings for this cloud",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "isSyncEnabled": {
                "description": "True to enable the synchronization of external catalogs.",
                "type": "boolean"
              },
              "syncStartDate": {
                "nullable": true,
                "description": "Date and Time at which the synchronization will start.",
                "type": "string",
                "format": "date-time"
              },
              "syncStopDate": {
                "nullable": true,
                "description": "Date and Time at which the synchronization will stop.",
                "type": "string",
                "format": "date-time"
              },
              "refreshInterval": {
                "nullable": true,
                "description": "Number of hours between attempts to synchronize with external catalogs. Default is 24 hours.",
                "type": "integer",
                "format": "int64"
              }
            },
            "required": [
              "isSyncEnabled",
              "syncStartDate",
              "syncStopDate",
              "refreshInterval"
            ],
            "additionalProperties": false
          }
        ]
      },
      "OperationLimitsSettingsType": {
        "title": "OperationLimitsSettingsType",
        "description": "Specifies default operation limits settings for all organizations in the system. An operation is defined as resource\\-intensive if it returns a Task object. The default value for all operation limits settings is 0, which specifies no limit",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "runningPerUser": {
                "nullable": true,
                "description": "Maximum number of resource\\-intensive operations requested by a user in any organization that can be simultaneously eligible to run when an orgnization specific limit is not set. When a user makes a request that causes this limit to exceed; the requested operation is queued but remains ineligible to run until enough of the user's eligible requests have been run.",
                "type": "integer",
                "format": "int32"
              },
              "runningPerOrg": {
                "nullable": true,
                "description": "Maximum number of resource\\-intensive operations owned by any organization that can be simultaneously eligible to run when an orgnization specific limit is not set. When an organization member makes a request that causes this limit to exceed, the requested operation is queued but remains ineligible to run until enough of the organization's eligible requests have been run.",
                "type": "integer",
                "format": "int32"
              },
              "queuedOperationsPerUser": {
                "nullable": true,
                "description": "Maximum number of resource\\-intensive operations that a user in any organization can queue when an orgnization specific limit is not set. When a user makes a request that causes this limit to exceed, the request fails and returns HTTP status 400.",
                "type": "integer",
                "format": "int32"
              },
              "queuedOperationsPerOrg": {
                "nullable": true,
                "description": "Maximum number of queued resource\\-intensive operations allowed for users in any organization when an orgnization specific limit is not set. When an organization member makes a request that causes this limit to exceed, the request fails and returns HTTP status 400.",
                "type": "integer",
                "format": "int32"
              }
            },
            "required": [
              "runningPerUser",
              "runningPerOrg",
              "queuedOperationsPerUser",
              "queuedOperationsPerOrg"
            ],
            "additionalProperties": false
          }
        ]
      },
      "BlockingTaskType": {
        "title": "BlockingTaskType",
        "description": "Describes a blocking task request. Contains references to objects involved in the task.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:TaskRequestBaseType"
          },
          {
            "type": "object",
            "properties": {
              "status": {
                "readOnly": true,
                "description": "Status of the blocking task.",
                "type": "string"
              }
            },
            "required": [
              "status"
            ],
            "additionalProperties": false
          }
        ]
      },
      "BlockingTaskOperationParamsType": {
        "title": "BlockingTaskOperationParamsType",
        "description": "Parameters to POST with a blocking task action.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "message": {
                "description": "Message that will be associated with the action.",
                "type": "string"
              }
            },
            "required": [
              "message"
            ],
            "additionalProperties": false
          }
        ]
      },
      "BlockingTaskUpdateProgressParamsType": {
        "title": "BlockingTaskUpdateProgressParamsType",
        "description": "Parameters to update a blocking task with a new timeout.",
        "allOf": [
          {
            "$ref": "#/components/schemas/BlockingTaskOperationParamsType"
          },
          {
            "type": "object",
            "properties": {
              "timeoutValueInMilliseconds": {
                "nullable": true,
                "description": "The new timeout in milliseconds that will serve as an offset value to the current time. If this value is absent the timeout date for the blocking task will not be changed.",
                "type": "integer",
                "format": "int64"
              }
            },
            "required": [
              "timeoutValueInMilliseconds"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VMWExtensionType": {
        "title": "VMWExtensionType",
        "description": "List links to extension operations and entities.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ResourcePoolType": {
        "title": "ResourcePoolType",
        "description": "vSphere resource pool information.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:EntityType"
          },
          {
            "type": "object",
            "properties": {
              "moRef": {
                "readOnly": true,
                "description": "The vSphere managed object reference of the resource pool.",
                "type": "string"
              },
              "vimObjectType": {
                "readOnly": true,
                "description": "The vCenter server that provides the resources in this pool.",
                "type": "string"
              },
              "dataStoreRefs": {
                "nullable": true,
                "readOnly": true,
                "description": "vSphere datastores accessible from this resource pool.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VimObjectRefsType"
                  }
                ]
              }
            },
            "required": [
              "moRef",
              "vimObjectType",
              "dataStoreRefs"
            ],
            "additionalProperties": false
          }
        ]
      },
      "PrepareHostParamsType": {
        "title": "PrepareHostParamsType",
        "description": "Parameters for preparing an ESX/ESXi host.",
        "type": "object",
        "properties": {
          "username": {
            "description": "The user name to use for host preparation login.",
            "type": "string"
          },
          "password": {
            "description": "The cleartext password to use for host preparation login.",
            "type": "string"
          }
        },
        "required": [
          "username",
          "password"
        ],
        "additionalProperties": false
      },
      "ServerType": {
        "title": "ServerType",
        "description": "Information needed to connect to a vSphere or a vShield manager server.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:EntityType"
          },
          {
            "type": "object",
            "properties": {
              "username": {
                "description": "User name to connect to the server.",
                "type": "string"
              },
              "password": {
                "nullable": true,
                "description": "Cleartext password to connect to the server.",
                "type": "string"
              },
              "url": {
                "description": "URL of the server.",
                "type": "string",
                "format": "uri"
              }
            },
            "required": [
              "username",
              "password",
              "url"
            ],
            "additionalProperties": false
          }
        ]
      },
      "RegisterVimServerParamsType": {
        "title": "RegisterVimServerParamsType",
        "description": "Represents parameters to register a vCenter server.",
        "type": "object",
        "properties": {
          "vimServer": {
            "description": "vCenter administrator credentials. Required for register, modify.",
            "allOf": [
              {
                "$ref": "#/components/schemas/VimServerType"
              }
            ]
          },
          "shieldManager": {
            "description": "vShield manager administrator credentials. Required for register, modify.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ShieldManagerType"
              }
            ]
          }
        },
        "required": [
          "vimServer",
          "shieldManager"
        ],
        "additionalProperties": false
      },
      "VimServerType": {
        "title": "VimServerType",
        "description": "Represents vCenter server information.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerType"
          },
          {
            "type": "object",
            "properties": {
              "isEnabled": {
                "description": "True if the vCenter server is enabled for use with vCloud Director.",
                "type": "boolean"
              },
              "isConnected": {
                "nullable": true,
                "readOnly": true,
                "description": "True if the vCenter server is connected.",
                "type": "boolean"
              },
              "shieldManagerHost": {
                "nullable": true,
                "readOnly": true,
                "description": "vShield manager IP address or fully qualified domain name.",
                "type": "string",
                "format": "uri"
              },
              "shieldManagerUserName": {
                "nullable": true,
                "readOnly": true,
                "description": "vShield manager user name.",
                "type": "string"
              },
              "uuid": {
                "nullable": true,
                "readOnly": true,
                "description": "The instance UUID property of the vCenter server.",
                "type": "string"
              },
              "vcProxy": {
                "nullable": true,
                "readOnly": true,
                "description": "The name of the cell used as a proxy for the VIM server.",
                "type": "string"
              },
              "vcVersion": {
                "nullable": true,
                "readOnly": true,
                "description": "The version of the VIM server.",
                "type": "string"
              },
              "useVsphereService": {
                "nullable": true,
                "description": "If true, use the vSphere Lookup Service to get the vSphere web client server URL. Otherwise use the value of VsphereWebClienServerUrl.",
                "type": "boolean"
              },
              "vsphereWebClientServerUrl": {
                "nullable": true,
                "description": "The URL of VSphere web client server.",
                "type": "string"
              }
            },
            "required": [
              "isEnabled",
              "isConnected",
              "shieldManagerHost",
              "shieldManagerUserName",
              "uuid",
              "vcProxy",
              "vcVersion",
              "useVsphereService",
              "vsphereWebClientServerUrl"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VMWVimServerReferencesType": {
        "title": "VMWVimServerReferencesType",
        "description": "List of references to vCenter servers registered to vCloud Director.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "vimServerReference": {
                "readOnly": true,
                "description": "Reference to a vCenter server.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/vcloud:ReferenceType"
                }
              }
            },
            "required": [
              "vimServerReference"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ShieldManagerType": {
        "title": "ShieldManagerType",
        "description": "Represents credentials to a vShield Manager server.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerType"
          },
          {
            "type": "object",
            "properties": {
              "associatedVimServer": {
                "nullable": true,
                "description": "Reference to the vCenter server for this vShield manager.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vcloud:ReferenceType"
                  }
                ]
              },
              "controlVmResourcePoolName": {
                "nullable": true,
                "description": "Name of the resource pool to use for creating DLR virtual appliance.",
                "type": "string"
              },
              "controlVmDatastoreName": {
                "nullable": true,
                "description": "Name of the Datastore to use for creating DLR virtual appliance.",
                "type": "string"
              },
              "controlVmManagementInterfaceName": {
                "nullable": true,
                "description": "Name of the management interface to use for creating DLR virtual appliance.",
                "type": "string"
              }
            },
            "required": [
              "associatedVimServer",
              "controlVmResourcePoolName",
              "controlVmDatastoreName",
              "controlVmManagementInterfaceName"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VmObjectRefsListType": {
        "title": "VmObjectRefsListType",
        "description": "A list of references to virtual machines in vCenter inventory.",
        "type": "object",
        "properties": {
          "vmObjectRef": {
            "readOnly": true,
            "description": "A reference to a virtual machine in vCenter inventory.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VmObjectRefType"
            }
          }
        },
        "required": [
          "vmObjectRef"
        ],
        "additionalProperties": false
      },
      "VmObjectRefType": {
        "title": "VmObjectRefType",
        "description": "A reference to a virtual machine in vCenter inventory.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VimObjectRefType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "description": "The name of the virtual machine.",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "additionalProperties": false
          }
        ]
      },
      "DiskDatastoreType": {
        "title": "DiskDatastoreType",
        "description": "A pair of VM disk's instance ID and the datastore where the disk is located.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VimObjectRefType"
          },
          {
            "type": "object",
            "properties": {
              "instanceId": {
                "description": "InstanceId of the disk located on this datastore.",
                "type": "string"
              }
            },
            "required": [
              "instanceId"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ImportedDiskType": {
        "title": "ImportedDiskType",
        "description": "Represents a virtual disk of the VM.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "instanceId": {
                "description": "The instance ID of the disk as specified in the VM's settings in Virtual Center Server, or the VM's configuration file.",
                "type": "string"
              },
              "iops": {
                "readOnly": true,
                "description": "IOPS request for the imported disk",
                "type": "integer",
                "format": "int64"
              },
              "vdcStorageProfile": {
                "nullable": true,
                "description": "Reference to a vDC storage profile to associate with this virtual disk.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vcloud:ReferenceType"
                  }
                ]
              }
            },
            "required": [
              "instanceId",
              "iops",
              "vdcStorageProfile"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ImportVmParamsType": {
        "title": "ImportVmParamsType",
        "description": "Parameters to import a virtual machine.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ParamsType"
          },
          {
            "type": "object",
            "properties": {
              "sourceMove": {
                "description": "Set to true to delete the source object after the import is complete.",
                "type": "boolean"
              },
              "vmName": {
                "description": "Name to be used for imported VM.",
                "type": "string"
              },
              "vAppScopedLocalId": {
                "nullable": true,
                "description": "vApp scoped local id to be used for imported VM.",
                "type": "string"
              },
              "computerName": {
                "nullable": true,
                "description": "Computer name to be used for imported VM.",
                "type": "string"
              },
              "vmMoRef": {
                "description": "Managed object reference of VM to import.",
                "type": "string"
              },
              "vdcStorageProfile": {
                "nullable": true,
                "description": "Reference to a vDC storage profile for imported VM.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vcloud:ReferenceType"
                  }
                ]
              },
              "vdc": {
                "description": "Target vDC for imported VM.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vcloud:ReferenceType"
                  }
                ]
              },
              "importedDisk": {
                "description": "Represents a disk of the VM in order to specify per\\-disk Storage Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ImportedDiskType"
                }
              }
            },
            "required": [
              "sourceMove",
              "vmName",
              "vAppScopedLocalId",
              "computerName",
              "vmMoRef",
              "vdcStorageProfile",
              "vdc",
              "importedDisk"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ImportVmAsVAppParamsType": {
        "title": "ImportVmAsVAppParamsType",
        "description": "Parameters to import a virtual machine as a vApp.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:VAppCreationParamsType"
          },
          {
            "type": "object",
            "properties": {
              "sourceMove": {
                "description": "Set to true to delete the source object after the import is complete.",
                "type": "boolean"
              },
              "vmName": {
                "nullable": true,
                "description": "Name to be used for imported VM.",
                "type": "string"
              },
              "vAppScopedLocalId": {
                "nullable": true,
                "description": "vApp scoped local id to be used for imported VM.",
                "type": "string"
              },
              "computerName": {
                "nullable": true,
                "description": "Computer name to be used for imported VM.",
                "type": "string"
              },
              "vmMoRef": {
                "description": "Managed object reference of VM to import.",
                "type": "string"
              },
              "vdcStorageProfile": {
                "nullable": true,
                "description": "Reference to a vDC storage profile for imported VM.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vcloud:ReferenceType"
                  }
                ]
              },
              "vdc": {
                "description": "Target vDC for imported VM.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vcloud:ReferenceType"
                  }
                ]
              },
              "importedDisk": {
                "description": "Represents a disk of the VM in order to specify per\\-disk Storage Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ImportedDiskType"
                }
              }
            },
            "required": [
              "sourceMove",
              "vmName",
              "vAppScopedLocalId",
              "computerName",
              "vmMoRef",
              "vdcStorageProfile",
              "vdc",
              "importedDisk"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ImportVmIntoExistingVAppParamsType": {
        "title": "ImportVmIntoExistingVAppParamsType",
        "description": "Parameters to import a virtual machine into an existing VApp.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "sourceMove": {
                "description": "Set to true to delete the source object after the import is complete.",
                "type": "boolean"
              },
              "vmName": {
                "description": "Name to be used for imported VM.",
                "type": "string"
              },
              "vmDescription": {
                "nullable": true,
                "description": "Description to be used for imported VM.",
                "type": "string"
              },
              "vAppScopedLocalId": {
                "nullable": true,
                "description": "vApp scoped local id to be used for imported VM.",
                "type": "string"
              },
              "computerName": {
                "nullable": true,
                "description": "Computer name to be used for imported VM.",
                "type": "string"
              },
              "vmMoRef": {
                "description": "Managed object reference of VM to import.",
                "type": "string"
              },
              "vdcStorageProfile": {
                "nullable": true,
                "description": "Reference to a vDC storage profile for imported VM.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vcloud:ReferenceType"
                  }
                ]
              },
              "vApp": {
                "description": "vApp to hold imported VM.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vcloud:ReferenceType"
                  }
                ]
              },
              "importedDisk": {
                "description": "Represents a disk of the VM in order to specify per\\-disk Storage Profile.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ImportedDiskType"
                }
              }
            },
            "required": [
              "sourceMove",
              "vmName",
              "vmDescription",
              "vAppScopedLocalId",
              "computerName",
              "vmMoRef",
              "vdcStorageProfile",
              "vApp",
              "importedDisk"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ImportVmAsVAppTemplateParamsType": {
        "title": "ImportVmAsVAppTemplateParamsType",
        "description": "Parameters to import a virtual machine as a vApp template.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ParamsType"
          },
          {
            "type": "object",
            "properties": {
              "sourceMove": {
                "description": "Set to true to delete the source object after the import is complete.",
                "type": "boolean"
              },
              "goldMaster": {
                "description": "Attribute to specify if template is gold master, the default is false.",
                "type": "boolean"
              },
              "vmName": {
                "nullable": true,
                "description": "Name to be used for imported VM.",
                "type": "string"
              },
              "vAppScopedLocalId": {
                "nullable": true,
                "description": "vApp scoped local id to be used for imported VM.",
                "type": "string"
              },
              "computerName": {
                "nullable": true,
                "description": "Computer name to be used for imported VM.",
                "type": "string"
              },
              "vmMoRef": {
                "description": "Managed object reference of VM to import.",
                "type": "string"
              },
              "vdc": {
                "description": "Target vDC for imported vApp template.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vcloud:ReferenceType"
                  }
                ]
              },
              "vdcStorageProfile": {
                "nullable": true,
                "description": "Storage profile to be specified in the vApp template created by this import.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vcloud:ReferenceType"
                  }
                ]
              },
              "catalog": {
                "nullable": true,
                "description": "Catalog in which the imported vApp template will be listed.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vcloud:ReferenceType"
                  }
                ]
              }
            },
            "required": [
              "sourceMove",
              "goldMaster",
              "vmName",
              "vAppScopedLocalId",
              "computerName",
              "vmMoRef",
              "vdc",
              "vdcStorageProfile",
              "catalog"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ImportMediaParamsType": {
        "title": "ImportMediaParamsType",
        "description": "Represents parameters to import media from vSphere.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ParamsType"
          },
          {
            "type": "object",
            "properties": {
              "sourceMove": {
                "description": "Set to true to delete the source object after the import is complete.",
                "type": "boolean"
              },
              "datastoreMoRef": {
                "description": "Managed object reference of the datastore from which media file will be imported.",
                "type": "string"
              },
              "sourcePath": {
                "description": "A full path to media file on the datastore.",
                "type": "string"
              },
              "vdc": {
                "description": "The vDC into which the media will be imported.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vcloud:ReferenceType"
                  }
                ]
              },
              "catalog": {
                "nullable": true,
                "description": "The catalog in which the imported media will be listed.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vcloud:ReferenceType"
                  }
                ]
              },
              "vdcStorageProfile": {
                "nullable": true,
                "description": "Storage profile",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vcloud:ReferenceType"
                  }
                ]
              }
            },
            "required": [
              "sourceMove",
              "datastoreMoRef",
              "sourcePath",
              "vdc",
              "catalog",
              "vdcStorageProfile"
            ],
            "additionalProperties": false
          }
        ]
      },
      "HostType": {
        "title": "HostType",
        "description": "Read only representation of one host in a vSphere server.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:EntityType"
          },
          {
            "type": "object",
            "properties": {
              "ready": {
                "readOnly": true,
                "description": "Indicates whether the host is ready for use.",
                "type": "boolean"
              },
              "available": {
                "readOnly": true,
                "description": "Indicates whether the host is available.",
                "type": "boolean"
              },
              "enabled": {
                "readOnly": true,
                "description": "Indicated whether the host is enabled for use.",
                "type": "boolean"
              },
              "busy": {
                "readOnly": true,
                "description": "Indicates whether the host is busy.",
                "type": "boolean"
              },
              "enableHostForHostSpanning": {
                "readOnly": true,
                "description": "Indicates whether the host is enabled for host spanning.",
                "type": "boolean"
              },
              "cpuType": {
                "nullable": true,
                "readOnly": true,
                "description": "The CPU type of the host.",
                "type": "string"
              },
              "numOfCpusPackages": {
                "readOnly": true,
                "description": "How many hardware CPUs the host has.",
                "type": "integer",
                "format": "int32"
              },
              "numOfCpusLogical": {
                "readOnly": true,
                "description": "How many logical CPUs the host has.",
                "type": "integer",
                "format": "int32"
              },
              "cpuTotal": {
                "readOnly": true,
                "description": "The total CPU power measured in MHz.",
                "type": "integer",
                "format": "int64"
              },
              "memUsed": {
                "readOnly": true,
                "description": "The used memory in the host.",
                "type": "number",
                "format": "double"
              },
              "memTotal": {
                "readOnly": true,
                "description": "The total memory in the host.",
                "type": "number",
                "format": "double"
              },
              "hostOsName": {
                "nullable": true,
                "readOnly": true,
                "description": "OS name of the host.",
                "type": "string"
              },
              "hostOsVersion": {
                "nullable": true,
                "readOnly": true,
                "description": "OS version of the host.",
                "type": "string"
              },
              "systemMessages": {
                "nullable": true,
                "readOnly": true,
                "description": "System messages of the host.",
                "type": "string"
              },
              "vimPropertyPageUrl": {
                "nullable": true,
                "readOnly": true,
                "description": "URL to the VIM property page of the host.",
                "type": "string"
              },
              "vmMoRef": {
                "readOnly": true,
                "description": "The host moref.",
                "type": "string"
              }
            },
            "required": [
              "ready",
              "available",
              "enabled",
              "busy",
              "enableHostForHostSpanning",
              "cpuType",
              "numOfCpusPackages",
              "numOfCpusLogical",
              "cpuTotal",
              "memUsed",
              "memTotal",
              "hostOsName",
              "hostOsVersion",
              "systemMessages",
              "vimPropertyPageUrl",
              "vmMoRef"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VimObjectRefType": {
        "title": "VimObjectRefType",
        "description": "Represents the moref and the type of a vSphere object.",
        "type": "object",
        "properties": {
          "vimServerRef": {
            "readOnly": true,
            "description": "The vCenter server reference.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ReferenceType"
              }
            ]
          },
          "moRef": {
            "readOnly": true,
            "description": "Managed object reference of the object.",
            "type": "string"
          },
          "vimObjectType": {
            "readOnly": true,
            "description": "The vSphere type of the object. One of: CLUSTER\\_COMPUTE\\_RESOURCE (The object is a vSphere cluster compute resource.), RESOURCE\\_POOL (The object is a vSphere resource pool.), DATASTORE (The object is a vSphere datastore.), HOST (The object is an ESX/ESXi host.), VIRTUAL\\_MACHINE (The object is a vSphere VM.), VIRTUAL\\_APP (The object is a vSphere vApp.), NETWORK (The object is a vSphere network.), DV\\_PORTGROUP (The object is a vSphere distributed virtual portgroup.), DV\\_SWITCH (The object is a vSphere distributed virtual switch.), DATASTORE\\_CLUSTER (The object is a vSphere storage pod.)",
            "type": "string"
          }
        },
        "required": [
          "vimServerRef",
          "moRef",
          "vimObjectType"
        ],
        "additionalProperties": false
      },
      "VimObjectRefsType": {
        "title": "VimObjectRefsType",
        "description": "List of VimObjectRef elements.",
        "type": "object",
        "properties": {
          "vimObjectRef": {
            "readOnly": true,
            "description": "A reference to a vSphere object.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VimObjectRefType"
            }
          }
        },
        "required": [
          "vimObjectRef"
        ],
        "additionalProperties": false
      },
      "VMWProviderVdcType": {
        "title": "VMWProviderVdcType",
        "description": "Extension representation of provider vDC type.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ProviderVdcType"
          },
          {
            "type": "object",
            "properties": {
              "dataStoreRefs": {
                "description": "vSphere datastores backing this provider vDC.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VimObjectRefsType"
                  }
                ]
              },
              "resourcePoolRefs": {
                "description": "Resource pools backing this provider vDC. On create, you must specify a resource pool that is not used by (and is not the child of a resource pool used by) any other provider vDC. On modify, this element is required for schema validation, but its contents cannot be changed.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VimObjectRefsType"
                  }
                ]
              },
              "vimServer": {
                "description": "The vCenter server that provides the resource pools and datastores. A valid reference is required on create. On modify, this element is required for schema validation, but its contents cannot be changed.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/vcloud:ReferenceType"
                }
              },
              "hostReferences": {
                "nullable": true,
                "readOnly": true,
                "description": "Shows all hosts which are connected to VC server.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VMWHostReferencesType"
                  }
                ]
              },
              "highestSupportedHardwareVersion": {
                "nullable": true,
                "description": "The highest virtual hardware version supported by this Provider vDC. If empty or omitted on creation, the system sets it to the highest virtual hardware version suported by all hosts in the primary resource pool. You can modify it when you add more resource pools.",
                "type": "string"
              }
            },
            "required": [
              "dataStoreRefs",
              "resourcePoolRefs",
              "vimServer",
              "hostReferences",
              "highestSupportedHardwareVersion"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VMWProviderVdcParamsType": {
        "title": "VMWProviderVdcParamsType",
        "description": "Parameters to create or update a Provider vDC.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ParamsType"
          },
          {
            "type": "object",
            "properties": {
              "resourcePoolRefs": {
                "description": "Resource pools backing this provider vDC. You must specify a resource pool that is not used by (and is not the child of a resource pool used by) any other provider vDC.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VimObjectRefsType"
                  }
                ]
              },
              "vimServer": {
                "description": "The vCenter server that provides the resource pools and datastores. A valid reference is required on create. On modify, this element is required for schema validation, but its contents cannot be changed.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/vcloud:ReferenceType"
                }
              },
              "vxlanNetworkPool": {
                "nullable": true,
                "description": "Reference to a VXLAN Network Pool to be assigned to this Provider VDC. Leave empty to have the system create the VXLAN pool and assign it to the Provider VDC.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vcloud:ReferenceType"
                  }
                ]
              },
              "highestSupportedHardwareVersion": {
                "nullable": true,
                "description": "The highest virtual hardware version supported by this Provider vDC. If empty or omitted on creation, the system sets it to the highest virtual hardware version suported by all hosts in the primary resource pool. You can modify it when you add more resource pools.",
                "type": "string"
              },
              "isEnabled": {
                "nullable": true,
                "description": "Flag to show the enabled status of provider VDC.",
                "type": "boolean"
              },
              "storageProfile": {
                "readOnly": true,
                "description": "Names of the storage profiles to add to this provider vDC.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "hostRefs": {
                "nullable": true,
                "readOnly": true,
                "description": "List of host which will be prepared.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/HostObjectRefsType"
                  }
                ]
              },
              "defaultPassword": {
                "nullable": true,
                "readOnly": true,
                "description": "The default password which will be used for preparing hosts.",
                "type": "string"
              },
              "defaultUsername": {
                "nullable": true,
                "readOnly": true,
                "description": "The default username which will be used for preparing hosts.",
                "type": "string"
              }
            },
            "required": [
              "resourcePoolRefs",
              "vimServer",
              "vxlanNetworkPool",
              "highestSupportedHardwareVersion",
              "isEnabled",
              "storageProfile",
              "hostRefs",
              "defaultPassword",
              "defaultUsername"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VMWProviderVdcReferencesType": {
        "title": "VMWProviderVdcReferencesType",
        "description": "Represents a list of available provider vDCs.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "providerVdcReference": {
                "readOnly": true,
                "description": "Reference to a provider vDC.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/vcloud:ReferenceType"
                }
              }
            },
            "required": [
              "providerVdcReference"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VMWProviderVdcStorageProfileType": {
        "title": "VMWProviderVdcStorageProfileType",
        "description": "Extension representation of provider vDC storage profile type.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ProviderVdcStorageProfileType"
          },
          {
            "type": "object",
            "properties": {
              "vimStorageProfile": {
                "nullable": true,
                "readOnly": true,
                "description": "VIM object reference to storage profile.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VimObjectRefType"
                  }
                ]
              }
            },
            "required": [
              "vimStorageProfile"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VMWExternalNetworkType": {
        "title": "VMWExternalNetworkType",
        "description": "External network type.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:NetworkType"
          },
          {
            "type": "object",
            "properties": {
              "vimPortGroupRef": {
                "nullable": true,
                "description": "The portgroup that backs this network. A valid reference to an existing network or dvportgroup in a vCenter server is required on create. On modify, this element is required for schema validation, but its contents cannot be changed.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VimObjectRefType"
                  }
                ]
              },
              "vimPortGroupRefs": {
                "nullable": true,
                "description": "A list of DV\\_PORTGROUP or NETWORK objects that back this network. Each referenced DV\\_PORTGROUP or NETWORK must exist on a vCenter server registered with the system. You cannot reference more than one DV\\_PORTGROUP or NETWORK from a single vCenter server. You cannot combine DV\\_PORTGROUP and NETWORK objects in this list.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VimObjectRefsType"
                  }
                ]
              }
            },
            "required": [
              "vimPortGroupRef",
              "vimPortGroupRefs"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VMWExternalNetworkReferencesType": {
        "title": "VMWExternalNetworkReferencesType",
        "description": "Represents a list of available external networks.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "externalNetworkReference": {
                "readOnly": true,
                "description": "Reference to an external network.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/vcloud:ReferenceType"
                }
              }
            },
            "required": [
              "externalNetworkReference"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VMWNetworkPoolReferencesType": {
        "title": "VMWNetworkPoolReferencesType",
        "description": "Represents a list of available network pools.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "networkPoolReference": {
                "readOnly": true,
                "description": "Reference to a network pool.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/vcloud:ReferenceType"
                }
              }
            },
            "required": [
              "networkPoolReference"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VMWNetworkPoolType": {
        "title": "VMWNetworkPoolType",
        "description": "Base extension network pool type.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:NetworkPoolType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "PortGroupPoolType": {
        "title": "PortGroupPoolType",
        "description": "Represents a network pool backed by one or more vSphere port groups.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VMWNetworkPoolType"
          },
          {
            "type": "object",
            "properties": {
              "portGroupRefs": {
                "description": "References to the vSphere port groups that support this network pool. Required at least one port group moref, for modify and create.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VimObjectRefsType"
                  }
                ]
              },
              "vimServer": {
                "description": "Reference to the vSphere which hosts the port groups. Required VC server on which the port groups exist, for modify and create.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vcloud:ReferenceType"
                  }
                ]
              },
              "usedNetworksCount": {
                "nullable": true,
                "readOnly": true,
                "description": "This is a read\\-only indication of how many networks in this pool are in use.",
                "type": "integer",
                "format": "int32"
              }
            },
            "required": [
              "portGroupRefs",
              "vimServer",
              "usedNetworksCount"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VlanPoolType": {
        "title": "VlanPoolType",
        "description": "Represents a network pool backed by one or more vSphere VLANs.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VMWNetworkPoolType"
          },
          {
            "type": "object",
            "properties": {
              "vlanRange": {
                "description": "VLAN range used for this pool.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NumericRangeType"
                }
              },
              "vimSwitchRef": {
                "nullable": true,
                "readOnly": true,
                "description": "Reference to the vSphere switch which is used for this pool.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VimObjectRefType"
                  }
                ]
              },
              "usedNetworksCount": {
                "nullable": true,
                "readOnly": true,
                "description": "This is a read\\-only indication of how many networks in this pool are in use.",
                "type": "integer",
                "format": "int32"
              },
              "promiscuousMode": {
                "nullable": true,
                "description": "Internal use only.",
                "type": "boolean"
              }
            },
            "required": [
              "vlanRange",
              "vimSwitchRef",
              "usedNetworksCount",
              "promiscuousMode"
            ],
            "additionalProperties": false
          }
        ]
      },
      "FencePoolType": {
        "title": "FencePoolType",
        "description": "Represents a network pool backed by one or more vSphere isolated networks.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VMWNetworkPoolType"
          },
          {
            "type": "object",
            "properties": {
              "fenceIdCount": {
                "description": "Number of fence IDs in this pool.",
                "type": "integer",
                "format": "int32"
              },
              "vlanId": {
                "description": "VLAN ID to be used for this pool or 0 for no VLAN.",
                "type": "integer",
                "format": "int32"
              },
              "vimSwitchRef": {
                "description": "Reference to the vSphere switch that supports this VLAN.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VimObjectRefType"
                  }
                ]
              },
              "usedNetworksCount": {
                "nullable": true,
                "readOnly": true,
                "description": "This is a read\\-only indication of how many networks in this pool are in use.",
                "type": "integer",
                "format": "int32"
              },
              "promiscuousMode": {
                "nullable": true,
                "description": "Internal use only.",
                "type": "boolean"
              },
              "mtu": {
                "nullable": true,
                "description": "Maximum transmission unit of the underlying VMware vNetwork Distributed Switch.",
                "type": "integer",
                "format": "int32"
              }
            },
            "required": [
              "fenceIdCount",
              "vlanId",
              "vimSwitchRef",
              "usedNetworksCount",
              "promiscuousMode",
              "mtu"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VxlanPoolType": {
        "title": "VxlanPoolType",
        "description": "Represents a network pool using VXLAN technology. Backed by resource pools of a PVDC that can be backed by multiple VDSes.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VMWNetworkPoolType"
          },
          {
            "type": "object",
            "properties": {
              "vimSwitchRef": {
                "nullable": true,
                "description": "Reference to the vSphere switch that supports the VXLAN networks",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VimObjectRefType"
                  }
                ]
              },
              "transportZoneRef": {
                "nullable": true,
                "description": "Transport Zone ID of VXLAN Network Pool.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VimObjectRefType"
                  }
                ]
              },
              "usedNetworksCount": {
                "nullable": true,
                "readOnly": true,
                "description": "This is a read\\-only indication of how many networks in this pool are in use.",
                "type": "integer",
                "format": "int32"
              },
              "promiscuousMode": {
                "nullable": true,
                "description": "Internal use only.",
                "type": "boolean"
              },
              "vdsContexts": {
                "description": "The VDS Contexts (VDS id, VLAN ID tuples) that make up a VXLAN network pool",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VdsContextType"
                }
              }
            },
            "required": [
              "vimSwitchRef",
              "transportZoneRef",
              "usedNetworksCount",
              "promiscuousMode",
              "vdsContexts"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VdsContextType": {
        "title": "VdsContextType",
        "description": "Represents the collection of VDS Contexts.",
        "type": "object",
        "properties": {
          "vdsContext": {
            "nullable": true,
            "description": "A VimObjectRef that represents a {vC ID, VDS ID, VLAN ID} tuple",
            "allOf": [
              {
                "$ref": "#/components/schemas/VimObjectRefType"
              }
            ]
          }
        },
        "required": [
          "vdsContext"
        ],
        "additionalProperties": false
      },
      "NumericRangeType": {
        "title": "NumericRangeType",
        "description": "Range of integers.",
        "type": "object",
        "properties": {
          "start": {
            "description": "Start integer number of the range.",
            "type": "integer",
            "format": "int32"
          },
          "end": {
            "description": "End integer number of the range.",
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "start",
          "end"
        ],
        "additionalProperties": false
      },
      "VMWHostReferencesType": {
        "title": "VMWHostReferencesType",
        "description": "Represents a list of available hosts.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "hostReference": {
                "readOnly": true,
                "description": "Reference to a host.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/vcloud:ReferenceType"
                }
              }
            },
            "required": [
              "hostReference"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ResourcePoolListType": {
        "title": "ResourcePoolListType",
        "description": "Represents a list of available resource pools that have not been assigned to any vDCs (provider or org).",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "resourcePool": {
                "readOnly": true,
                "description": "Free resource pool information.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourcePoolType"
                }
              }
            },
            "required": [
              "resourcePool"
            ],
            "additionalProperties": false
          }
        ]
      },
      "LicensingReportType": {
        "deprecated": true,
        "title": "LicensingReportType",
        "description": "Represents a read\\-only licensing metric report. This type is deprecated since version 5.5 because of scalability issues. The new typed queries 'licensingReportQueryList', 'licensingReportSampleQueryList', 'licensingManagedServerQueryList' and 'licensingVirtualMachineQueryList', when combined, replaces this.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "productSerialNumber": {
                "readOnly": true,
                "description": "Product serial number.",
                "type": "string"
              },
              "reportDate": {
                "readOnly": true,
                "description": "End of the period for which the report is generated.",
                "type": "string",
                "format": "date-time"
              },
              "signature": {
                "readOnly": true,
                "description": "Cryptographic signature of the report.",
                "type": "string"
              },
              "sample": {
                "readOnly": true,
                "description": "One licensing metric sample captured in the report.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LicensingReportSampleType"
                }
              }
            },
            "required": [
              "productSerialNumber",
              "reportDate",
              "signature",
              "sample"
            ],
            "additionalProperties": false
          }
        ]
      },
      "LicensingReportSampleType": {
        "deprecated": true,
        "title": "LicensingReportSampleType",
        "description": "Represents a single licensing data collection point.",
        "type": "object",
        "additionalProperties": false
      },
      "LicensingManagedServerType": {
        "deprecated": true,
        "title": "LicensingManagedServerType",
        "description": "Captures a single set of metrics for a managed server for a given sample.",
        "type": "object",
        "properties": {
          "vimObjectRef": {
            "readOnly": true,
            "description": "Managed object reference of the server.",
            "allOf": [
              {
                "$ref": "#/components/schemas/VimObjectRefType"
              }
            ]
          }
        },
        "required": [
          "vimObjectRef"
        ],
        "additionalProperties": false
      },
      "LicensingVirtualMachineType": {
        "deprecated": true,
        "title": "LicensingVirtualMachineType",
        "description": "Represents a single set of virtual machine metrics.",
        "type": "object",
        "properties": {
          "vimObjectRef": {
            "readOnly": true,
            "description": "Managed object reference of the virtual machine.",
            "allOf": [
              {
                "$ref": "#/components/schemas/VimObjectRefType"
              }
            ]
          }
        },
        "required": [
          "vimObjectRef"
        ],
        "additionalProperties": false
      },
      "LicensingReportListType": {
        "deprecated": true,
        "title": "LicensingReportListType",
        "description": "Represents a list of licensing reports.",
        "type": "object",
        "properties": {
          "report": {
            "readOnly": true,
            "description": "Link to a licensing report.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/vcloud:LinkType"
            }
          }
        },
        "required": [
          "report"
        ],
        "additionalProperties": false
      },
      "DatastoreType": {
        "title": "DatastoreType",
        "description": "Represents datastore object.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:EntityType"
          },
          {
            "type": "object",
            "properties": {
              "vimObjectRef": {
                "nullable": true,
                "readOnly": true,
                "description": "The VIM object reference to this datastore.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VimObjectRefType"
                  }
                ]
              },
              "enabled": {
                "nullable": true,
                "description": "Indicates whether the datastore is enabled.",
                "type": "boolean"
              },
              "busy": {
                "nullable": true,
                "readOnly": true,
                "description": "Indicates whether the datastore is busy.",
                "type": "boolean"
              },
              "vAAIForFpEnabled": {
                "nullable": true,
                "description": "Indicates whether the VAAI native snapshots for Fast Provisioning is enabled.",
                "type": "boolean"
              },
              "systemMessages": {
                "nullable": true,
                "readOnly": true,
                "description": "System messages for the datastore.",
                "type": "string"
              },
              "datastoreFsType": {
                "nullable": true,
                "readOnly": true,
                "description": "Filesystem type of the datastore.",
                "type": "string"
              },
              "vcDisplayName": {
                "nullable": true,
                "readOnly": true,
                "description": "vCenter display name of the datastore.",
                "type": "string"
              },
              "mountHost": {
                "nullable": true,
                "readOnly": true,
                "description": "Datastore mount host.",
                "type": "string"
              },
              "mountDirectory": {
                "nullable": true,
                "readOnly": true,
                "description": "Datastore mountpoint.",
                "type": "string"
              },
              "totalCapacityMb": {
                "nullable": true,
                "readOnly": true,
                "description": "Total capacity, in MB, of the datastore.",
                "type": "number",
                "format": "double"
              },
              "totalCapacityGb": {
                "nullable": true,
                "readOnly": true,
                "description": "Total capacity, in GB, of the datastore.",
                "type": "number",
                "format": "double"
              },
              "usedCapacityMb": {
                "nullable": true,
                "readOnly": true,
                "description": "Used capacity, in MB, of the datastore.",
                "type": "number",
                "format": "double"
              },
              "usedCapacityGb": {
                "nullable": true,
                "readOnly": true,
                "description": "Used capacity, in GB, of the datastore.",
                "type": "number",
                "format": "double"
              },
              "usedCapacityPercent": {
                "nullable": true,
                "readOnly": true,
                "description": "Used capacity of the datastore, as a percentage.",
                "type": "number",
                "format": "double"
              },
              "provisionedSpaceMb": {
                "nullable": true,
                "readOnly": true,
                "description": "Provisioned capacity, in MB, of the datastore.",
                "type": "number",
                "format": "double"
              },
              "provisionedSpaceGb": {
                "nullable": true,
                "readOnly": true,
                "description": "Provisioned capacity, in GB, of the datastore.",
                "type": "number",
                "format": "double"
              },
              "requestedStorageMb": {
                "nullable": true,
                "readOnly": true,
                "description": "Requested storage, in MB, for all the vCloud Director VMs on the datastore.",
                "type": "number",
                "format": "double"
              },
              "requestedStorageGb": {
                "nullable": true,
                "readOnly": true,
                "description": "Requested storage, in GB, for all the vCloud Director VMs on the datastore.",
                "type": "number",
                "format": "double"
              },
              "vimPropertyPageUrl": {
                "nullable": true,
                "readOnly": true,
                "description": "URL to the VIM property page of the datastore host.",
                "type": "string"
              },
              "members": {
                "nullable": true,
                "readOnly": true,
                "description": "Member datastores of a datastore cluster. Standalone datastore has empty collection.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VimObjectRefsType"
                  }
                ]
              }
            },
            "required": [
              "vimObjectRef",
              "enabled",
              "busy",
              "vAAIForFpEnabled",
              "systemMessages",
              "datastoreFsType",
              "vcDisplayName",
              "mountHost",
              "mountDirectory",
              "totalCapacityMb",
              "totalCapacityGb",
              "usedCapacityMb",
              "usedCapacityGb",
              "usedCapacityPercent",
              "provisionedSpaceMb",
              "provisionedSpaceGb",
              "requestedStorageMb",
              "requestedStorageGb",
              "vimPropertyPageUrl",
              "members"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VMWStorageProfileType": {
        "title": "VMWStorageProfileType",
        "description": "Represents a vCenter storage profile.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "description": "The name of the storage profile.",
                "type": "string"
              },
              "moRef": {
                "nullable": true,
                "readOnly": true,
                "description": "The vSphere managed object reference of the storage profile.",
                "type": "string"
              },
              "vimObjectType": {
                "nullable": true,
                "readOnly": true,
                "description": "The vSphere type of the object.",
                "type": "string"
              },
              "freeStorageMb": {
                "nullable": true,
                "readOnly": true,
                "description": "Free storage in MB of this storage profile.",
                "type": "number",
                "format": "double"
              },
              "totalStorageMb": {
                "nullable": true,
                "readOnly": true,
                "description": "Total storage in MB of this storage profile.",
                "type": "number",
                "format": "double"
              },
              "dataStoreRefs": {
                "nullable": true,
                "readOnly": true,
                "description": "vSphere datastores that support this storage profile.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VimObjectRefsType"
                  }
                ]
              }
            },
            "required": [
              "name",
              "moRef",
              "vimObjectType",
              "freeStorageMb",
              "totalStorageMb",
              "dataStoreRefs"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VMWStorageProfilesType": {
        "title": "VMWStorageProfilesType",
        "description": "Represents a group of vCenter storage profiles.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "vMWStorageProfile": {
                "readOnly": true,
                "description": "A vCenter storage profile.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VMWStorageProfileType"
                }
              }
            },
            "required": [
              "vMWStorageProfile"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VMWProviderVdcResourcePoolSetType": {
        "title": "VMWProviderVdcResourcePoolSetType",
        "description": "Represents backing resource pool set",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "vMWProviderVdcResourcePool": {
                "description": "The backing resource pool set",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VMWProviderVdcResourcePoolType"
                }
              }
            },
            "required": [
              "vMWProviderVdcResourcePool"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VMWProviderVdcResourcePoolType": {
        "title": "VMWProviderVdcResourcePoolType",
        "description": "Represents backing resource pool for provider vDC.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "primary": {
                "readOnly": true,
                "deprecated": true,
                "description": "True if this is primary resource pool for this provider vDC. This attribute has been deprecated since version 29.0.",
                "type": "boolean"
              },
              "resourcePoolVimObjectRef": {
                "description": "Vim object reference to resource pool",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VimObjectRefType"
                  }
                ]
              },
              "resourcePoolRef": {
                "description": "Reference to resource pool",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vcloud:ReferenceType"
                  }
                ]
              },
              "enabled": {
                "description": "Resource pool enabled status",
                "type": "boolean"
              }
            },
            "required": [
              "primary",
              "resourcePoolVimObjectRef",
              "resourcePoolRef",
              "enabled"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VMWDiscoveredResourcePoolsType": {
        "title": "VMWDiscoveredResourcePoolsType",
        "description": "A list of vCenter Resource Pools that are valid for adoption by VDCs.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "vMWDiscoveredResourcePool": {
                "description": "A reference to a vCenter Resource Pool valid for adoption by a VDC.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VMWDiscoveredResourcePoolType"
                }
              }
            },
            "required": [
              "vMWDiscoveredResourcePool"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VMWDiscoveredResourcePoolType": {
        "title": "VMWDiscoveredResourcePoolType",
        "description": "Represents a Resource Pool that is a candidate for adoption by a VDC.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "The name of the vCenter Resource Pool.",
                "type": "string"
              },
              "validCandidate": {
                "readOnly": true,
                "description": "Whether this resource satisfies the vCD rules that makes it a valid candidate to back an Organization VDC.",
                "type": "boolean"
              },
              "resourcePoolVimObjectRef": {
                "description": "Vim object reference to resource pool",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VimObjectRefType"
                  }
                ]
              }
            },
            "required": [
              "name",
              "validCandidate",
              "resourcePoolVimObjectRef"
            ],
            "additionalProperties": false
          }
        ]
      },
      "UpdateResourcePoolSetParamsType": {
        "title": "UpdateResourcePoolSetParamsType",
        "description": "Parameters for updating resource pools backing a Provider vDC.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ParamsType"
          },
          {
            "type": "object",
            "properties": {
              "addItem": {
                "description": "Reference to a secondary resource pool to add to the Provider vDC resource pool set.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VimObjectRefType"
                }
              },
              "deleteItem": {
                "description": "Reference to a secondary resource pool to delete from the Provider vDC resource pool set.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/vcloud:ReferenceType"
                }
              }
            },
            "required": [
              "addItem",
              "deleteItem"
            ],
            "additionalProperties": false
          }
        ]
      },
      "OrganizationResourcePoolSetType": {
        "title": "OrganizationResourcePoolSetType",
        "description": "Represents a set of resource pools that back an organization vDC.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "resourcePoolVimObjectRef": {
                "readOnly": true,
                "description": "Vim object reference to an organization resource pool.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VimObjectRefType"
                }
              }
            },
            "required": [
              "resourcePoolVimObjectRef"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VmVimInfoType": {
        "title": "VmVimInfoType",
        "description": "Represents a vSphere VM information.",
        "type": "object",
        "properties": {
          "vmVimObjectRef": {
            "readOnly": true,
            "description": "Reference to a vim vm object.",
            "allOf": [
              {
                "$ref": "#/components/schemas/VimObjectRefType"
              }
            ]
          },
          "datastoreVimObjectRef": {
            "readOnly": true,
            "description": "The datastore where the VM's configuration files are stored.",
            "allOf": [
              {
                "$ref": "#/components/schemas/VimObjectRefType"
              }
            ]
          },
          "vmDiskDatastores": {
            "readOnly": true,
            "description": "The datastore where the VM disk's files are stored.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiskDatastoreType"
            }
          },
          "hostVimObjectRef": {
            "readOnly": true,
            "description": "The host for this VM.",
            "allOf": [
              {
                "$ref": "#/components/schemas/VimObjectRefType"
              }
            ]
          },
          "virtualDisksMaxChainLength": {
            "readOnly": true,
            "description": "The maximum chain length of the VM's virtual disks.",
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "vmVimObjectRef",
          "datastoreVimObjectRef",
          "vmDiskDatastores",
          "hostVimObjectRef",
          "virtualDisksMaxChainLength"
        ],
        "additionalProperties": false
      },
      "StrandedItemVimObjectType": {
        "title": "StrandedItemVimObjectType",
        "description": "Represents a stranded item for VIM object.",
        "type": "object",
        "properties": {
          "errorMessage": {
            "nullable": true,
            "readOnly": true,
            "description": "The reason for why the item failed on deletion.",
            "type": "string"
          },
          "vimObjectRef": {
            "readOnly": true,
            "description": "Vim object reference to a resource pool to which the virtual machine will be migrated. This parameter is optional. If it is not provided, the system will automatically choose a target resource pool and migrate the VMs to it.",
            "allOf": [
              {
                "$ref": "#/components/schemas/VimObjectRefType"
              }
            ]
          }
        },
        "required": [
          "errorMessage",
          "vimObjectRef"
        ],
        "additionalProperties": false
      },
      "StrandedItemVimObjectsType": {
        "title": "StrandedItemVimObjectsType",
        "description": "Represents a collection of StrandedItemVimObject.",
        "type": "object",
        "properties": {
          "strandedItemVimObject": {
            "readOnly": true,
            "description": "A stranded item VimObject.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StrandedItemVimObjectType"
            }
          }
        },
        "required": [
          "strandedItemVimObject"
        ],
        "additionalProperties": false
      },
      "StrandedItemType": {
        "title": "StrandedItemType",
        "description": "Represents the stranded item.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:EntityType"
          },
          {
            "type": "object",
            "properties": {
              "entityType": {
                "nullable": true,
                "description": "The type of the stranded item.",
                "type": "string"
              },
              "deletionDate": {
                "nullable": true,
                "readOnly": true,
                "description": "Date when the object was deleted from vCD.",
                "type": "string",
                "format": "date-time"
              },
              "errorMessage": {
                "nullable": true,
                "readOnly": true,
                "description": "The reason why the deletion failed.",
                "type": "string"
              },
              "parent": {
                "nullable": true,
                "readOnly": true,
                "description": "A reference to the parent stranded item.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vcloud:ReferenceType"
                  }
                ]
              },
              "strandedItemVimObjects": {
                "nullable": true,
                "readOnly": true,
                "description": "A collection of stranded item VimObjects.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/StrandedItemVimObjectsType"
                  }
                ]
              }
            },
            "required": [
              "entityType",
              "deletionDate",
              "errorMessage",
              "parent",
              "strandedItemVimObjects"
            ],
            "additionalProperties": false
          }
        ]
      },
      "UpdateProviderVdcStorageProfilesParamsType": {
        "title": "UpdateProviderVdcStorageProfilesParamsType",
        "description": "Parameters for request to add or remove Provider vDC storage profiles.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ParamsType"
          },
          {
            "type": "object",
            "properties": {
              "addStorageProfile": {
                "description": "Name of the storage profile to add to the Provider vDC.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "removeStorageProfile": {
                "description": "A reference to the Provider vDC storage profile to remove from the Provider vDC.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/vcloud:ReferenceType"
                }
              }
            },
            "required": [
              "addStorageProfile",
              "removeStorageProfile"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ProviderVdcMergeParamsType": {
        "title": "ProviderVdcMergeParamsType",
        "description": "A list of Provider vDCs to merge with the target Provider vDC.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "providerVdcReference": {
                "description": "Reference to a Provider vDC to be merged with the target Provider vDC.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/vcloud:ReferenceType"
                }
              }
            },
            "required": [
              "providerVdcReference"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VSphereWebClientUrlType": {
        "title": "VSphereWebClientUrlType",
        "description": "Represents the vSphere Web Client URL of a VIM object.",
        "type": "object",
        "properties": {
          "uRL": {
            "readOnly": true,
            "description": "URL to open the VIM object in vSphere Web Client.",
            "type": "string"
          }
        },
        "required": [
          "uRL"
        ],
        "additionalProperties": false
      },
      "HostObjectRefType": {
        "title": "HostObjectRefType",
        "description": "A reference to a host in vCenter inventory.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VimObjectRefType"
          },
          {
            "type": "object",
            "properties": {
              "username": {
                "nullable": true,
                "description": "Username of the ESX/ESXi host Administrator.",
                "type": "string"
              },
              "password": {
                "nullable": true,
                "description": "Password of the ESX/ESXi host Administrator, in cleartext.",
                "type": "string"
              }
            },
            "required": [
              "username",
              "password"
            ],
            "additionalProperties": false
          }
        ]
      },
      "HostObjectRefsType": {
        "title": "HostObjectRefsType",
        "description": "List of HostObjectRefType elements.",
        "type": "object",
        "properties": {
          "hostObjectRef": {
            "readOnly": true,
            "description": "A reference to an ESX/ESXi host.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HostObjectRefType"
            }
          }
        },
        "required": [
          "hostObjectRef"
        ],
        "additionalProperties": false
      },
      "RightsType": {
        "title": "RightsType",
        "description": "Collection of rights.",
        "type": "object",
        "properties": {
          "right": {
            "description": "Right that is part of this collection.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/vcloud:RightType"
            }
          }
        },
        "required": [
          "right"
        ],
        "additionalProperties": false
      },
      "UpdateRightsParamsType": {
        "title": "UpdateRightsParamsType",
        "description": "Parameters for updating right collection.",
        "type": "object",
        "properties": {
          "addRight": {
            "description": "If right with the same name does not exist it will be added. If not the right will be simply updated.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/vcloud:RightType"
            }
          },
          "removeRight": {
            "description": "Right name to delete if it exists.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "addRight",
          "removeRight"
        ],
        "additionalProperties": false
      },
      "RightRefsType": {
        "title": "RightRefsType",
        "description": "Container for ReferenceType elements that reference the predefined RightType objects.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "right": {
                "readOnly": true,
                "description": "ReferenceType element that references a predefined RightType object.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/vcloud:ReferenceType"
                }
              }
            },
            "required": [
              "right"
            ],
            "additionalProperties": false
          }
        ]
      },
      "EntityReferencesType": {
        "title": "EntityReferencesType",
        "description": "Container for references to entities.",
        "type": "object",
        "additionalProperties": false
      },
      "EntityRightsType": {
        "title": "EntityRightsType",
        "description": "Container for an entity and its list of rights.",
        "type": "object",
        "properties": {
          "rights": {
            "description": "References to entity rights.",
            "allOf": [
              {
                "$ref": "#/components/schemas/RightRefsType"
              }
            ]
          }
        },
        "required": [
          "rights"
        ],
        "additionalProperties": false
      },
      "UserEntityRightsType": {
        "title": "UserEntityRightsType",
        "description": "Container for EntityRights elements. Each element contains a reference to an entity and a list of user rights that the entity supports.",
        "type": "object",
        "properties": {
          "entityRights": {
            "description": "Single EntityRightsType",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityRightsType"
            }
          }
        },
        "required": [
          "entityRights"
        ],
        "additionalProperties": false
      },
      "MigrateParamsType": {
        "title": "MigrateParamsType",
        "description": "Parameters that control virtual machine migration.",
        "type": "object",
        "properties": {
          "vmRef": {
            "description": "Entity object reference to a virtual machine which will be migrated. At least one Vm should be provided for migrating to the target resource pool.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/vcloud:ReferenceType"
            }
          },
          "resourcePoolRef": {
            "nullable": true,
            "description": "Vim object reference to a resource pool to which the virtual machine will be migrated. This parameter is optional. If it is not provided, the system will automatically choose a target resource pool and migrate the VMs to it.",
            "allOf": [
              {
                "$ref": "#/components/schemas/VimObjectRefType"
              }
            ]
          }
        },
        "required": [
          "vmRef",
          "resourcePoolRef"
        ],
        "additionalProperties": false
      },
      "VMWAllocationPoolVdcTemplateSpecificationType": {
        "title": "VMWAllocationPoolVdcTemplateSpecificationType",
        "description": "Specification for a VDC template using the AllocationPool allocation model.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VMWVdcTemplateSpecificationType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "VMWAllocationVappVdcTemplateSpecificationType": {
        "title": "VMWAllocationVappVdcTemplateSpecificationType",
        "description": "Specification for a VDC template using the AllocationVApp allocation model.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VMWVdcTemplateSpecificationType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "VMWReservationPoolVdcTemplateSpecificationType": {
        "title": "VMWReservationPoolVdcTemplateSpecificationType",
        "description": "Specification for a VDC template using the ReservationPool allocation model.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VMWVdcTemplateSpecificationType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "VMWVdcTemplateType": {
        "title": "VMWVdcTemplateType",
        "description": "A reference to a VDC template.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:EntityType"
          },
          {
            "type": "object",
            "properties": {
              "tenantName": {
                "description": "Display name of the VDC template.",
                "type": "string"
              },
              "tenantDescription": {
                "nullable": true,
                "description": "Description of the VDC template.",
                "type": "string"
              },
              "providerVdcReference": {
                "description": "A reference to a Provider VDC from which this organization VDC can be provisioned.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VMWVdcTemplateProviderVdcSpecificationType"
                }
              },
              "vdcTemplateSpecification": {
                "readOnly": true,
                "description": "A reference to the specification for a VDC template object.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VMWVdcTemplateSpecificationType"
                  }
                ]
              }
            },
            "required": [
              "tenantName",
              "tenantDescription",
              "providerVdcReference",
              "vdcTemplateSpecification"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VMWVdcTemplateProviderVdcSpecificationType": {
        "title": "VMWVdcTemplateProviderVdcSpecificationType",
        "description": "A reference to a Provider VDC.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ReferenceType"
          },
          {
            "type": "object",
            "properties": {
              "binding": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VMWVdcTemplateBindingType"
                }
              }
            },
            "required": [
              "binding"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VMWVdcTemplateBindingType": {
        "title": "VMWVdcTemplateBindingType",
        "description": "A Binding pairs a Name element that contains a user\\-specified identifier in URN format with a Value element that contains a reference to an object. The Name can then be used anywhere in the request where a reference to that type of object is allowed. For example, when specifying multiple Provider VDCs in a VMWVdcTemplate, create a Binding where the Value is a reference to an external network in a candidate Provider VDC, then use the Name from that binding in place of the href attribute required by the Network element in the GatewayConfiguration of the VdcTemplateSpecification. When the template is instantiated, the Name is replaced by the network reference in the Value part of the Binding associated with the Provider VDC that the system selects during instantiation.",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "format": "uri"
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/vcloud:ReferenceType"
              }
            ]
          }
        },
        "required": [
          "name",
          "value"
        ],
        "additionalProperties": false
      },
      "VMWVdcTemplatesType": {
        "title": "VMWVdcTemplatesType",
        "description": "Container for VMWVdcTemplateType",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "vMWVdcTemplate": {
                "readOnly": true,
                "description": "A reference to a VDC template object.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VMWVdcTemplateType"
                }
              }
            },
            "required": [
              "vMWVdcTemplate"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VMWVdcTemplateListType": {
        "title": "VMWVdcTemplateListType",
        "description": "Represents a list of VDC templates.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "vMWVdcTemplate": {
                "readOnly": true,
                "description": "Reference to a VDC template.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/vcloud:ReferenceType"
                }
              }
            },
            "required": [
              "vMWVdcTemplate"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VMWHostGroupType": {
        "title": "VMWHostGroupType",
        "description": "HostGroup identifies a list of references to hosts in this resource pool to which VM\\-Host affinity rules can apply. VM\\-Host affinity rules determine placement of virtual machines on hosts in a cluster.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:EntityType"
          },
          {
            "type": "object",
            "properties": {
              "hosts": {
                "nullable": true,
                "description": "List of hosts in this host group",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VMWHostReferencesType"
                  }
                ]
              }
            },
            "required": [
              "hosts"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VMWHostGroupsType": {
        "title": "VMWHostGroupsType",
        "description": "List of host groups in this resource pool.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "hostGroup": {
                "readOnly": true,
                "description": "List of host groups in this resource pool.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VMWHostGroupType"
                }
              }
            },
            "required": [
              "hostGroup"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VMWVmHostAffinityRuleType": {
        "title": "VMWVmHostAffinityRuleType",
        "description": "A VM\\-Host affinity rule controls the placement of VMs on hosts.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:AffinityRuleType"
          },
          {
            "type": "object",
            "properties": {
              "hostGroupName": {
                "nullable": true,
                "description": "The name of Host group on which virtual machines defined in VmGroupName may or may not be placed.",
                "type": "string"
              },
              "vmGroupName": {
                "nullable": true,
                "description": "The name of the Virtual Machine group to which this rule applies.",
                "type": "string"
              }
            },
            "required": [
              "hostGroupName",
              "vmGroupName"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VMWVmHostAffinityRulesType": {
        "title": "VMWVmHostAffinityRulesType",
        "description": "VmHostAffinityRules in this resource pool.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "vmHostAffinityRule": {
                "description": "A VM\\-Host affinity rule controls the placement of VMs on hosts.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VMWVmHostAffinityRuleType"
                }
              }
            },
            "required": [
              "vmHostAffinityRule"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VMWNamedVmGroupType": {
        "title": "VMWNamedVmGroupType",
        "description": "Container for references to VM Groups in the system that have identical names. Affinity between a VM Group and a host is based on the group name, so all VM groups with identical names are subject to the same set of affinity rules.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "vMWVmGroupReferences": {
                "readOnly": true,
                "description": "References to VM Groups that have identical names.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VMWVmGroupReferencesType"
                  }
                ]
              }
            },
            "required": [
              "vMWVmGroupReferences"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VMWVmGroupReferencesType": {
        "title": "VMWVmGroupReferencesType",
        "description": "References to VM Groups that have identical names.",
        "type": "object",
        "properties": {
          "vmGroupReference": {
            "readOnly": true,
            "description": "Reference to a VM group.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/vcloud:ReferenceType"
            }
          }
        },
        "required": [
          "vmGroupReference"
        ],
        "additionalProperties": false
      },
      "VMWVmGroupType": {
        "title": "VMWVmGroupType",
        "description": "VmGroup identifies a group of VMs in this resource pool to which VM\\-Host affinity rules can be applied. VM\\-Host affinity rules control placement of virtual machines on hosts in a resource pool.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:EntityType"
          },
          {
            "type": "object",
            "properties": {
              "vmCount": {
                "nullable": true,
                "description": "Number of VMs in this VM group",
                "type": "integer",
                "format": "int32"
              }
            },
            "required": [
              "vmCount"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VMWVmGroupsType": {
        "title": "VMWVmGroupsType",
        "description": "List of VM groups in this resource pool.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "vmGroup": {
                "description": "List of vm groups in this resource pool.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VMWVmGroupType"
                }
              }
            },
            "required": [
              "vmGroup"
            ],
            "additionalProperties": false
          }
        ]
      },
      "DatastoresType": {
        "title": "DatastoresType",
        "description": "Represents a list of datastores.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "datastore": {
                "readOnly": true,
                "description": "Reference to a datastore.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/vcloud:ReferenceType"
                }
              }
            },
            "required": [
              "datastore"
            ],
            "additionalProperties": false
          }
        ]
      },
      "TenantMigrationParamsType": {
        "title": "TenantMigrationParamsType",
        "description": "Represents parameters for moving tenant entities.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:ParamsType"
          },
          {
            "type": "object",
            "properties": {
              "orgs": {
                "description": "List of organizations to be migrated in this operation",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vcloud:OrgsType"
                  }
                ]
              },
              "sourceDatastores": {
                "description": "List of datastores from which organization storage resources should be migrated",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DatastoresType"
                  }
                ]
              },
              "targetDatastores": {
                "description": "List of datastores to which organization storage resources should be migrated",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DatastoresType"
                  }
                ]
              }
            },
            "required": [
              "orgs",
              "sourceDatastores",
              "targetDatastores"
            ],
            "additionalProperties": false
          }
        ]
      },
      "CatalogType": {
        "title": "CatalogType",
        "description": "Represents the user view of a Catalog object.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityType"
          },
          {
            "type": "object",
            "properties": {
              "owner": {
                "nullable": true,
                "readOnly": true,
                "description": "Catalog owner.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OwnerType"
                  }
                ]
              },
              "catalogItems": {
                "nullable": true,
                "description": "Container for CatalogItem elements.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CatalogItemsType"
                  }
                ]
              },
              "isPublished": {
                "nullable": true,
                "description": "True if the catalog is shared with all other organizations in the system. This value is read\\-only in the user view. To modify it, an administrator must use the publish link in the admin view of the catalog.",
                "type": "boolean"
              },
              "dateCreated": {
                "nullable": true,
                "readOnly": true,
                "description": "Creation date and time of the catalog.",
                "type": "string",
                "format": "date-time"
              },
              "versionNumber": {
                "nullable": true,
                "readOnly": true,
                "description": "Represents the current version number of the catalog.",
                "type": "integer",
                "format": "int64"
              }
            },
            "required": [
              "owner",
              "catalogItems",
              "isPublished",
              "dateCreated",
              "versionNumber"
            ],
            "additionalProperties": false
          }
        ]
      },
      "CopyOrMoveCatalogItemParamsType": {
        "title": "CopyOrMoveCatalogItemParamsType",
        "description": "Parameters for a copyCatalogItem or moveCatalogItem request.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ParamsType"
          },
          {
            "type": "object",
            "properties": {
              "source": {
                "description": "Reference to the source catalog item to copy or move from.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              }
            },
            "required": [
              "source"
            ],
            "additionalProperties": false
          }
        ]
      },
      "PublishCatalogParamsType": {
        "title": "PublishCatalogParamsType",
        "description": "Parameters required when sharing a catalog with other organizations.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "isPublished": {
                "description": "A value of true makes this catalog available to the administrators in all other organizations in the system. A value of false revokes that availability. To share this catalog in your own organization, use controlAccess.",
                "type": "boolean"
              }
            },
            "required": [
              "isPublished"
            ],
            "additionalProperties": false
          }
        ]
      },
      "CatalogItemType": {
        "title": "CatalogItemType",
        "description": "Contains a reference to a VappTemplate or Media object and related metadata.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityType"
          },
          {
            "type": "object",
            "properties": {
              "size": {
                "description": "Size of the catalog item, in bytes. It is optional for a vApp template.",
                "type": "integer",
                "format": "int64"
              },
              "entity": {
                "description": "A reference to a VAppTemplate or Media object.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "property": {
                "description": "User\\-specified key/value pair. This element has been superseded by the Metadata element, which is the preferred way to specify key/value pairs for objects.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PropertyType"
                }
              },
              "dateCreated": {
                "nullable": true,
                "readOnly": true,
                "description": "Creation date and time of the catalog item.",
                "type": "string",
                "format": "date-time"
              },
              "versionNumber": {
                "nullable": true,
                "readOnly": true,
                "description": "Represents the current version number of the catalog item",
                "type": "integer",
                "format": "int64"
              }
            },
            "required": [
              "size",
              "entity",
              "property",
              "dateCreated",
              "versionNumber"
            ],
            "additionalProperties": false
          }
        ]
      },
      "CatalogItemsType": {
        "title": "CatalogItemsType",
        "description": "Container for references to catalog items.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "catalogItem": {
                "readOnly": true,
                "description": "Reference to a catalog item.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReferenceType"
                }
              }
            },
            "required": [
              "catalogItem"
            ],
            "additionalProperties": false
          }
        ]
      },
      "PropertyType": {
        "title": "PropertyType",
        "description": "Contains key/value pair as property.",
        "type": "object",
        "additionalProperties": false
      },
      "VCloudExtensionType": {
        "title": "VCloudExtensionType",
        "description": "General purpose extension element. Not related to extension services.",
        "type": "object",
        "additionalProperties": false
      },
      "VCloudExtensibleType": {
        "title": "VCloudExtensibleType",
        "description": "A base abstract type for all complex types that support extensions.",
        "type": "object",
        "properties": {
          "vCloudExtension": {
            "description": "An optional extension element that can contain an arbitrary number of elements and attributes. Not related to extension services.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VCloudExtensionType"
            }
          }
        },
        "required": [
          "vCloudExtension"
        ],
        "additionalProperties": false
      },
      "ErrorType": {
        "title": "ErrorType",
        "description": "The standard error message type used in the vCloud REST API.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "stackTrace": {
                "readOnly": true,
                "description": "The stack trace of the exception.",
                "type": "string"
              },
              "tenantError": {
                "nullable": true,
                "readOnly": true,
                "description": "The tenant view of the error, when the containing error is an administrator view of the error.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TenantErrorType"
                  }
                ]
              }
            },
            "required": [
              "stackTrace",
              "tenantError"
            ],
            "additionalProperties": false
          }
        ]
      },
      "TenantErrorType": {
        "title": "TenantErrorType",
        "description": "The tenant view of the error, when the containing error is an administrator view of the error.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ResultType": {
        "title": "ResultType",
        "description": "The result of operations.",
        "type": "object",
        "properties": {
          "resultContent": {
            "nullable": true,
            "description": "An optional element that can be used to hold the result of operations.",
            "type": "string"
          }
        },
        "required": [
          "resultContent"
        ],
        "additionalProperties": false
      },
      "LinkType": {
        "title": "LinkType",
        "description": "Extends reference type by adding relation attribute. Defines a hyper\\-link with a relationship, hyper\\-link reference, and an optional MIME type.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ReferenceType"
          },
          {
            "type": "object",
            "properties": {
              "rel": {
                "description": "Defines the relationship of the link to the object that contains it. A relationship can be the name of an operation on the object, a reference to a contained or containing object, or a reference to an alternate representation of the object. The relationship value implies the HTTP verb to use when you use the link's href as a request URL. See the vCloud API Programming Guide for a list of links and link relations.",
                "type": "string"
              }
            },
            "required": [
              "rel"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ResourceType": {
        "title": "ResourceType",
        "description": "The base type for all objects in the vCloud model. Has an optional list of links and href and type attributes.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "href": {
                "description": "The URI of the entity.",
                "type": "string",
                "format": "uri"
              },
              "type": {
                "description": "The MIME type of the entity.",
                "type": "string"
              },
              "link": {
                "readOnly": true,
                "description": "A reference to an entity or operation associated with this object.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LinkType"
                }
              }
            },
            "required": [
              "href",
              "type",
              "link"
            ],
            "additionalProperties": false
          }
        ]
      },
      "IdentifiableResourceType": {
        "title": "IdentifiableResourceType",
        "description": "The base type for all resource types which contain an id attribute.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "readOnly": true,
                "description": "The entity identifier, expressed in URN format. The value of this attribute uniquely identifies the entity, persists for the life of the entity, and is never reused.",
                "type": "string"
              },
              "operationKey": {
                "description": "Optional unique identifier to support idempotent semantics for create and delete operations.",
                "type": "string"
              }
            },
            "required": [
              "id",
              "operationKey"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ParamsType": {
        "title": "ParamsType",
        "description": "A basic type used to specify request parameters.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "description": "Typically used to name or identify the subject of the request. For example, the name of the object being created or modified.",
                "type": "string"
              },
              "description": {
                "nullable": true,
                "description": "Optional description.",
                "type": "string"
              }
            },
            "required": [
              "name",
              "description"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ReferenceType": {
        "title": "ReferenceType",
        "description": "A reference to a resource. Contains an href attribute and optional name and type attributes.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "href": {
                "description": "Contains the URI to the entity.",
                "type": "string",
                "format": "uri"
              },
              "id": {
                "description": "The resource identifier, expressed in URN format. The value of this attribute uniquely identifies the resource, persists for the life of the resource, and is never reused.",
                "type": "string"
              },
              "type": {
                "description": "Contains the type of the the entity.",
                "type": "string"
              },
              "name": {
                "description": "Contains the name of the the entity.",
                "type": "string"
              }
            },
            "required": [
              "href",
              "id",
              "type",
              "name"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ResourceReferenceType": {
        "title": "ResourceReferenceType",
        "description": "Represents a reference to a resource. Contains an href attribute, a resource status attribute, and optional name and type attributes.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ReferenceType"
          },
          {
            "type": "object",
            "properties": {
              "status": {
                "readOnly": true,
                "description": "Status of a resource.",
                "type": "integer",
                "format": "int32"
              }
            },
            "required": [
              "status"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ContainerType": {
        "title": "ContainerType",
        "description": "Container for query result sets.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "Query name that generated this result set.",
                "type": "string"
              },
              "page": {
                "readOnly": true,
                "description": "Page of the result set that this container holds. The first page is page number 1.",
                "type": "integer",
                "format": "int32"
              },
              "pageSize": {
                "readOnly": true,
                "description": "Page size, as a number of records or references.",
                "type": "integer",
                "format": "int32"
              },
              "total": {
                "readOnly": true,
                "description": "Total number of records or references in the container.",
                "type": "integer",
                "format": "int64"
              }
            },
            "required": [
              "name",
              "page",
              "pageSize",
              "total"
            ],
            "additionalProperties": false
          }
        ]
      },
      "CapacityType": {
        "title": "CapacityType",
        "description": "Represents the capacity of a given resource.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "units": {
                "readOnly": true,
                "description": "Units in which capacity is allocated. For CPU capacity, one of:  \n MHz  \n GHz  \n For memory capacity, one of:  \n MB  \n GB",
                "type": "string"
              },
              "allocated": {
                "nullable": true,
                "readOnly": true,
                "description": "Capacity that is committed to be available.",
                "type": "integer",
                "format": "int64"
              },
              "limit": {
                "readOnly": true,
                "description": "Capacity limit relative to the value specified for Allocation. It must not be less than that value. If it is greater than that value, it implies overprovisioning.",
                "type": "integer",
                "format": "int64"
              }
            },
            "required": [
              "units",
              "allocated",
              "limit"
            ],
            "additionalProperties": false
          }
        ]
      },
      "CapacityWithUsageType": {
        "title": "CapacityWithUsageType",
        "description": "Represents a capacity and usage of a given resource.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CapacityType"
          },
          {
            "type": "object",
            "properties": {
              "reserved": {
                "nullable": true,
                "readOnly": true,
                "description": "Capacity reserved.",
                "type": "integer",
                "format": "int64"
              },
              "used": {
                "nullable": true,
                "readOnly": true,
                "description": "Capacity used. If the VDC AllocationModel is ReservationPool, this number represents the percentage of the reservation that is in use. For all other allocation models, it represents the percentage of the allocation that is in use.",
                "type": "integer",
                "format": "int64"
              },
              "overhead": {
                "nullable": true,
                "readOnly": true,
                "description": "Number of Units allocated to system resources such as vShield Manager virtual machines and shadow virtual machines provisioned from this Provider vDC.",
                "type": "integer",
                "format": "int64"
              }
            },
            "required": [
              "reserved",
              "used",
              "overhead"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AccessSettingType": {
        "title": "AccessSettingType",
        "description": "Controls access to the resource.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "accessLevel": {
                "description": "The access level for the subject. One of:  \n FullControl  \n Change  \n ReadOnly  \n Deny (only for a VDC resource)",
                "type": "string"
              }
            },
            "required": [
              "accessLevel"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ExternalSubjectType": {
        "title": "ExternalSubjectType",
        "description": "A reference to a user or group managed by an identity provider configured for use in this organization.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "subjectId": {
                "description": "The primary key that your identity provider uses to uniquely identify the user or group referenced in SubjectId.",
                "type": "string"
              },
              "isUser": {
                "description": "If true, SubjectID is a reference to a user defined by this organization's identity provider. If false or empty, SubjectID is a reference to a group defined by this organization's identity provider.",
                "type": "boolean"
              },
              "idpType": {
                "description": "The type of identity provider for example: OAUTH, SAML, LDAP etc for this SubjectID.",
                "type": "string"
              }
            },
            "required": [
              "subjectId",
              "isUser",
              "idpType"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AccessSettingsType": {
        "title": "AccessSettingsType",
        "description": "A list of access settings for a resource.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "accessSetting": {
                "description": "Access setting for a resource.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccessSettingType"
                }
              }
            },
            "required": [
              "accessSetting"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ControlAccessParamsType": {
        "title": "ControlAccessParamsType",
        "description": "Specifies access controls for a resource.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "isSharedToEveryone": {
                "description": "If true, the resource is shared with everyone in the organization. Defaults to false.",
                "type": "boolean"
              },
              "everyoneAccessLevel": {
                "nullable": true,
                "description": "If IsSharedToEveryone is true, this element must be present to specify the access level. for all members of the organization. One of:  \n FullControl  \n Change  \n ReadOnly",
                "type": "string"
              },
              "accessSettings": {
                "nullable": true,
                "description": "The access settings to be applied if IsSharedToEveryone is false. Required on create and modify if IsSharedToEveryone is false.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AccessSettingsType"
                  }
                ]
              }
            },
            "required": [
              "isSharedToEveryone",
              "everyoneAccessLevel",
              "accessSettings"
            ],
            "additionalProperties": false
          }
        ]
      },
      "OwnerType": {
        "title": "OwnerType",
        "description": "Represents the owner of this entity.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "user": {
                "readOnly": true,
                "description": "Reference to the user who is the owner of this entity.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              }
            },
            "required": [
              "user"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ReferencesType": {
        "title": "ReferencesType",
        "description": "Container for query results returned in references format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ContainerType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "QueryListType": {
        "title": "QueryListType",
        "description": "Container for the list of typed queries available to the requesting user.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ContainerType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "MetadataDomainTagType": {
        "title": "MetadataDomainTagType",
        "description": "A value of SYSTEM places this MetadataEntry in the SYSTEM domain. Omit or leave empty to place this MetadataEntry in the GENERAL domain.",
        "type": "object",
        "additionalProperties": false
      },
      "MetadataTypedValue": {
        "title": "MetadataTypedValue",
        "description": "One of:  \n MetadataStringValue  \n MetadataNumberValue  \n MetadataBooleanValue  \n MetadataDateTimeValue",
        "type": "object",
        "additionalProperties": false
      },
      "MetadataStringValue": {
        "title": "MetadataStringValue",
        "description": "UTF\\-8 character set. Strings longer than 1000 characters cannot be searched for in a query.",
        "allOf": [
          {
            "$ref": "#/components/schemas/MetadataTypedValue"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "string"
              }
            },
            "required": [
              "value"
            ],
            "additionalProperties": false
          }
        ]
      },
      "MetadataNumberValue": {
        "title": "MetadataNumberValue",
        "description": "A signed 8\\-byte integer.",
        "allOf": [
          {
            "$ref": "#/components/schemas/MetadataTypedValue"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "integer",
                "format": "int64"
              }
            },
            "required": [
              "value"
            ],
            "additionalProperties": false
          }
        ]
      },
      "MetadataBooleanValue": {
        "title": "MetadataBooleanValue",
        "description": "One of: 1, 0, true, false",
        "allOf": [
          {
            "$ref": "#/components/schemas/MetadataTypedValue"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "boolean"
              }
            },
            "required": [
              "value"
            ],
            "additionalProperties": false
          }
        ]
      },
      "MetadataDateTimeValue": {
        "title": "MetadataDateTimeValue",
        "description": "UTC format. For example 2012\\-06\\-18T12:00:00\\-05:00",
        "allOf": [
          {
            "$ref": "#/components/schemas/MetadataTypedValue"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "value"
            ],
            "additionalProperties": false
          }
        ]
      },
      "FileUploadParamsType": {
        "title": "FileUploadParamsType",
        "description": "Parameters for initializing file upload session.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "fileSize": {
                "description": "Size in bytes of the file which will be uploaded.",
                "type": "integer",
                "format": "int64"
              }
            },
            "required": [
              "fileSize"
            ],
            "additionalProperties": false
          }
        ]
      },
      "FileUploadSocketType": {
        "title": "FileUploadSocketType",
        "description": "Parameters for initiating file upload.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "uploadLocation": {
                "readOnly": true,
                "description": "URL where the file must be uploaded.",
                "type": "string"
              },
              "task": {
                "nullable": true,
                "readOnly": true,
                "description": "A task representing progress of the upload.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskType"
                  }
                ]
              }
            },
            "required": [
              "uploadLocation",
              "task"
            ],
            "additionalProperties": false
          }
        ]
      },
      "DiskType": {
        "title": "DiskType",
        "description": "Represents an independent disk.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceEntityType"
          },
          {
            "type": "object",
            "properties": {
              "size": {
                "readOnly": true,
                "description": "Size of the disk in bytes.  \n\n You must supply this attribute in an update request, but you cannot change its value after the object has been created.",
                "type": "integer",
                "format": "int64"
              },
              "iops": {
                "readOnly": true,
                "description": "IOPS request for the created disk",
                "type": "integer",
                "format": "int64"
              },
              "busType": {
                "readOnly": true,
                "description": "Disk bus type expressed as a number. One of:  \n**5** IDE bus  \n**6** SCSI bus (default)  \n**20** SATA bus  \n\n You must supply this attribute in an update request, but you cannot change its value after the object has been created.",
                "type": "string"
              },
              "busSubType": {
                "readOnly": true,
                "description": "Disk bus subtype expressed as a string. One of:  \n \"\" (null) IDE, requires busType 5  \n**buslogic** BusLogic Parallel SCSI controller, requires busType 6  \n**lsilogic** LSI Logic Parallel SCSI controller, requires busType 6  \n**lsilogicsas** LSI Logic SAS SCSI controller, requires busType 6  \n**VirtualSCSI** Paravirtual SCSI controller, requires busType 6  \n**vmware.sata.ahci** SATA controller, requires busType 20  \n\n You must supply this attribute in an update request, but you cannot change its value after the object has been created.",
                "type": "string"
              },
              "storageProfile": {
                "nullable": true,
                "description": "Storage profile of the disk.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "owner": {
                "nullable": true,
                "readOnly": true,
                "description": "The owner of the disk.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OwnerType"
                  }
                ]
              }
            },
            "required": [
              "size",
              "iops",
              "busType",
              "busSubType",
              "storageProfile",
              "owner"
            ],
            "additionalProperties": false
          }
        ]
      },
      "DiskCreateParamsType": {
        "title": "DiskCreateParamsType",
        "description": "Parameters for creating or updating an independent disk.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "disk": {
                "description": "Parameters for creating or updating an independent disk.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DiskType"
                  }
                ]
              },
              "locality": {
                "nullable": true,
                "description": "If you supply a reference to a virtual machine, the system will use that information to attempt to optimize access to this disk from that virtual machine. See [KB 2105352](http://kb.vmware.com/kb/2105352).",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              }
            },
            "required": [
              "disk",
              "locality"
            ],
            "additionalProperties": false
          }
        ]
      },
      "DiskAttachOrDetachParamsType": {
        "title": "DiskAttachOrDetachParamsType",
        "description": "Parameters for attaching or detaching an independent disk.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "disk": {
                "description": "A reference to the disk to attach or detach.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "busNumber": {
                "nullable": true,
                "description": "Bus number on which to place the disk controller. If empty or missing, the system assigns a bus number and a unit number on that bus.",
                "type": "integer",
                "format": "int32"
              },
              "unitNumber": {
                "nullable": true,
                "description": "Unit number (slot) on the bus specified by BusNumber. Ignored if BusNumber is empty or missing.",
                "type": "integer",
                "format": "int32"
              }
            },
            "required": [
              "disk",
              "busNumber",
              "unitNumber"
            ],
            "additionalProperties": false
          }
        ]
      },
      "EntityType": {
        "title": "EntityType",
        "description": "Basic entity type in the vCloud object model. Includes a name, an optional description, and an optional list of links.",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentifiableResourceType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "description": "The name of the entity.",
                "type": "string"
              },
              "description": {
                "nullable": true,
                "description": "Optional description.",
                "type": "string"
              },
              "tasks": {
                "nullable": true,
                "readOnly": true,
                "description": "A list of queued, running, or recently completed tasks associated with this entity.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TasksInProgressType"
                  }
                ]
              }
            },
            "required": [
              "name",
              "description",
              "tasks"
            ],
            "additionalProperties": false
          }
        ]
      },
      "EntityReferenceType": {
        "title": "EntityReferenceType",
        "description": "A reference to a vCloud entity.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "readOnly": true,
                "description": "The object identifier, expressed in URN format. The value of this attribute uniquely identifies the object, persists for the life of the object, and is never reused. This context\\-free identifier can apply to any object in any system.",
                "type": "string"
              },
              "type": {
                "description": "The type of the the referenced object.",
                "type": "string"
              },
              "name": {
                "description": "The name of the referenced object.",
                "type": "string"
              }
            },
            "required": [
              "id",
              "type",
              "name"
            ],
            "additionalProperties": false
          }
        ]
      },
      "EntityLinkType": {
        "title": "EntityLinkType",
        "description": "Extends EntityReference type by adding relation attribute.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityReferenceType"
          },
          {
            "type": "object",
            "properties": {
              "rel": {
                "description": "Defines the relationship of the link to the object that contains it. A relationship can be the name of an operation on the object, a reference to a contained or containing object, or a reference to an alternate representation of the object. The relationship value implies the HTTP verb to use when you use the link's href value as a request URL.",
                "type": "string"
              }
            },
            "required": [
              "rel"
            ],
            "additionalProperties": false
          }
        ]
      },
      "TasksInProgressType": {
        "title": "TasksInProgressType",
        "description": "A list of queued, running, or recently completed tasks.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "task": {
                "readOnly": true,
                "description": "A task.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TaskType"
                }
              }
            },
            "required": [
              "task"
            ],
            "additionalProperties": false
          }
        ]
      },
      "FileType": {
        "title": "FileType",
        "description": "Represents a file to be transferred (uploaded or downloaded).",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityType"
          },
          {
            "type": "object",
            "properties": {
              "size": {
                "readOnly": true,
                "description": "File size in bytes.",
                "type": "integer",
                "format": "int64"
              },
              "bytesTransferred": {
                "readOnly": true,
                "description": "Bytes that have been transferred.",
                "type": "integer",
                "format": "int64"
              },
              "checksum": {
                "readOnly": true,
                "description": "The checksum of the file.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/xs:normalizedString"
                  }
                ]
              }
            },
            "required": [
              "size",
              "bytesTransferred",
              "checksum"
            ],
            "additionalProperties": false
          }
        ]
      },
      "HybridOrgType": {
        "title": "HybridOrgType",
        "description": "Lists links to hybrid operations and entities in the context of an Org.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ToCloudTunnelCreateParamsType": {
        "title": "ToCloudTunnelCreateParamsType",
        "description": "Parameters for creating to\\-the\\-cloud tunnel",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "trafficType": {
                "description": "Opaque string indicating the type of traffic (for example, \"HBR\")",
                "type": "string"
              },
              "destinationId": {
                "description": "Opaque string identifying the destination server in the cloud",
                "type": "string"
              },
              "sourceId": {
                "nullable": true,
                "description": "A UUID identifying the vCTA on\\-premise",
                "type": "string"
              }
            },
            "required": [
              "trafficType",
              "destinationId",
              "sourceId"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ToCloudTunnelType": {
        "title": "ToCloudTunnelType",
        "description": "Describes to\\-the\\-cloud tunnel",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityType"
          },
          {
            "type": "object",
            "properties": {
              "trafficType": {
                "description": "Opaque string indicating the type of traffic (for example, \"HBR\")",
                "type": "string"
              },
              "destinationId": {
                "description": "Opaque string identifying the destination server in the cloud",
                "type": "string"
              },
              "sourceId": {
                "nullable": true,
                "description": "A UUID identifying the vCTA on\\-premise",
                "type": "string"
              }
            },
            "required": [
              "trafficType",
              "destinationId",
              "sourceId"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AdminToCloudTunnelType": {
        "title": "AdminToCloudTunnelType",
        "description": "Describes the administrator view of a to\\-the\\-cloud tunnel",
        "allOf": [
          {
            "$ref": "#/components/schemas/ToCloudTunnelType"
          },
          {
            "type": "object",
            "properties": {
              "destinationIpAddress": {
                "readOnly": true,
                "description": "The IP address of the destination server in the cloud",
                "type": "string"
              },
              "destinationPort": {
                "readOnly": true,
                "description": "The port number of the destination server in the cloud",
                "type": "integer",
                "format": "int32"
              },
              "useSsl": {
                "readOnly": true,
                "description": "Whether SSL protocol is used by the destination server in the cloud",
                "type": "boolean"
              }
            },
            "required": [
              "destinationIpAddress",
              "destinationPort",
              "useSsl"
            ],
            "additionalProperties": false
          }
        ]
      },
      "FromCloudTunnelCreateParamsType": {
        "title": "FromCloudTunnelCreateParamsType",
        "description": "Parameters for creating from\\-the\\-cloud tunnel",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "trafficType": {
                "description": "Opaque string indicating the type of traffic (for example, \"HBR\")",
                "type": "string"
              },
              "destinationId": {
                "description": "Opaque string identifying the destination server on tenant premises",
                "type": "string"
              },
              "endpointTag": {
                "nullable": true,
                "description": "Opaque string identifying if a tunnel can have a shared port. If this value is not set, then the tunnel will be assigned an unique port",
                "type": "string"
              },
              "sourceId": {
                "nullable": true,
                "description": "A UUID identifying the vCTA on\\-premise",
                "type": "string"
              }
            },
            "required": [
              "trafficType",
              "destinationId",
              "endpointTag",
              "sourceId"
            ],
            "additionalProperties": false
          }
        ]
      },
      "FromCloudTunnelType": {
        "title": "FromCloudTunnelType",
        "description": "Describes from\\-the\\-cloud tunnel",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityType"
          },
          {
            "type": "object",
            "properties": {
              "trafficType": {
                "description": "Opaque string indicating the type of traffic (for example, \"HBR\")",
                "type": "string"
              },
              "destinationId": {
                "description": "Opaque string identifying the destination server on tenant premises",
                "type": "string"
              },
              "endpointTag": {
                "nullable": true,
                "description": "Opaque string identifying if a tunnel can have a shared port. If this value is not set, then the tunnel will be assigned an unique port",
                "type": "string"
              },
              "sourceId": {
                "nullable": true,
                "description": "A UUID identifying the vCTA on\\-premise",
                "type": "string"
              }
            },
            "required": [
              "trafficType",
              "destinationId",
              "endpointTag",
              "sourceId"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AdminFromCloudTunnelType": {
        "title": "AdminFromCloudTunnelType",
        "description": "Describes the administrator view of a from\\-the\\-cloud tunnel",
        "allOf": [
          {
            "$ref": "#/components/schemas/FromCloudTunnelType"
          },
          {
            "type": "object",
            "properties": {
              "tunnelEndPoint": {
                "readOnly": true,
                "description": "IP address and port to access the tunnel in the form of [ip\\-address]:[port].",
                "type": "string"
              }
            },
            "required": [
              "tunnelEndPoint"
            ],
            "additionalProperties": false
          }
        ]
      },
      "FromCloudTunnelListenerCreateParamsType": {
        "title": "FromCloudTunnelListenerCreateParamsType",
        "description": "Parameters for creating from\\-the\\-cloud tunnel listener",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "FromCloudTunnelListenerType": {
        "title": "FromCloudTunnelListenerType",
        "description": "Properties of a from\\-the\\-cloud tunnel listener. A from\\-the\\-cloud listener associates a port with a particular (traffic type, endpoint tag) tuple. Ports are unique and (traffic type, endpoint tag) tuples are unique.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "FromCloudTunnelListenerListType": {
        "title": "FromCloudTunnelListenerListType",
        "description": "A list of the existing from\\-the\\-cloud tunnel listeners.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ContainerType"
          },
          {
            "type": "object",
            "properties": {
              "fromCloudTunnelListener": {
                "readOnly": true,
                "description": "From\\-the\\-cloud tunnel listener",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FromCloudTunnelListenerType"
                }
              }
            },
            "required": [
              "fromCloudTunnelListener"
            ],
            "additionalProperties": false
          }
        ]
      },
      "HybridTicketType": {
        "title": "HybridTicketType",
        "description": "Ticket for establishing a connection to Cloud Proxy.",
        "type": "object",
        "additionalProperties": false
      },
      "TunnelingApplicationRegisterParamsType": {
        "title": "TunnelingApplicationRegisterParamsType",
        "description": "Parameters for registering cloud part of the tunneling application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "trafficType": {
                "description": "Opaque string identifying the type of traffic supported by the tunneling application",
                "type": "string"
              },
              "routingKey": {
                "description": "AMQP routing key for this tunneling application",
                "type": "string"
              },
              "exchange": {
                "description": "AMQP exchange that messages for this tunneling application are published to",
                "type": "string"
              }
            },
            "required": [
              "trafficType",
              "routingKey",
              "exchange"
            ],
            "additionalProperties": false
          }
        ]
      },
      "TunnelingApplicationType": {
        "title": "TunnelingApplicationType",
        "description": "Describes cloud part of a tunneling application registered with VCD.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityType"
          },
          {
            "type": "object",
            "properties": {
              "trafficType": {
                "readOnly": true,
                "description": "Opaque string identifying the type of traffic supported by the tunneling application",
                "type": "string"
              },
              "routingKey": {
                "readOnly": true,
                "description": "AMQP routing key for this tunneling application",
                "type": "string"
              },
              "exchange": {
                "readOnly": true,
                "description": "AMQP exchange that messages for this tunneling application are published to",
                "type": "string"
              }
            },
            "required": [
              "trafficType",
              "routingKey",
              "exchange"
            ],
            "additionalProperties": false
          }
        ]
      },
      "TunnelingApplicationListType": {
        "title": "TunnelingApplicationListType",
        "description": "A list of registered tunneling applications.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ContainerType"
          },
          {
            "type": "object",
            "properties": {
              "tunnelingApplication": {
                "readOnly": true,
                "description": "Tunneling application",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TunnelingApplicationType"
                }
              }
            },
            "required": [
              "tunnelingApplication"
            ],
            "additionalProperties": false
          }
        ]
      },
      "HybridSettingsType": {
        "title": "HybridSettingsType",
        "description": "Public URL and certificate of the Cloud Proxy end point.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "cloudProxyBaseUri": {
                "nullable": true,
                "readOnly": true,
                "description": "Effective base URI for Cloud Proxy (wss) endpoint. By default this value is the same as the base URI for API endpoint. This value can be overridden by specifying CloudProxyBaseUriOverride.",
                "type": "string"
              },
              "cloudProxyBaseUriPublicCertChain": {
                "nullable": true,
                "readOnly": true,
                "description": "Effective SSL public certificate chain for the effective base URI for Cloud Proxy (wss) endpoint. The certificate chain is PEM encoded X.509 certificates. By default this value is the same as the public certificate chain for the API endpoint. This value can be overridden by specifying CloudProxyBaseUriPublicCertChainOverride. This value will be empty if URI is overridden but certificate is not.",
                "type": "string"
              },
              "cloudProxyBaseUriOverride": {
                "nullable": true,
                "description": "Base URI for Cloud Proxy (wss) endpoint. Leave empty to use the default.",
                "type": "string"
              },
              "cloudProxyBaseUriPublicCertChainOverride": {
                "nullable": true,
                "description": "SSL public certificate chain for the base URI for Cloud Proxy (wss) endpoint. The certificate chain must be PEM encoded X.509 certificates. A Base URI override must be specified if this value is included in a request.",
                "type": "string"
              },
              "cloudProxyFromCloudTunnelHost": {
                "nullable": true,
                "readOnly": true,
                "description": "IP address or hostname of the effective host used for from\\-the\\-cloud tunnels.",
                "type": "string"
              },
              "cloudProxyFromCloudTunnelHostOverride": {
                "nullable": true,
                "readOnly": true,
                "description": "IP address or hostname of the host used for from\\-the\\-cloud tunnels. Leave empty to use default.",
                "type": "string"
              }
            },
            "required": [
              "cloudProxyBaseUri",
              "cloudProxyBaseUriPublicCertChain",
              "cloudProxyBaseUriOverride",
              "cloudProxyBaseUriPublicCertChainOverride",
              "cloudProxyFromCloudTunnelHost",
              "cloudProxyFromCloudTunnelHostOverride"
            ],
            "additionalProperties": false
          }
        ]
      },
      "MediaType": {
        "title": "MediaType",
        "description": "Represents a Media object.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceEntityType"
          },
          {
            "type": "object",
            "properties": {
              "imageType": {
                "description": "Media image type. One of: iso, floppy",
                "type": "string"
              },
              "size": {
                "description": "Size of the media file, in bytes.",
                "type": "integer",
                "format": "int64"
              },
              "owner": {
                "nullable": true,
                "readOnly": true,
                "description": "Media owner.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OwnerType"
                  }
                ]
              },
              "vdcStorageProfile": {
                "nullable": true,
                "description": "A reference to a storage profile to be used for this object. The specified storage profile must exist in the organization vDC that contains the object. If not specified, the default storage profile for the vDC is used.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              }
            },
            "required": [
              "imageType",
              "size",
              "owner",
              "vdcStorageProfile"
            ],
            "additionalProperties": false
          }
        ]
      },
      "CloneMediaParamsType": {
        "title": "CloneMediaParamsType",
        "description": "Parameters required by a cloneMedia request.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ParamsType"
          },
          {
            "type": "object",
            "properties": {
              "source": {
                "description": "Reference to a media object to copy.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "isSourceDelete": {
                "nullable": true,
                "description": "A value of true deletes the Source object after successful completion of the copy operation. Defaults to false if empty or missing.",
                "type": "boolean"
              },
              "vdcStorageProfile": {
                "nullable": true,
                "description": "A reference to a storage profile to be used for this object. The specified storage profile must exist in the organization vDC that contains the object. If not specified, the default storage profile for the vDC is used.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              }
            },
            "required": [
              "source",
              "isSourceDelete",
              "vdcStorageProfile"
            ],
            "additionalProperties": false
          }
        ]
      },
      "RelativeTimeType": {
        "title": "RelativeTimeType",
        "description": "Specifies an earlier time relative to the current time",
        "allOf": [
          {
            "$ref": "#/components/schemas/TimeType"
          },
          {
            "type": "object",
            "properties": {
              "interval": {
                "description": "numeric portion of time specification",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/xs:short"
                  }
                ]
              },
              "unit": {
                "description": "time unit enumeration value",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimeUnitType"
                  }
                ]
              }
            },
            "required": [
              "interval",
              "unit"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AbsoluteTimeType": {
        "title": "AbsoluteTimeType",
        "description": "Specifies an absolute time in UTC",
        "allOf": [
          {
            "$ref": "#/components/schemas/TimeType"
          },
          {
            "type": "object",
            "properties": {
              "time": {
                "description": "absolute UTC time value",
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "time"
            ],
            "additionalProperties": false
          }
        ]
      },
      "SimpleMetricType": {
        "title": "SimpleMetricType",
        "description": "A simple scalar metric value",
        "type": "object",
        "additionalProperties": false
      },
      "SampleType": {
        "title": "SampleType",
        "description": "Represents a data point in a metric series",
        "type": "object",
        "additionalProperties": false
      },
      "TimeSeriesMetricType": {
        "title": "TimeSeriesMetricType",
        "description": "A sequence of metric values measured at specified times",
        "type": "object",
        "properties": {
          "sample": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SampleType"
            }
          }
        },
        "required": [
          "sample"
        ],
        "additionalProperties": false
      },
      "CurrentUsageSpecType": {
        "title": "CurrentUsageSpecType",
        "description": "Specifies which current usage metrics to retrieve",
        "type": "object",
        "properties": {
          "metricPattern": {
            "description": "A metric name pattern. Asterisk matches any character or group of characters in a metric name.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "metricPattern"
        ],
        "additionalProperties": false
      },
      "CurrentUsageType": {
        "title": "CurrentUsageType",
        "description": "A collection of simple metrics representing real time usage statistics",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "metric": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SimpleMetricType"
                }
              }
            },
            "required": [
              "metric"
            ],
            "additionalProperties": false
          }
        ]
      },
      "HistoricUsageSpecType": {
        "title": "HistoricUsageSpecType",
        "description": "Specifies which historic usage metrics to retrieve",
        "type": "object",
        "properties": {
          "metricPattern": {
            "description": "A metric name pattern. Asterisk matches any character or group of characters in a metric name.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "metricPattern"
        ],
        "additionalProperties": false
      },
      "HistoricUsageType": {
        "title": "HistoricUsageType",
        "description": "A collection of time\\-based metrics representing historic usage statistics",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "metricSeries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TimeSeriesMetricType"
                }
              }
            },
            "required": [
              "metricSeries"
            ],
            "additionalProperties": false
          }
        ]
      },
      "MksTicketType": {
        "title": "MksTicketType",
        "description": "A ticket and connection information for accessing the console of a VM.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "host": {
                "readOnly": true,
                "description": "host (or proxy) through which the console connection is made",
                "type": "string"
              },
              "vmx": {
                "readOnly": true,
                "description": "a reference to the VMX file of the VM for which this ticket was issued",
                "type": "string"
              },
              "ticket": {
                "readOnly": true,
                "description": "screen ticket to use to authenticate the client",
                "type": "string"
              },
              "port": {
                "readOnly": true,
                "description": "host port to be used for console access",
                "type": "integer",
                "format": "int32"
              }
            },
            "required": [
              "host",
              "vmx",
              "ticket",
              "port"
            ],
            "additionalProperties": false
          }
        ]
      },
      "MultisiteType": {
        "title": "MultisiteType",
        "description": "site vCloud configuration.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityType"
          },
          {
            "type": "object",
            "properties": {
              "restEndpoint": {
                "description": "The URI of the REST API end\\-point for the site.",
                "type": "string",
                "format": "uri"
              },
              "baseUiEndpoint": {
                "deprecated": true,
                "description": "The base URI of the UI end\\-point for the site.",
                "type": "string",
                "format": "uri"
              },
              "tenantUiEndpoint": {
                "nullable": true,
                "deprecated": true,
                "description": "The URI of the Tenant UI end\\-point for the site.",
                "type": "string",
                "format": "uri"
              },
              "restEndpointCertificate": {
                "nullable": true,
                "description": "Optional PEM\\-encoded certificate to use when connecting to the REST API end\\-point.",
                "type": "string"
              }
            },
            "required": [
              "restEndpoint",
              "baseUiEndpoint",
              "tenantUiEndpoint",
              "restEndpointCertificate"
            ],
            "additionalProperties": false
          }
        ]
      },
      "SiteType": {
        "title": "SiteType",
        "description": "Represents a single site in a multi\\-site vCloud configuration.",
        "allOf": [
          {
            "$ref": "#/components/schemas/MultisiteType"
          },
          {
            "type": "object",
            "properties": {
              "multiSiteUrl": {
                "description": "The URL that represents the entire multisite setup.",
                "type": "string",
                "format": "uri"
              },
              "siteAssociations": {
                "nullable": true,
                "description": "List of sites associated with this site.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SiteAssociationsType"
                  }
                ]
              }
            },
            "required": [
              "multiSiteUrl",
              "siteAssociations"
            ],
            "additionalProperties": false
          }
        ]
      },
      "SiteAssociationsType": {
        "title": "SiteAssociationsType",
        "description": "Container for SiteAssociationType",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "siteAssociationMember": {
                "readOnly": true,
                "description": "A reference to a SiteAssociationType object.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SiteAssociationType"
                }
              }
            },
            "required": [
              "siteAssociationMember"
            ],
            "additionalProperties": false
          }
        ]
      },
      "SiteAssociationType": {
        "title": "SiteAssociationType",
        "description": "A reference to another associated site",
        "allOf": [
          {
            "$ref": "#/components/schemas/MultisiteType"
          },
          {
            "type": "object",
            "properties": {
              "siteId": {
                "description": "The URN of the remote site",
                "type": "string"
              },
              "siteName": {
                "description": "The name of the remote site",
                "type": "string"
              },
              "publicKey": {
                "nullable": true,
                "description": "PEM\\-encoded public key for the remote site.",
                "type": "string"
              },
              "status": {
                "nullable": true,
                "readOnly": true,
                "description": "Current status of this association. One of:  \n**ACTIVE** (The association has been established by both members, and communication with the remote party succeeded.)  \n**ASYMMETRIC** (The association has been established at the local site, but the remote party has not yet reciprocated.)  \n**UNREACHABLE** (The association has been established by both members, but the remote member is currently unreachable.)",
                "type": "string"
              }
            },
            "required": [
              "siteId",
              "siteName",
              "publicKey",
              "status"
            ],
            "additionalProperties": false
          }
        ]
      },
      "SiteStatusType": {
        "title": "SiteStatusType",
        "description": "Represents the status of a single site.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "siteId": {
                "readOnly": true,
                "description": "ID of the site this status represents.",
                "type": "string"
              },
              "siteName": {
                "readOnly": true,
                "description": "Name of the site this status represents.",
                "type": "string"
              }
            },
            "required": [
              "siteId",
              "siteName"
            ],
            "additionalProperties": false
          }
        ]
      },
      "OrgAssociationsType": {
        "title": "OrgAssociationsType",
        "description": "Container for OrgAssociationType",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "orgAssociationMember": {
                "readOnly": true,
                "description": "A reference to an organization object.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrgAssociationType"
                }
              }
            },
            "required": [
              "orgAssociationMember"
            ],
            "additionalProperties": false
          }
        ]
      },
      "OrgAssociationType": {
        "title": "OrgAssociationType",
        "description": "A reference to another organization",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "siteId": {
                "description": "The URN of the site that this organization occupies.",
                "type": "string"
              },
              "orgId": {
                "description": "The URN of the organization with which to associate.",
                "type": "string"
              },
              "siteName": {
                "nullable": true,
                "readOnly": true,
                "description": "The name of the site that the organization occupies.",
                "type": "string"
              },
              "orgName": {
                "description": "The name of the organization with which to associate.",
                "type": "string"
              },
              "orgPublicKey": {
                "description": "PEM\\-encoded public key for this organization.",
                "type": "string"
              },
              "status": {
                "nullable": true,
                "readOnly": true,
                "description": "Current status of this association. One of:  \n**ACTIVE** (The association has been established by both members, and communication with the remote party succeeded.)  \n**ASYMMETRIC** (The association has been established at the local site, but the remote party has not yet reciprocated.)  \n**UNREACHABLE** (The association has been established by both members, but the remote member is currently unreachable.)",
                "type": "string"
              }
            },
            "required": [
              "siteId",
              "orgId",
              "siteName",
              "orgName",
              "orgPublicKey",
              "status"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AuthorizedLocationType": {
        "title": "AuthorizedLocationType",
        "description": "Represents a vCloud Director server group that this session is authorized to access.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityType"
          },
          {
            "type": "object",
            "properties": {
              "locationId": {
                "description": "The id of the location. format: orgId@siteId",
                "type": "string"
              },
              "locationName": {
                "nullable": true,
                "deprecated": true,
                "description": "The name of the location.",
                "type": "string"
              },
              "siteName": {
                "nullable": true,
                "description": "The name of the site.",
                "type": "string"
              },
              "orgName": {
                "nullable": true,
                "description": "The name of the organization.",
                "type": "string"
              },
              "restApiEndpoint": {
                "description": "The vCloud API endpoint (RestApiBaseUri) for the location.",
                "type": "string",
                "format": "uri"
              },
              "uIEndpoint": {
                "description": "The vCloud Director Web Console (SystemExternalHttpAddress) endpoint for the location.",
                "type": "string",
                "format": "uri"
              },
              "useMultisiteToken": {
                "nullable": true,
                "deprecated": true,
                "description": "True if the location accepts multisite x\\-vcloud\\-authorization token for this user.",
                "type": "boolean"
              },
              "authContext": {
                "nullable": true,
                "description": "The auth context for this org",
                "type": "string"
              }
            },
            "required": [
              "locationId",
              "locationName",
              "siteName",
              "orgName",
              "restApiEndpoint",
              "uIEndpoint",
              "useMultisiteToken",
              "authContext"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AuthorizedLocationsType": {
        "title": "AuthorizedLocationsType",
        "description": "Container for AuthorizedLocationType",
        "type": "object",
        "properties": {
          "location": {
            "readOnly": true,
            "description": "Authorized location for the user in this session.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthorizedLocationType"
            }
          }
        },
        "required": [
          "location"
        ],
        "additionalProperties": false
      },
      "MultisiteSessionUserInfoType": {
        "title": "MultisiteSessionUserInfoType",
        "description": "Container for MultisiteSessionUserInfoType",
        "type": "object",
        "properties": {
          "username": {
            "readOnly": true,
            "description": "Username of the session's user",
            "type": "string"
          },
          "fullName": {
            "readOnly": true,
            "description": "Full name of the session's user",
            "type": "string"
          },
          "email": {
            "readOnly": true,
            "description": "Email address for the session's user",
            "type": "string"
          },
          "memberProviderType": {
            "readOnly": true,
            "description": "Provider type of the user",
            "type": "string"
          },
          "idpRecommendedRoles": {
            "readOnly": true,
            "description": "Role recommended by the IDP",
            "allOf": [
              {
                "$ref": "#/components/schemas/IdpRecommendedRolesType"
              }
            ]
          },
          "idpGroups": {
            "readOnly": true,
            "description": "Groups obtained from the IDP",
            "allOf": [
              {
                "$ref": "#/components/schemas/IdpGroupsType"
              }
            ]
          }
        },
        "required": [
          "username",
          "fullName",
          "email",
          "memberProviderType",
          "idpRecommendedRoles",
          "idpGroups"
        ],
        "additionalProperties": false
      },
      "IdpRecommendedRolesType": {
        "title": "IdpRecommendedRolesType",
        "description": "Container for Idp Recommended Roles",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "idpRecommendedRoles": {
                "readOnly": true,
                "description": "An idp recommended role.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "idpRecommendedRoles"
            ],
            "additionalProperties": false
          }
        ]
      },
      "IdpGroupsType": {
        "title": "IdpGroupsType",
        "description": "Container for Idp Groups",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "idpGroups": {
                "readOnly": true,
                "description": "An idp group",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "idpGroups"
            ],
            "additionalProperties": false
          }
        ]
      },
      "NetworkType": {
        "title": "NetworkType",
        "description": "Represents a Network in the vCloud model.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityType"
          },
          {
            "type": "object",
            "properties": {
              "configuration": {
                "nullable": true,
                "description": "Network configuration.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NetworkConfigurationType"
                  }
                ]
              }
            },
            "required": [
              "configuration"
            ],
            "additionalProperties": false
          }
        ]
      },
      "OrgNetworkType": {
        "title": "OrgNetworkType",
        "description": "Represents an organization network in the vCloud model.",
        "allOf": [
          {
            "$ref": "#/components/schemas/NetworkType"
          },
          {
            "type": "object",
            "properties": {
              "networkPool": {
                "nullable": true,
                "readOnly": true,
                "description": "Network Pool from which this organization network is created. Not present if it is bridged to an external network.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "allowedExternalIpAddresses": {
                "nullable": true,
                "readOnly": true,
                "description": "Optional set of IP addresses that this organization network is limited to using for purposes of NAT.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressesType"
                  }
                ]
              }
            },
            "required": [
              "networkPool",
              "allowedExternalIpAddresses"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VAppNetworkType": {
        "title": "VAppNetworkType",
        "description": "Represents a vApp network.",
        "allOf": [
          {
            "$ref": "#/components/schemas/NetworkType"
          },
          {
            "type": "object",
            "properties": {
              "deployed": {
                "readOnly": true,
                "description": "True if the network is deployed.",
                "type": "boolean"
              }
            },
            "required": [
              "deployed"
            ],
            "additionalProperties": false
          }
        ]
      },
      "NetworkServiceType": {
        "title": "NetworkServiceType",
        "description": "This is the root of the substitution group for network services. Replace it with any of NatService, LoadBalancerService IpsecVpnService/GatewayIpsecVpnService, DhcpService/GatewayDhcpService, FirewallService, or StaticRoutingService.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "isEnabled": {
                "nullable": true,
                "description": "Enable or disable the service using this flag",
                "type": "boolean"
              }
            },
            "required": [
              "isEnabled"
            ],
            "additionalProperties": false
          }
        ]
      },
      "NetworkFeaturesType": {
        "title": "NetworkFeaturesType",
        "description": "Represents features of a network.",
        "type": "object",
        "additionalProperties": false
      },
      "DhcpServiceType": {
        "title": "DhcpServiceType",
        "description": "Represents a DHCP network service.",
        "allOf": [
          {
            "$ref": "#/components/schemas/NetworkServiceType"
          },
          {
            "type": "object",
            "properties": {
              "defaultLeaseTime": {
                "nullable": true,
                "description": "Default lease in seconds for DHCP addresses.",
                "type": "integer",
                "format": "int32"
              },
              "maxLeaseTime": {
                "nullable": true,
                "description": "Max lease in seconds for DHCP addresses.",
                "type": "integer",
                "format": "int32"
              },
              "ipRange": {
                "nullable": true,
                "description": "IP range for DHCP addresses.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpRangeType"
                  }
                ]
              },
              "routerIp": {
                "nullable": true,
                "description": "Router IP.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              },
              "subMask": {
                "nullable": true,
                "description": "The subnet mask.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              },
              "primaryNameServer": {
                "nullable": true,
                "description": "The primary name server.",
                "type": "string"
              },
              "secondaryNameServer": {
                "nullable": true,
                "description": "The secondary name server.",
                "type": "string"
              },
              "domainName": {
                "nullable": true,
                "description": "The domain name.",
                "type": "string"
              }
            },
            "required": [
              "defaultLeaseTime",
              "maxLeaseTime",
              "ipRange",
              "routerIp",
              "subMask",
              "primaryNameServer",
              "secondaryNameServer",
              "domainName"
            ],
            "additionalProperties": false
          }
        ]
      },
      "NatServiceType": {
        "title": "NatServiceType",
        "description": "Represents a NAT network service.",
        "allOf": [
          {
            "$ref": "#/components/schemas/NetworkServiceType"
          },
          {
            "type": "object",
            "properties": {
              "natType": {
                "nullable": true,
                "description": "One of: ipTranslation (use IP translation), portForwarding (use port forwarding)",
                "type": "string"
              },
              "policy": {
                "nullable": true,
                "description": "One of: allowTraffic (Allow all traffic), allowTrafficIn (Allow inbound traffic only)",
                "type": "string"
              },
              "natRule": {
                "description": "A NAT rule.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NatRuleType"
                }
              },
              "externalIp": {
                "nullable": true,
                "description": "External IP address for rule.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              }
            },
            "required": [
              "natType",
              "policy",
              "natRule",
              "externalIp"
            ],
            "additionalProperties": false
          }
        ]
      },
      "NatRuleType": {
        "title": "NatRuleType",
        "description": "Represents a NAT rule.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "description": {
                "nullable": true,
                "description": "Description of NAT rule.",
                "type": "string"
              },
              "ruleType": {
                "nullable": true,
                "description": "Type of NAT rule. One of: SNAT (source NAT), DNAT (destination NAT)",
                "type": "string"
              },
              "isEnabled": {
                "nullable": true,
                "description": "Used to enabled or disable NAT rule.",
                "type": "boolean"
              },
              "id": {
                "nullable": true,
                "description": "Id of the rule. Can be used to track syslog messages.",
                "type": "integer",
                "format": "int32"
              }
            },
            "required": [
              "description",
              "ruleType",
              "isEnabled",
              "id"
            ],
            "additionalProperties": false
          }
        ]
      },
      "GatewayNatRuleType": {
        "title": "GatewayNatRuleType",
        "description": "Represents the SNAT and DNAT rules.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "interface": {
                "nullable": true,
                "description": "Interface to which rule is applied.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "originalIp": {
                "nullable": true,
                "description": "Original IP for rule.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              },
              "originalPort": {
                "nullable": true,
                "description": "Original port for rule.",
                "type": "string"
              },
              "translatedIp": {
                "nullable": true,
                "description": "Translated IP for rule.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              },
              "translatedPort": {
                "nullable": true,
                "description": "Translated port for rule.",
                "type": "string"
              },
              "protocol": {
                "nullable": true,
                "description": "Protocol for rule.",
                "type": "string"
              },
              "icmpSubType": {
                "nullable": true,
                "description": "ICMP subtype. One of: address\\-mask\\-request, address\\-mask\\-reply, destination\\-unreachable, echo\\-request, echo\\-reply, parameter\\-problem, redirect, router\\-advertisement, router\\-solicitation, source\\-quench, time\\-exceeded, timestamp\\-request, timestamp\\-reply, any.",
                "type": "string"
              }
            },
            "required": [
              "interface",
              "originalIp",
              "originalPort",
              "translatedIp",
              "translatedPort",
              "protocol",
              "icmpSubType"
            ],
            "additionalProperties": false
          }
        ]
      },
      "NatOneToOneBasicRuleType": {
        "title": "NatOneToOneBasicRuleType",
        "description": "Represents the NAT basic rule for one to one mapping of internal and external IP addresses from a network.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "mappingMode": {
                "description": "One of: automatic (map IP addresses automatically), manual (map IP addresses manually using ExternalIpAddress and InternalIpAddress)",
                "type": "string"
              },
              "externalIpAddress": {
                "description": "External IP address to map.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              },
              "internalIpAddress": {
                "description": "Internal IP address to map.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              }
            },
            "required": [
              "mappingMode",
              "externalIpAddress",
              "internalIpAddress"
            ],
            "additionalProperties": false
          }
        ]
      },
      "NatOneToOneVmRuleType": {
        "title": "NatOneToOneVmRuleType",
        "description": "Represents the NAT rule for one to one mapping of VM NIC and external IP addresses from a network.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "mappingMode": {
                "description": "Mapping mode.",
                "type": "string"
              },
              "externalIpAddress": {
                "nullable": true,
                "description": "External IP address to map to VM.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              },
              "vAppScopedVmId": {
                "description": "VAppScopedVmId of the VM to which this rule applies.",
                "type": "string"
              },
              "vmNicId": {
                "description": "VM NIC ID to which this rule applies.",
                "type": "integer",
                "format": "int32"
              }
            },
            "required": [
              "mappingMode",
              "externalIpAddress",
              "vAppScopedVmId",
              "vmNicId"
            ],
            "additionalProperties": false
          }
        ]
      },
      "NatPortForwardingRuleType": {
        "title": "NatPortForwardingRuleType",
        "description": "Represents the NAT rule for port forwarding between internal IP/port and external IP/port.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "externalIpAddress": {
                "description": "External IP address to forward to.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              },
              "externalPort": {
                "description": "External port to forward to.",
                "type": "integer",
                "format": "int32"
              },
              "internalIpAddress": {
                "description": "Internal IP address to forward to.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              },
              "internalPort": {
                "description": "Internal port to forward to.",
                "type": "integer",
                "format": "int32"
              },
              "protocol": {
                "description": "Protocol to forward. One of: TCP (forward TCP packets), UDP (forward UDP packets), TCP\\_UDP (forward TCP and UDP packets).",
                "type": "string"
              }
            },
            "required": [
              "externalIpAddress",
              "externalPort",
              "internalIpAddress",
              "internalPort",
              "protocol"
            ],
            "additionalProperties": false
          }
        ]
      },
      "NatVmRuleType": {
        "title": "NatVmRuleType",
        "description": "Represents the NAT rule for port forwarding between VM NIC/port and external IP/port.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "externalIpAddress": {
                "nullable": true,
                "description": "External IP address to forward to.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              },
              "externalPort": {
                "description": "External port to forward to.",
                "type": "integer",
                "format": "int32"
              },
              "vAppScopedVmId": {
                "description": "VAppScopedVmId of VM to which this rule applies.",
                "type": "string"
              },
              "vmNicId": {
                "description": "VM NIC ID to which this rule applies.",
                "type": "integer",
                "format": "int32"
              },
              "internalPort": {
                "description": "Internal port to forward.",
                "type": "integer",
                "format": "int32"
              },
              "protocol": {
                "description": "Protocol to forward. One of: TCP (forward TCP packets), UDP (forward UDP packets), TCP\\_UDP (forward TCP and UDP packets).",
                "type": "string"
              }
            },
            "required": [
              "externalIpAddress",
              "externalPort",
              "vAppScopedVmId",
              "vmNicId",
              "internalPort",
              "protocol"
            ],
            "additionalProperties": false
          }
        ]
      },
      "FirewallServiceType": {
        "title": "FirewallServiceType",
        "description": "Represents a network firewall service.",
        "allOf": [
          {
            "$ref": "#/components/schemas/NetworkServiceType"
          },
          {
            "type": "object",
            "properties": {
              "defaultAction": {
                "nullable": true,
                "description": "Default action of the firewall. One of: drop (Default. Drop packets that match the rule.), allow (Allow packets that match the rule to pass through the firewall)",
                "type": "string"
              },
              "logDefaultAction": {
                "nullable": true,
                "description": "Flag to enable logging for default action. Default value is false.",
                "type": "boolean"
              },
              "firewallRule": {
                "description": "A firewall rule.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FirewallRuleType"
                }
              }
            },
            "required": [
              "defaultAction",
              "logDefaultAction",
              "firewallRule"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VmSelectionType": {
        "title": "VmSelectionType",
        "description": "Represents details of an vm\\+nic\\+iptype selection.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "vAppScopedVmId": {
                "description": "VAppScopedVmId of VM to which this rule applies.",
                "type": "string"
              },
              "vmNicId": {
                "description": "VM NIC ID to which this rule applies.",
                "type": "integer",
                "format": "int32"
              },
              "ipType": {
                "description": "The value can be one of:\\- assigned: assigned internal IP be automatically choosen. NAT: NATed external IP will be automatically choosen.",
                "type": "string"
              }
            },
            "required": [
              "vAppScopedVmId",
              "vmNicId",
              "ipType"
            ],
            "additionalProperties": false
          }
        ]
      },
      "FirewallRuleType": {
        "title": "FirewallRuleType",
        "description": "Represents a firewall rule.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "nullable": true,
                "description": "Firewall rule identifier.",
                "type": "string"
              },
              "isEnabled": {
                "nullable": true,
                "description": "Used to enable or disable the firewall rule. Default value is true.",
                "type": "boolean"
              },
              "matchOnTranslate": {
                "nullable": true,
                "description": "For DNATed traffic, match the firewall rules only after the destination IP is translated.",
                "type": "boolean"
              },
              "description": {
                "nullable": true,
                "description": "A description of the rule.",
                "type": "string"
              },
              "policy": {
                "nullable": true,
                "description": "One of: drop (drop packets that match the rule), allow (allow packets that match the rule to pass through the firewall)",
                "type": "string"
              },
              "icmpSubType": {
                "nullable": true,
                "description": "ICMP subtype. One of: address\\-mask\\-request, address\\-mask\\-reply, destination\\-unreachable, echo\\-request, echo\\-reply, parameter\\-problem, redirect, router\\-advertisement, router\\-solicitation, source\\-quench, time\\-exceeded, timestamp\\-request, timestamp\\-reply, any.",
                "type": "string"
              },
              "port": {
                "nullable": true,
                "description": "The port to which this rule applies. A value of \\-1 matches any port.",
                "type": "integer",
                "format": "int32"
              },
              "destinationPortRange": {
                "nullable": true,
                "description": "Destination port range to which this rule applies.",
                "type": "string"
              },
              "sourcePort": {
                "nullable": true,
                "description": "Destination port to which this rule applies. A value of \\-1 matches any port.",
                "type": "integer",
                "format": "int32"
              },
              "sourcePortRange": {
                "nullable": true,
                "description": "Source port range to which this rule applies.",
                "type": "string"
              },
              "direction": {
                "nullable": true,
                "description": "Direction of traffic to which rule applies. One of: in (rule applies to incoming traffic. This is the default value), out (rule applies to outgoing traffic).",
                "type": "string"
              },
              "enableLogging": {
                "nullable": true,
                "description": "Used to enable or disable firewall rule logging. Default value is false.",
                "type": "boolean"
              }
            },
            "required": [
              "id",
              "isEnabled",
              "matchOnTranslate",
              "description",
              "policy",
              "icmpSubType",
              "port",
              "destinationPortRange",
              "sourcePort",
              "sourcePortRange",
              "direction",
              "enableLogging"
            ],
            "additionalProperties": false
          }
        ]
      },
      "IpsecVpnServiceType": {
        "title": "IpsecVpnServiceType",
        "description": "Represents an IPSec\\-VPN network service.",
        "allOf": [
          {
            "$ref": "#/components/schemas/NetworkServiceType"
          },
          {
            "type": "object",
            "properties": {
              "externalIpAddress": {
                "nullable": true,
                "readOnly": true,
                "description": "IP address of external enterface of the Edge.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              },
              "publicIpAddress": {
                "nullable": true,
                "description": "Public IP address of the Edge.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              },
              "ipsecVpnTunnel": {
                "description": "Details of an IPSec\\-VPN tunnel.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IpsecVpnTunnelType"
                }
              }
            },
            "required": [
              "externalIpAddress",
              "publicIpAddress",
              "ipsecVpnTunnel"
            ],
            "additionalProperties": false
          }
        ]
      },
      "IpsecVpnTunnelType": {
        "title": "IpsecVpnTunnelType",
        "description": "Represents details of an IPSec\\-VPN tunnel.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "description": "A name for the tunnel.",
                "type": "string"
              },
              "description": {
                "nullable": true,
                "description": "A description of the tunnel.",
                "type": "string"
              },
              "peerIpAddress": {
                "description": "IP address of the peer Edge device.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              },
              "peerNetworkAddress": {
                "description": "Address of the peer network.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              },
              "peerNetworkMask": {
                "description": "Netmask of the peer network.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              },
              "sharedSecret": {
                "description": "Shared secret used for authentication.",
                "type": "string"
              },
              "encryptionProtocol": {
                "description": "Encryption protocol to be used. One of: AES, AES256, TRIPLEDES",
                "type": "string"
              },
              "mtu": {
                "description": "MTU for the tunnel.",
                "type": "integer",
                "format": "int32"
              },
              "isEnabled": {
                "description": "Specifies if the IPSec\\-VPN Tunnel should be enabled.",
                "type": "boolean"
              },
              "isOperational": {
                "nullable": true,
                "description": "Specifies if the IPSec\\-VPN Tunnel is operational.",
                "type": "boolean"
              },
              "errorDetails": {
                "nullable": true,
                "description": "Details, in case the tunnel state is set to error.",
                "type": "string"
              }
            },
            "required": [
              "name",
              "description",
              "peerIpAddress",
              "peerNetworkAddress",
              "peerNetworkMask",
              "sharedSecret",
              "encryptionProtocol",
              "mtu",
              "isEnabled",
              "isOperational",
              "errorDetails"
            ],
            "additionalProperties": false
          }
        ]
      },
      "IpsecVpnPeerType": {
        "title": "IpsecVpnPeerType",
        "description": "Gives more details of peer end point.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "IpsecVpnManagedPeerType": {
        "title": "IpsecVpnManagedPeerType",
        "description": "Gives more details of peer end point.",
        "allOf": [
          {
            "$ref": "#/components/schemas/IpsecVpnPeerType"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "ID of peer network.",
                "type": "string"
              },
              "name": {
                "description": "Name of the peer network.",
                "type": "string"
              }
            },
            "required": [
              "id",
              "name"
            ],
            "additionalProperties": false
          }
        ]
      },
      "IpsecVpnLocalPeerType": {
        "title": "IpsecVpnLocalPeerType",
        "description": "Gives more details of local peer end point.",
        "allOf": [
          {
            "$ref": "#/components/schemas/IpsecVpnManagedPeerType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "IpsecVpnRemotePeerType": {
        "title": "IpsecVpnRemotePeerType",
        "description": "Gives more details of remote peer end point.",
        "allOf": [
          {
            "$ref": "#/components/schemas/IpsecVpnManagedPeerType"
          },
          {
            "type": "object",
            "properties": {
              "vcdUrl": {
                "description": "REST API URL of the peer cloud.",
                "type": "string"
              },
              "vcdOrganization": {
                "description": "Organization which contains the peer network.",
                "type": "string"
              },
              "vcdUsername": {
                "description": "Username to be used to log in to peer cloud.",
                "type": "string"
              }
            },
            "required": [
              "vcdUrl",
              "vcdOrganization",
              "vcdUsername"
            ],
            "additionalProperties": false
          }
        ]
      },
      "IpsecVpnUnmanagedPeerType": {
        "title": "IpsecVpnUnmanagedPeerType",
        "description": "Gives more details of peer end point not managed by vCloud Director.",
        "allOf": [
          {
            "$ref": "#/components/schemas/IpsecVpnPeerType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "IpsecVpnThirdPartyPeerType": {
        "title": "IpsecVpnThirdPartyPeerType",
        "description": "Gives more details of third party peer end point.",
        "allOf": [
          {
            "$ref": "#/components/schemas/IpsecVpnUnmanagedPeerType"
          },
          {
            "type": "object",
            "properties": {
              "peerId": {
                "description": "Peer ID of the remote endpoint.",
                "type": "string"
              }
            },
            "required": [
              "peerId"
            ],
            "additionalProperties": false
          }
        ]
      },
      "StaticRoutingServiceType": {
        "title": "StaticRoutingServiceType",
        "description": "Represents Static Routing network service.",
        "allOf": [
          {
            "$ref": "#/components/schemas/NetworkServiceType"
          },
          {
            "type": "object",
            "properties": {
              "staticRoute": {
                "description": "Details of each Static Route.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StaticRouteType"
                }
              }
            },
            "required": [
              "staticRoute"
            ],
            "additionalProperties": false
          }
        ]
      },
      "GatewayDhcpServiceType": {
        "title": "GatewayDhcpServiceType",
        "description": "Represents Gateway DHCP service.",
        "allOf": [
          {
            "$ref": "#/components/schemas/NetworkServiceType"
          },
          {
            "type": "object",
            "properties": {
              "pool": {
                "description": "A DHCP pool.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DhcpPoolServiceType"
                }
              }
            },
            "required": [
              "pool"
            ],
            "additionalProperties": false
          }
        ]
      },
      "DhcpPoolServiceType": {
        "title": "DhcpPoolServiceType",
        "description": "Represents DHCP pool service.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "isEnabled": {
                "nullable": true,
                "description": "True if this DHCP Pool is enabled.",
                "type": "boolean"
              },
              "network": {
                "nullable": true,
                "description": "Org vDC network to which the DHCP range is applicable.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "defaultLeaseTime": {
                "nullable": true,
                "description": "Default lease period for DHCP range.",
                "type": "integer",
                "format": "int32"
              },
              "maxLeaseTime": {
                "nullable": true,
                "description": "Maximum lease period for DHCP range.",
                "type": "integer",
                "format": "int32"
              },
              "lowIpAddress": {
                "nullable": true,
                "description": "Low IP address in DHCP range.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              },
              "highIpAddress": {
                "nullable": true,
                "description": "High IP address in DHCP range.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              }
            },
            "required": [
              "isEnabled",
              "network",
              "defaultLeaseTime",
              "maxLeaseTime",
              "lowIpAddress",
              "highIpAddress"
            ],
            "additionalProperties": false
          }
        ]
      },
      "LoadBalancerServiceType": {
        "title": "LoadBalancerServiceType",
        "description": "Represents gateway load balancer service.",
        "allOf": [
          {
            "$ref": "#/components/schemas/NetworkServiceType"
          },
          {
            "type": "object",
            "properties": {
              "pool": {
                "description": "List of load balancer pools.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LoadBalancerPoolType"
                }
              },
              "virtualServer": {
                "description": "List of load balancer virtual servers.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LoadBalancerVirtualServerType"
                }
              }
            },
            "required": [
              "pool",
              "virtualServer"
            ],
            "additionalProperties": false
          }
        ]
      },
      "LoadBalancerPoolType": {
        "title": "LoadBalancerPoolType",
        "description": "Represents a load balancer pool.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "nullable": true,
                "description": "Load balancer pool id.",
                "type": "string"
              },
              "name": {
                "nullable": true,
                "description": "Load balancer pool name.",
                "type": "string"
              },
              "description": {
                "nullable": true,
                "description": "Load balancer pool description.",
                "type": "string"
              },
              "servicePort": {
                "description": "Load balancer pool service port.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LBPoolServicePortType"
                }
              },
              "member": {
                "description": "Load balancer pool member.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LBPoolMemberType"
                }
              },
              "operational": {
                "nullable": true,
                "readOnly": true,
                "description": "True if the load balancer pool is operational.",
                "type": "boolean"
              },
              "errorDetails": {
                "nullable": true,
                "readOnly": true,
                "description": "Error details for this pool.",
                "type": "string"
              }
            },
            "required": [
              "id",
              "name",
              "description",
              "servicePort",
              "member",
              "operational",
              "errorDetails"
            ],
            "additionalProperties": false
          }
        ]
      },
      "LoadBalancerVirtualServerType": {
        "title": "LoadBalancerVirtualServerType",
        "description": "Represents a load balancer virtual server.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "isEnabled": {
                "nullable": true,
                "description": "True if this virtual server is enabled.",
                "type": "boolean"
              },
              "name": {
                "nullable": true,
                "description": "Load balancer virtual server name.",
                "type": "string"
              },
              "description": {
                "nullable": true,
                "description": "Load balancer virtual server description.",
                "type": "string"
              },
              "interface": {
                "nullable": true,
                "description": "Gateway Interface to which Load Balancer Virtual Server is bound.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "ipAddress": {
                "nullable": true,
                "description": "Load balancer virtual server Ip Address.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              },
              "serviceProfile": {
                "description": "Load balancer virtual server service profiles.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LBVirtualServerServiceProfileType"
                }
              },
              "logging": {
                "nullable": true,
                "readOnly": true,
                "description": "Enable logging for this virtual server.",
                "type": "boolean"
              },
              "pool": {
                "nullable": true,
                "readOnly": true,
                "description": "Name of Load balancer pool associated with this virtual server.",
                "type": "string"
              },
              "loadBalancerTemplates": {
                "description": "Service template related attributes.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VendorTemplateType"
                }
              }
            },
            "required": [
              "isEnabled",
              "name",
              "description",
              "interface",
              "ipAddress",
              "serviceProfile",
              "logging",
              "pool",
              "loadBalancerTemplates"
            ],
            "additionalProperties": false
          }
        ]
      },
      "LBPoolServicePortType": {
        "title": "LBPoolServicePortType",
        "description": "Represents a service port in a load balancer pool.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "isEnabled": {
                "nullable": true,
                "description": "True if this service port is enabled.",
                "type": "boolean"
              },
              "protocol": {
                "nullable": true,
                "description": "Load balancer protocol type. One of: HTTP, HTTPS, TCP.",
                "type": "string"
              },
              "algorithm": {
                "nullable": true,
                "description": "Load Balancer algorithm type. One of: IP\\_HASH, ROUND\\_ROBIN, URI, LEAST\\_CONN.",
                "type": "string"
              },
              "port": {
                "nullable": true,
                "description": "Port for this service profile.",
                "type": "string"
              },
              "healthCheckPort": {
                "nullable": true,
                "description": "Health check port for this profile.",
                "type": "string"
              },
              "healthCheck": {
                "readOnly": true,
                "description": "Health check list.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LBPoolHealthCheckType"
                }
              }
            },
            "required": [
              "isEnabled",
              "protocol",
              "algorithm",
              "port",
              "healthCheckPort",
              "healthCheck"
            ],
            "additionalProperties": false
          }
        ]
      },
      "LBVirtualServerServiceProfileType": {
        "title": "LBVirtualServerServiceProfileType",
        "description": "Represents service profile for a load balancing virtual server.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "isEnabled": {
                "nullable": true,
                "description": "True if this service profile is enabled.",
                "type": "boolean"
              },
              "protocol": {
                "nullable": true,
                "description": "Load balancer Protocol type. One of: HTTP, HTTPS, TCP.",
                "type": "string"
              },
              "port": {
                "nullable": true,
                "description": "Port for this service profile.",
                "type": "string"
              },
              "persistence": {
                "nullable": true,
                "description": "Persistence type for service profile.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LBPersistenceType"
                  }
                ]
              }
            },
            "required": [
              "isEnabled",
              "protocol",
              "port",
              "persistence"
            ],
            "additionalProperties": false
          }
        ]
      },
      "LBPersistenceType": {
        "title": "LBPersistenceType",
        "description": "Represents persistence type for a load balancer service profile.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "method": {
                "nullable": true,
                "description": "Persistence method. One of: COOKIE, SSL\\_SESSION\\_ID.",
                "type": "string"
              },
              "cookieName": {
                "nullable": true,
                "description": "Cookie name when persistence method is COOKIE.",
                "type": "string"
              },
              "cookieMode": {
                "nullable": true,
                "description": "Cookie Mode. One of: INSERT, PREFIX, APP.",
                "type": "string"
              }
            },
            "required": [
              "method",
              "cookieName",
              "cookieMode"
            ],
            "additionalProperties": false
          }
        ]
      },
      "LBPoolMemberType": {
        "title": "LBPoolMemberType",
        "description": "Represents a member in a load balancer pool.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "ipAddress": {
                "nullable": true,
                "description": "Ip Address for load balancer member.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              },
              "condition": {
                "nullable": true,
                "description": "Condition for this member. Can be enabled or disabled.",
                "type": "string"
              },
              "weight": {
                "nullable": true,
                "description": "Weight of this member.",
                "type": "string"
              },
              "servicePort": {
                "description": "Load balancer member service port.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LBPoolServicePortType"
                }
              }
            },
            "required": [
              "ipAddress",
              "condition",
              "weight",
              "servicePort"
            ],
            "additionalProperties": false
          }
        ]
      },
      "LBPoolHealthCheckType": {
        "title": "LBPoolHealthCheckType",
        "description": "Represents a service port health check list.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "mode": {
                "nullable": true,
                "description": "Load balancer service port health check mode. One of: TCP, HTTP, SSL.",
                "type": "string"
              },
              "uri": {
                "nullable": true,
                "description": "Load balancer service port health check URI.",
                "type": "string"
              },
              "healthThreshold": {
                "nullable": true,
                "description": "Health threshold for this service port.",
                "type": "string"
              },
              "unhealthThreshold": {
                "nullable": true,
                "description": "Unhealth check port for this profile.",
                "type": "string"
              },
              "interval": {
                "nullable": true,
                "readOnly": true,
                "description": "Interval between health checks.",
                "type": "string"
              },
              "timeout": {
                "nullable": true,
                "readOnly": true,
                "description": "Health check timeout.",
                "type": "string"
              }
            },
            "required": [
              "mode",
              "uri",
              "healthThreshold",
              "unhealthThreshold",
              "interval",
              "timeout"
            ],
            "additionalProperties": false
          }
        ]
      },
      "GatewayIpsecVpnServiceType": {
        "title": "GatewayIpsecVpnServiceType",
        "description": "Represents gateway IPsec VPN service.",
        "allOf": [
          {
            "$ref": "#/components/schemas/NetworkServiceType"
          },
          {
            "type": "object",
            "properties": {
              "endpoint": {
                "description": "List of IPSec VPN Service Endpoints.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GatewayIpsecVpnEndpointType"
                }
              },
              "tunnel": {
                "description": "List of IPSec VPN tunnels.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GatewayIpsecVpnTunnelType"
                }
              }
            },
            "required": [
              "endpoint",
              "tunnel"
            ],
            "additionalProperties": false
          }
        ]
      },
      "GatewayIpsecVpnEndpointType": {
        "title": "GatewayIpsecVpnEndpointType",
        "description": "Represents an IPSec VPN endpoint.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "network": {
                "nullable": true,
                "description": "External network reference.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "publicIp": {
                "nullable": true,
                "description": "Public IP for IPSec endpoint.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              }
            },
            "required": [
              "network",
              "publicIp"
            ],
            "additionalProperties": false
          }
        ]
      },
      "GatewayIpsecVpnTunnelType": {
        "title": "GatewayIpsecVpnTunnelType",
        "description": "Represents an IPSec VPN tunnel.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "nullable": true,
                "description": "The name of the tunnel.",
                "type": "string"
              },
              "description": {
                "nullable": true,
                "description": "A description of the tunnel.",
                "type": "string"
              },
              "peerIpAddress": {
                "nullable": true,
                "description": "IP address of the peer endpoint.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              },
              "peerId": {
                "nullable": true,
                "description": "Id for the peer end point",
                "type": "string"
              },
              "localIpAddress": {
                "nullable": true,
                "description": "Address of the local network.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              },
              "localId": {
                "nullable": true,
                "description": "Id for local end point",
                "type": "string"
              },
              "localSubnet": {
                "description": "List of local subnets in the tunnel.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IpsecVpnSubnetType"
                }
              },
              "peerSubnet": {
                "description": "List of peer subnets in the tunnel.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IpsecVpnSubnetType"
                }
              },
              "sharedSecret": {
                "nullable": true,
                "description": "Shared secret used for authentication.",
                "type": "string"
              },
              "sharedSecretEncrypted": {
                "nullable": true,
                "description": "True if shared secret is encrypted.",
                "type": "boolean"
              },
              "encryptionProtocol": {
                "nullable": true,
                "description": "Encryption protocol to be used. One of: AES, AES256, TRIPLEDES",
                "type": "string"
              },
              "mtu": {
                "nullable": true,
                "description": "MTU for the tunnel.",
                "type": "integer",
                "format": "int32"
              },
              "isEnabled": {
                "nullable": true,
                "description": "True if the tunnel is enabled.",
                "type": "boolean"
              },
              "isOperational": {
                "nullable": true,
                "description": "True if the tunnel is operational.",
                "type": "boolean"
              },
              "errorDetails": {
                "nullable": true,
                "description": "Error details of the tunnel.",
                "type": "string"
              }
            },
            "required": [
              "name",
              "description",
              "peerIpAddress",
              "peerId",
              "localIpAddress",
              "localId",
              "localSubnet",
              "peerSubnet",
              "sharedSecret",
              "sharedSecretEncrypted",
              "encryptionProtocol",
              "mtu",
              "isEnabled",
              "isOperational",
              "errorDetails"
            ],
            "additionalProperties": false
          }
        ]
      },
      "IpsecVpnSubnetType": {
        "title": "IpsecVpnSubnetType",
        "description": "Represents subnet details.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "nullable": true,
                "description": "Gateway Name.",
                "type": "string"
              },
              "gateway": {
                "nullable": true,
                "description": "Subnet Gateway.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              },
              "netmask": {
                "nullable": true,
                "description": "Subnet Netmask.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              }
            },
            "required": [
              "name",
              "gateway",
              "netmask"
            ],
            "additionalProperties": false
          }
        ]
      },
      "NetworkConfigurationType": {
        "title": "NetworkConfigurationType",
        "description": "The configurations applied to a network. This is an abstract base type. The concrete types include those for vApp and Organization wide networks.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "backwardCompatibilityMode": {
                "nullable": true,
                "description": "Compatibility mode. Default is false. If set to true, will allow users to write firewall rules in the old 1.5 format. The new format does not require to use direction in firewall rules. Also, for firewall rules to allow NAT traffic the filter is applied on the original IP addresses. Once set to true cannot be reverted back to false.",
                "type": "boolean"
              },
              "ipScope": {
                "nullable": true,
                "description": "Includes IP level configuration items such as gateway, dns, subnet, IP address pool to be used for allocation. Note that the pool of IP addresses needs to fall within the subnet/mask of the IpScope.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpScopeType"
                  }
                ]
              },
              "ipScopes": {
                "nullable": true,
                "description": "A list of IP scopes for the network.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpScopesType"
                  }
                ]
              },
              "parentNetwork": {
                "nullable": true,
                "description": "Contains reference to parent network.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "fenceMode": {
                "description": "Isolation type of the network. If ParentNetwork is specified, this property controls connectivity to the parent. One of: bridged (connected directly to the ParentNetwork), isolated (not connected to any other network), natRouted (connected to the ParentNetwork via a NAT service)",
                "type": "string"
              },
              "retainNetInfoAcrossDeployments": {
                "nullable": true,
                "description": "Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.",
                "type": "boolean"
              },
              "features": {
                "nullable": true,
                "description": "Network features like DHCP, firewall and NAT rules.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NetworkFeaturesType"
                  }
                ]
              },
              "syslogServerSettings": {
                "nullable": true,
                "readOnly": true,
                "description": "Syslog server settings for the network.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SyslogServerSettingsType"
                  }
                ]
              },
              "routerInfo": {
                "nullable": true,
                "readOnly": true,
                "description": "Specifies router information.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RouterInfoType"
                  }
                ]
              },
              "advancedNetworkingEnabled": {
                "nullable": true,
                "description": "True if Advanced Networking has been enabled.",
                "type": "boolean"
              },
              "subInterface": {
                "nullable": true,
                "description": "True if Network is connected to an Edge Gateway subinterface.",
                "type": "boolean"
              },
              "distributedInterface": {
                "nullable": true,
                "description": "True if Network is connected to a distributed logical router.",
                "type": "boolean"
              },
              "guestVlanAllowed": {
                "nullable": true,
                "description": "True if Network allows guest VLAN tagging.",
                "type": "boolean"
              }
            },
            "required": [
              "backwardCompatibilityMode",
              "ipScope",
              "ipScopes",
              "parentNetwork",
              "fenceMode",
              "retainNetInfoAcrossDeployments",
              "features",
              "syslogServerSettings",
              "routerInfo",
              "advancedNetworkingEnabled",
              "subInterface",
              "distributedInterface",
              "guestVlanAllowed"
            ],
            "additionalProperties": false
          }
        ]
      },
      "IpAddressesType": {
        "title": "IpAddressesType",
        "description": "A list of IP addresses.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "ipAddress": {
                "description": "An IP address.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IpAddressType"
                }
              }
            },
            "required": [
              "ipAddress"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AllocatedIpAddressType": {
        "title": "AllocatedIpAddressType",
        "description": "Represents an information for allocated IP address",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "isDeployed": {
                "description": "True if vApp is deployed.",
                "type": "boolean"
              },
              "allocationType": {
                "description": "One of: vmAllocated (IP is allocated by VM), natRouted (IP is NAT routed) vsmAllocated (IP is allocated for vShieldManager)",
                "type": "string"
              },
              "ipAddress": {
                "description": "Allocated IP address.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              }
            },
            "required": [
              "isDeployed",
              "allocationType",
              "ipAddress"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AllocatedIpAddressesType": {
        "title": "AllocatedIpAddressesType",
        "description": "A list of information for allocated IP addresses.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "ipAddress": {
                "description": "IP Allocation info.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AllocatedIpAddressType"
                }
              }
            },
            "required": [
              "ipAddress"
            ],
            "additionalProperties": false
          }
        ]
      },
      "SubAllocationsType": {
        "title": "SubAllocationsType",
        "description": "A list of IP addresses that are sub allocated to edge gateways.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "subAllocation": {
                "description": "IP Range sub allocated to a edge gateway.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SubAllocationType"
                }
              }
            },
            "required": [
              "subAllocation"
            ],
            "additionalProperties": false
          }
        ]
      },
      "SubAllocationType": {
        "title": "SubAllocationType",
        "description": "IP range sub allocated to an edge gateway.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "edgeGateway": {
                "readOnly": true,
                "description": "Edge gateway that uses this sub allocation.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "ipRanges": {
                "description": "IP range sub allocated to the edge gateway.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpRangesType"
                  }
                ]
              }
            },
            "required": [
              "edgeGateway",
              "ipRanges"
            ],
            "additionalProperties": false
          }
        ]
      },
      "IpRangeType": {
        "title": "IpRangeType",
        "description": "Represents a range of IP addresses, start and end inclusive.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "startAddress": {
                "description": "Start address of the IP range.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              },
              "endAddress": {
                "description": "End address of the IP range.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              }
            },
            "required": [
              "startAddress",
              "endAddress"
            ],
            "additionalProperties": false
          }
        ]
      },
      "IpRangesType": {
        "title": "IpRangesType",
        "description": "Represents a list of IP ranges.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "ipRange": {
                "description": "IP range.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IpRangeType"
                }
              }
            },
            "required": [
              "ipRange"
            ],
            "additionalProperties": false
          }
        ]
      },
      "IpScopeType": {
        "title": "IpScopeType",
        "description": "Specify network settings like gateway, network mask, DNS servers, IP ranges, etc.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "isInherited": {
                "description": "True if the IP scope is inherit from parent network.",
                "type": "boolean"
              },
              "gateway": {
                "nullable": true,
                "description": "Gateway of the network.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              },
              "netmask": {
                "nullable": true,
                "description": "Network mask.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              },
              "dns1": {
                "nullable": true,
                "description": "Primary DNS server.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              },
              "dns2": {
                "nullable": true,
                "description": "Secondary DNS server.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              },
              "dnsSuffix": {
                "nullable": true,
                "description": "DNS suffix.",
                "type": "string"
              },
              "isEnabled": {
                "nullable": true,
                "description": "Indicates if subnet is enabled or not. Default value is True.",
                "type": "boolean"
              },
              "ipRanges": {
                "nullable": true,
                "description": "IP ranges used for static pool allocation in the network.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpRangesType"
                  }
                ]
              },
              "allocatedIpAddresses": {
                "nullable": true,
                "readOnly": true,
                "description": "Read\\-only list of allocated IP addresses in the network.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressesType"
                  }
                ]
              },
              "subAllocations": {
                "nullable": true,
                "readOnly": true,
                "description": "Read\\-only list of IP addresses that are sub allocated to edge gateways.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SubAllocationsType"
                  }
                ]
              }
            },
            "required": [
              "isInherited",
              "gateway",
              "netmask",
              "dns1",
              "dns2",
              "dnsSuffix",
              "isEnabled",
              "ipRanges",
              "allocatedIpAddresses",
              "subAllocations"
            ],
            "additionalProperties": false
          }
        ]
      },
      "IpScopesType": {
        "title": "IpScopesType",
        "description": "Represents a list of IP scopes.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "ipScope": {
                "description": "IP scope.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IpScopeType"
                }
              }
            },
            "required": [
              "ipScope"
            ],
            "additionalProperties": false
          }
        ]
      },
      "SyslogServerSettingsType": {
        "title": "SyslogServerSettingsType",
        "description": "Syslog server settings. If logging is configured for firewall rules, the logs will be directed to these syslog servers.",
        "type": "object",
        "properties": {
          "syslogServerIp1": {
            "nullable": true,
            "description": "Primary syslog server.",
            "allOf": [
              {
                "$ref": "#/components/schemas/IpAddressType"
              }
            ]
          },
          "syslogServerIp2": {
            "nullable": true,
            "description": "Secondary syslog server.",
            "allOf": [
              {
                "$ref": "#/components/schemas/IpAddressType"
              }
            ]
          }
        },
        "required": [
          "syslogServerIp1",
          "syslogServerIp2"
        ],
        "additionalProperties": false
      },
      "TenantSyslogServerSettingsType": {
        "title": "TenantSyslogServerSettingsType",
        "description": "Tenant syslog server settings. If logging is configured for firewall rules, the logs will be directed to these syslog servers along with the provider syslog servers. Only one tenant syslog server ip can be configured.",
        "type": "object",
        "properties": {
          "syslogServerIp": {
            "description": "syslog server ip address.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpAddressType"
            }
          }
        },
        "required": [
          "syslogServerIp"
        ],
        "additionalProperties": false
      },
      "OrgVdcNetworkType": {
        "title": "OrgVdcNetworkType",
        "description": "Represents an Org vDC network in the vCloud model.",
        "allOf": [
          {
            "$ref": "#/components/schemas/NetworkType"
          },
          {
            "type": "object",
            "properties": {
              "status": {
                "readOnly": true,
                "description": "Creation status of the org vDC network. One of:  \n 0 (The org vDC network is not completely created)  \n 1 (The org vDC network is ready)",
                "type": "integer",
                "format": "int32"
              },
              "providerInfo": {
                "nullable": true,
                "description": "provider Info for the network",
                "type": "string"
              },
              "edgeGateway": {
                "nullable": true,
                "description": "EdgeGateway that connects this Org vDC network. Applicable only for routed networks.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "serviceConfig": {
                "nullable": true,
                "description": "Specifies the service configuration for an isolated Org vDC networks.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GatewayFeaturesType"
                  }
                ]
              },
              "isShared": {
                "nullable": true,
                "description": "True if this network is shared to multiple Org vDCs.",
                "type": "boolean"
              },
              "vimPortGroupRef": {
                "nullable": true,
                "description": "A reference to a VIRTUAL\\_WIRE object that exists on a vCenter server registered with the system. Required on Create when AdvancedNetworkingEnabled has a value of true. Ignored on update, or when AdvancedNetworkingEnabled has a value of false.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VimObjectRefType"
                  }
                ]
              }
            },
            "required": [
              "status",
              "providerInfo",
              "edgeGateway",
              "serviceConfig",
              "isShared",
              "vimPortGroupRef"
            ],
            "additionalProperties": false
          }
        ]
      },
      "GatewayType": {
        "title": "GatewayType",
        "description": "Represents a gateway.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityType"
          },
          {
            "type": "object",
            "properties": {
              "status": {
                "readOnly": true,
                "description": "Creation status of the gateway. One of:  \n 0 (The gateway is still being created)  \n 1 (The gateway is ready)  \n \\-1 (There was an error while creating the gateway).",
                "type": "integer",
                "format": "int32"
              },
              "gatewayBackingRef": {
                "nullable": true,
                "description": "Provides information to access edge gateway via VC",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GatewayBackingRefType"
                  }
                ]
              },
              "configuration": {
                "nullable": true,
                "description": "Gateway configuration.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GatewayConfigurationType"
                  }
                ]
              }
            },
            "required": [
              "status",
              "gatewayBackingRef",
              "configuration"
            ],
            "additionalProperties": false
          }
        ]
      },
      "GatewayBackingRefType": {
        "title": "GatewayBackingRefType",
        "description": "Provides information to access edge gateway via VC",
        "type": "object",
        "properties": {
          "gatewayId": {
            "nullable": true,
            "description": "Gateway id in VSM (vSheildManager).",
            "type": "string"
          },
          "vCRef": {
            "nullable": true,
            "description": "Entity ref for Vcenter",
            "allOf": [
              {
                "$ref": "#/components/schemas/EntityReferenceType"
              }
            ]
          }
        },
        "required": [
          "gatewayId",
          "vCRef"
        ],
        "additionalProperties": false
      },
      "GatewayConfigurationType": {
        "title": "GatewayConfigurationType",
        "description": "Gateway Configuration.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "backwardCompatibilityMode": {
                "nullable": true,
                "description": "Compatibility mode. Default is false. If set to true, will allow users to write firewall rules in the old 1.5 format. The new format does not require to use direction in firewall rules. Also, for firewall rules to allow NAT traffic the filter is applied on the original IP addresses. Once set to true cannot be reverted back to false.",
                "type": "boolean"
              },
              "gatewayBackingConfig": {
                "nullable": true,
                "description": "Configuration of the vShield edge VM for this gateway. One of: compact, full.",
                "type": "string"
              },
              "gatewayInterfaces": {
                "nullable": true,
                "description": "List of Gateway interfaces.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GatewayInterfacesType"
                  }
                ]
              },
              "edgeGatewayServiceConfiguration": {
                "nullable": true,
                "description": "Represents Gateway Features.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GatewayFeaturesType"
                  }
                ]
              },
              "haEnabled": {
                "nullable": true,
                "description": "True if this gateway is highly available. (Requires two vShield edge VMs.)",
                "type": "boolean"
              },
              "useDefaultRouteForDnsRelay": {
                "nullable": true,
                "description": "True if the default gateway on the external network selected for default route should be used as the DNS relay.",
                "type": "boolean"
              },
              "syslogServerSettings": {
                "nullable": true,
                "description": "Syslog server addresses for gateway",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SyslogServerType"
                  }
                ]
              },
              "advancedNetworkingEnabled": {
                "nullable": true,
                "description": "True if the gateway uses advanced networking",
                "type": "boolean"
              },
              "distributedRoutingEnabled": {
                "nullable": true,
                "description": "True if gateway is attached to a Distributed Logical Router",
                "type": "boolean"
              },
              "fipsModeEnabled": {
                "nullable": true,
                "description": "True if FIPS mode is enabled for this gateway",
                "type": "boolean"
              }
            },
            "required": [
              "backwardCompatibilityMode",
              "gatewayBackingConfig",
              "gatewayInterfaces",
              "edgeGatewayServiceConfiguration",
              "haEnabled",
              "useDefaultRouteForDnsRelay",
              "syslogServerSettings",
              "advancedNetworkingEnabled",
              "distributedRoutingEnabled",
              "fipsModeEnabled"
            ],
            "additionalProperties": false
          }
        ]
      },
      "GatewayInterfacesType": {
        "title": "GatewayInterfacesType",
        "description": "A list of Gateway Interfaces.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "gatewayInterface": {
                "description": "Gateway Interface.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GatewayInterfaceType"
                }
              }
            },
            "required": [
              "gatewayInterface"
            ],
            "additionalProperties": false
          }
        ]
      },
      "GatewayInterfaceType": {
        "title": "GatewayInterfaceType",
        "description": "Gateway Interface configuration.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "nullable": true,
                "readOnly": true,
                "description": "Internally generated name for the Gateway Interface.",
                "type": "string"
              },
              "displayName": {
                "nullable": true,
                "readOnly": true,
                "description": "Gateway Interface display name.",
                "type": "string"
              },
              "network": {
                "nullable": true,
                "description": "A reference to the network connected to the gateway interface.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "interfaceType": {
                "nullable": true,
                "description": "The type of interface: One of: Uplink, Internal",
                "type": "string"
              },
              "subnetParticipation": {
                "description": "IP allocation per subnet.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SubnetParticipationType"
                }
              },
              "applyRateLimit": {
                "nullable": true,
                "description": "True if rate limiting is applied on this interface.",
                "type": "boolean"
              },
              "inRateLimit": {
                "nullable": true,
                "description": "Incoming rate limit expressed as Gbps.",
                "type": "number",
                "format": "double"
              },
              "outRateLimit": {
                "nullable": true,
                "description": "Outgoing rate limit expressed as Gbps.",
                "type": "number",
                "format": "double"
              },
              "useForDefaultRoute": {
                "nullable": true,
                "description": "True if this network is default route for the gateway.",
                "type": "boolean"
              }
            },
            "required": [
              "name",
              "displayName",
              "network",
              "interfaceType",
              "subnetParticipation",
              "applyRateLimit",
              "inRateLimit",
              "outRateLimit",
              "useForDefaultRoute"
            ],
            "additionalProperties": false
          }
        ]
      },
      "SyslogServerType": {
        "title": "SyslogServerType",
        "description": "Allows a user to configure syslog server settings for the gateway",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "tenantSyslogServerSettings": {
                "nullable": true,
                "description": "Tenant syslog server settings",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TenantSyslogServerSettingsType"
                  }
                ]
              }
            },
            "required": [
              "tenantSyslogServerSettings"
            ],
            "additionalProperties": false
          }
        ]
      },
      "EdgeGatewayFormFactorType": {
        "title": "EdgeGatewayFormFactorType",
        "description": "Allows a user to change the size of the gateway",
        "type": "object",
        "properties": {
          "gatewayType": {
            "nullable": true,
            "description": "Configuration of the vShield edge VM for this gateway. One of: compact, full, full4.",
            "type": "string"
          }
        },
        "required": [
          "gatewayType"
        ],
        "additionalProperties": false
      },
      "GatewayFeaturesType": {
        "title": "GatewayFeaturesType",
        "description": "Represents edge gateway services.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "SubnetParticipationType": {
        "title": "SubnetParticipationType",
        "description": "Allows to chose which subnets a gateway can be part of",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "gateway": {
                "description": "Gateway for subnet",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              },
              "netmask": {
                "description": "Nestmask for the subnet",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              },
              "ipAddress": {
                "nullable": true,
                "description": "Ip Address to be assigned. Keep empty or omit element for auto assignment",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              },
              "ipRanges": {
                "nullable": true,
                "description": "Range of IP addresses available for external interfaces.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpRangesType"
                  }
                ]
              },
              "useForDefaultRoute": {
                "nullable": true,
                "description": "True if this subnet is default route for the gateway. Defaults to True if this is the only subnet for this gateway. Otherwise defaults to False if omitted or empty.",
                "type": "boolean"
              }
            },
            "required": [
              "gateway",
              "netmask",
              "ipAddress",
              "ipRanges",
              "useForDefaultRoute"
            ],
            "additionalProperties": false
          }
        ]
      },
      "OrgType": {
        "title": "OrgType",
        "description": "Represents the user view of a vCloud Director organization.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityType"
          },
          {
            "type": "object",
            "properties": {
              "fullName": {
                "description": "Full name of the organization.",
                "type": "string"
              },
              "isEnabled": {
                "nullable": true,
                "readOnly": true,
                "description": "True if this organization is enabled (allows login and all other operations). Read\\-only in the user view. Modifiable in the admin view (AdminOrg element).",
                "type": "boolean"
              }
            },
            "required": [
              "fullName",
              "isEnabled"
            ],
            "additionalProperties": false
          }
        ]
      },
      "OrgListType": {
        "title": "OrgListType",
        "description": "Represents a list of organizations.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "org": {
                "readOnly": true,
                "description": "Reference to an organization.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReferenceType"
                }
              }
            },
            "required": [
              "org"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ProductSectionListType": {
        "title": "ProductSectionListType",
        "description": "Container for all ProductSection elements in a VAppTemplate, VApp, or Vm object.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "QueryResultType": {
        "title": "QueryResultType",
        "description": "Container type for query results in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "The name of the query that generated this result set.",
                "type": "string"
              },
              "pageSize": {
                "readOnly": true,
                "description": "The size of the pages into which the full result list is split.",
                "type": "integer"
              },
              "page": {
                "readOnly": true,
                "description": "The presented page of the full result list.",
                "type": "integer"
              }
            },
            "required": [
              "name",
              "pageSize",
              "page"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultRecordsType": {
        "title": "QueryResultRecordsType",
        "description": "Container for query results in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ContainerType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "QueryResultRecordType": {
        "title": "QueryResultRecordType",
        "description": "Base type for a single record from query result in records format. Subtypes define more specific elements.",
        "type": "object",
        "properties": {
          "link": {
            "readOnly": true,
            "description": "Contains a link to an operation associated with a specific relation type.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkType"
            }
          },
          "metadata": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MetadataType"
              }
            ]
          }
        },
        "required": [
          "link",
          "metadata"
        ],
        "additionalProperties": false
      },
      "QueryResultOrgRecordType": {
        "title": "QueryResultOrgRecordType",
        "description": "Type for a single organization query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "Organization name",
                "type": "string"
              },
              "isReadOnly": {
                "readOnly": true,
                "description": "True if this organization is read only",
                "type": "boolean"
              },
              "isEnabled": {
                "readOnly": true,
                "description": "True if this organization is enabled",
                "type": "boolean"
              },
              "deployedVMQuota": {
                "readOnly": true,
                "description": "Running VMs Quota",
                "type": "integer",
                "format": "int32"
              },
              "storedVMQuota": {
                "readOnly": true,
                "description": "Stored VM Quota",
                "type": "integer",
                "format": "int32"
              },
              "displayName": {
                "readOnly": true,
                "description": "Display name",
                "type": "string"
              },
              "canPublishCatalogs": {
                "readOnly": true,
                "description": "True if users from the organization can publish catalogs",
                "type": "boolean"
              },
              "numberOfCatalogs": {
                "readOnly": true,
                "description": "Number of catalogs",
                "type": "integer",
                "format": "int32"
              },
              "numberOfVdcs": {
                "readOnly": true,
                "description": "Number of VDCs",
                "type": "integer",
                "format": "int32"
              },
              "numberOfVApps": {
                "readOnly": true,
                "description": "Number of vApps",
                "type": "integer",
                "format": "int32"
              },
              "numberOfGroups": {
                "readOnly": true,
                "description": "Number of groups",
                "type": "integer",
                "format": "int32"
              },
              "numberOfDisks": {
                "readOnly": true,
                "description": "Number of disks",
                "type": "integer",
                "format": "int32"
              }
            },
            "required": [
              "name",
              "isReadOnly",
              "isEnabled",
              "deployedVMQuota",
              "storedVMQuota",
              "displayName",
              "canPublishCatalogs",
              "numberOfCatalogs",
              "numberOfVdcs",
              "numberOfVApps",
              "numberOfGroups",
              "numberOfDisks"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultOrgVdcRecordType": {
        "title": "QueryResultOrgVdcRecordType",
        "description": "Type for a single orgVdc query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "VDC name",
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "isEnabled": {
                "readOnly": true,
                "description": "True if this entity is enabled",
                "type": "boolean"
              },
              "cpuAllocationMhz": {
                "readOnly": true,
                "description": "CPU allocation in Mhz",
                "type": "integer",
                "format": "int64"
              },
              "cpuLimitMhz": {
                "readOnly": true,
                "description": "CPU limit in Mhz",
                "type": "integer",
                "format": "int64"
              },
              "cpuUsedMhz": {
                "readOnly": true,
                "description": "CPU used in Mhz",
                "type": "integer",
                "format": "int64"
              },
              "cpuReservedMhz": {
                "readOnly": true,
                "description": "CPU reserved in Mhz",
                "type": "integer",
                "format": "int64"
              },
              "memoryAllocationMB": {
                "readOnly": true,
                "description": "Memory allocation in MB",
                "type": "integer",
                "format": "int64"
              },
              "memoryLimitMB": {
                "readOnly": true,
                "description": "Memory limit in MB",
                "type": "integer",
                "format": "int64"
              },
              "memoryUsedMB": {
                "readOnly": true,
                "description": "Memory used in MB",
                "type": "integer",
                "format": "int64"
              },
              "memoryReservedMB": {
                "readOnly": true,
                "description": "Memory reserved in MB",
                "type": "integer",
                "format": "int64"
              },
              "storageAllocationMB": {
                "readOnly": true,
                "description": "Storage allocation in MB",
                "type": "integer",
                "format": "int64"
              },
              "storageLimitMB": {
                "readOnly": true,
                "description": "Storage limit in MB",
                "type": "integer",
                "format": "int64"
              },
              "storageUsedMB": {
                "readOnly": true,
                "description": "Storage used in MB",
                "type": "integer",
                "format": "int64"
              },
              "providerVdcName": {
                "readOnly": true,
                "description": "Provider VDC name",
                "type": "string"
              },
              "providerVdc": {
                "readOnly": true,
                "description": "Provider VDC reference or id",
                "type": "string"
              },
              "orgName": {
                "readOnly": true,
                "description": "Organization name",
                "type": "string"
              },
              "numberOfVApps": {
                "readOnly": true,
                "description": "Number of vApps",
                "type": "integer",
                "format": "int32"
              },
              "numberOfMedia": {
                "readOnly": true,
                "description": "Number of media",
                "type": "integer",
                "format": "int32"
              },
              "numberOfDisks": {
                "readOnly": true,
                "description": "Number of disks",
                "type": "integer",
                "format": "int32"
              },
              "numberOfVAppTemplates": {
                "readOnly": true,
                "deprecated": true,
                "description": "Number of vApp templates",
                "type": "integer",
                "format": "int32"
              },
              "isSystemVdc": {
                "readOnly": true,
                "description": "True if this VDC is used exclusively to support vShield Edge devices.",
                "type": "boolean"
              },
              "isBusy": {
                "readOnly": true,
                "description": "True if this entity is busy",
                "type": "boolean"
              },
              "status": {
                "readOnly": true,
                "description": "VDC status",
                "type": "string"
              },
              "numberOfDatastores": {
                "readOnly": true,
                "description": "Number of datastores",
                "type": "integer",
                "format": "int32"
              },
              "numberOfStorageProfiles": {
                "readOnly": true,
                "description": "Number of storage profiles",
                "type": "integer",
                "format": "int32"
              },
              "numberOfVMs": {
                "readOnly": true,
                "description": "Number of VMs",
                "type": "integer",
                "format": "int32"
              },
              "numberOfRunningVMs": {
                "readOnly": true,
                "description": "Number of Running VMs",
                "type": "integer",
                "format": "int32"
              },
              "networkPoolUniversalId": {
                "readOnly": true,
                "description": "Associated universal network pool",
                "type": "string"
              },
              "numberOfDeployedVApps": {
                "readOnly": true,
                "description": "Number of Deployed vApps",
                "type": "integer",
                "format": "int32"
              }
            },
            "required": [
              "name",
              "description",
              "isEnabled",
              "cpuAllocationMhz",
              "cpuLimitMhz",
              "cpuUsedMhz",
              "cpuReservedMhz",
              "memoryAllocationMB",
              "memoryLimitMB",
              "memoryUsedMB",
              "memoryReservedMB",
              "storageAllocationMB",
              "storageLimitMB",
              "storageUsedMB",
              "providerVdcName",
              "providerVdc",
              "orgName",
              "numberOfVApps",
              "numberOfMedia",
              "numberOfDisks",
              "numberOfVAppTemplates",
              "isSystemVdc",
              "isBusy",
              "status",
              "numberOfDatastores",
              "numberOfStorageProfiles",
              "numberOfVMs",
              "numberOfRunningVMs",
              "networkPoolUniversalId",
              "numberOfDeployedVApps"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultMediaRecordType": {
        "title": "QueryResultMediaRecordType",
        "description": "Type for a single media query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "ownerName": {
                "readOnly": true,
                "description": "Owner name",
                "type": "string"
              },
              "catalogName": {
                "readOnly": true,
                "description": "Catalog name",
                "type": "string"
              },
              "isPublished": {
                "readOnly": true,
                "description": "True if this media file is in a published catalog.",
                "type": "boolean"
              },
              "name": {
                "readOnly": true,
                "description": "Media name",
                "type": "string"
              },
              "vdc": {
                "readOnly": true,
                "description": "VDC reference or id",
                "type": "string"
              },
              "vdcName": {
                "readOnly": true,
                "description": "VDC name",
                "type": "string"
              },
              "org": {
                "readOnly": true,
                "description": "Organization reference or id",
                "type": "string"
              },
              "creationDate": {
                "readOnly": true,
                "description": "Creation date",
                "type": "string",
                "format": "date-time"
              },
              "isBusy": {
                "readOnly": true,
                "description": "True if this entity is busy",
                "type": "boolean"
              },
              "storageB": {
                "readOnly": true,
                "description": "Media storage in Bytes",
                "type": "integer",
                "format": "int64"
              },
              "owner": {
                "readOnly": true,
                "description": "Owner reference or id",
                "type": "string"
              },
              "catalog": {
                "readOnly": true,
                "description": "Catalog reference or id",
                "type": "string"
              },
              "catalogItem": {
                "readOnly": true,
                "description": "Catalog item reference or id",
                "type": "string"
              },
              "status": {
                "readOnly": true,
                "description": "Media status",
                "type": "string"
              },
              "storageProfileName": {
                "readOnly": true,
                "description": "Storage profile name",
                "type": "string"
              },
              "version": {
                "readOnly": true,
                "description": "Version",
                "type": "integer",
                "format": "int64"
              },
              "lastSuccessfulSync": {
                "readOnly": true,
                "description": "Date of last successful sync",
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "ownerName",
              "catalogName",
              "isPublished",
              "name",
              "vdc",
              "vdcName",
              "org",
              "creationDate",
              "isBusy",
              "storageB",
              "owner",
              "catalog",
              "catalogItem",
              "status",
              "storageProfileName",
              "version",
              "lastSuccessfulSync"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultVAppTemplateRecordType": {
        "title": "QueryResultVAppTemplateRecordType",
        "description": "Type for a single vAppTemplate query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "ownerName": {
                "readOnly": true,
                "description": "Owner name",
                "type": "string"
              },
              "catalogName": {
                "readOnly": true,
                "description": "Catalog name",
                "type": "string"
              },
              "isPublished": {
                "readOnly": true,
                "description": "True if this template is in a published catalog.",
                "type": "boolean"
              },
              "name": {
                "readOnly": true,
                "description": "Vapp template name",
                "type": "string"
              },
              "description": {
                "readOnly": true,
                "description": "User oriented textual description of the template.",
                "type": "string"
              },
              "vdc": {
                "readOnly": true,
                "description": "VDC reference or id",
                "type": "string"
              },
              "vdcName": {
                "readOnly": true,
                "description": "VDC name",
                "type": "string"
              },
              "org": {
                "readOnly": true,
                "description": "Organization reference or id",
                "type": "string"
              },
              "creationDate": {
                "readOnly": true,
                "description": "Creation date",
                "type": "string",
                "format": "date-time"
              },
              "isBusy": {
                "readOnly": true,
                "description": "True if this entity is busy",
                "type": "boolean"
              },
              "isGoldMaster": {
                "readOnly": true,
                "description": "True if this vApp template is a gold master.",
                "type": "boolean"
              },
              "isEnabled": {
                "readOnly": true,
                "description": "True if the containing VDC is enabled",
                "type": "boolean"
              },
              "status": {
                "readOnly": true,
                "description": "Vapp template status",
                "type": "string"
              },
              "isDeployed": {
                "readOnly": true,
                "description": "True if this vApp template is deployed",
                "type": "boolean"
              },
              "isExpired": {
                "readOnly": true,
                "description": "True if this vApp template is expired.",
                "type": "boolean"
              },
              "storageProfileName": {
                "readOnly": true,
                "description": "Storage profile name",
                "type": "string"
              },
              "version": {
                "readOnly": true,
                "description": "Version",
                "type": "integer",
                "format": "int64"
              },
              "lastSuccessfulSync": {
                "readOnly": true,
                "description": "Date of last successful sync",
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "ownerName",
              "catalogName",
              "isPublished",
              "name",
              "description",
              "vdc",
              "vdcName",
              "org",
              "creationDate",
              "isBusy",
              "isGoldMaster",
              "isEnabled",
              "status",
              "isDeployed",
              "isExpired",
              "storageProfileName",
              "version",
              "lastSuccessfulSync"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultVAppRecordType": {
        "title": "QueryResultVAppRecordType",
        "description": "Type for a single vApp query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "vApp name",
                "type": "string"
              },
              "vdc": {
                "readOnly": true,
                "description": "VDC reference or id",
                "type": "string"
              },
              "vdcName": {
                "readOnly": true,
                "description": "VDC name",
                "type": "string"
              },
              "isPublic": {
                "readOnly": true,
                "description": "True if this entity is public",
                "type": "boolean"
              },
              "isEnabled": {
                "readOnly": true,
                "description": "True if this entity is enabled",
                "type": "boolean"
              },
              "isBusy": {
                "readOnly": true,
                "description": "True if this entity is busy",
                "type": "boolean"
              },
              "creationDate": {
                "readOnly": true,
                "description": "Creation date",
                "type": "string",
                "format": "date-time"
              },
              "status": {
                "readOnly": true,
                "description": "Status",
                "type": "string"
              },
              "ownerName": {
                "readOnly": true,
                "description": "Owner name",
                "type": "string"
              },
              "isDeployed": {
                "readOnly": true,
                "description": "True if this entity is deployed",
                "type": "boolean"
              },
              "isInMaintenanceMode": {
                "readOnly": true,
                "description": "True if this entity is in maintenance mode",
                "type": "boolean"
              },
              "isAutoNature": {
                "readOnly": true,
                "description": "True if the parent vApp is a managed vApp",
                "type": "boolean"
              },
              "isExpired": {
                "readOnly": true,
                "description": "True if this vApp is expired.",
                "type": "boolean"
              }
            },
            "required": [
              "name",
              "vdc",
              "vdcName",
              "isPublic",
              "isEnabled",
              "isBusy",
              "creationDate",
              "status",
              "ownerName",
              "isDeployed",
              "isInMaintenanceMode",
              "isAutoNature",
              "isExpired"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultVMRecordType": {
        "title": "QueryResultVMRecordType",
        "description": "Type for a single vm query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "The name of the VM.",
                "type": "string"
              },
              "containerName": {
                "readOnly": true,
                "description": "The name of the vApp or vApp template that contains this VM.",
                "type": "string"
              },
              "container": {
                "readOnly": true,
                "description": "The ID of the vApp or vApp template that contains this VM.",
                "type": "string"
              },
              "ownerName": {
                "readOnly": true,
                "description": "The owner of the vApp or vApp template that contains this VM.",
                "type": "string"
              },
              "owner": {
                "readOnly": true,
                "description": "The ID of the owner of the vApp or vApp template that contains this VM.",
                "type": "string"
              },
              "vdc": {
                "readOnly": true,
                "description": "VDC reference or id",
                "type": "string"
              },
              "isVAppTemplate": {
                "readOnly": true,
                "description": "True if the VM belongs to a vApp template.",
                "type": "boolean"
              },
              "isDeleted": {
                "readOnly": true,
                "description": "True if this entity is deleted",
                "type": "boolean"
              },
              "guestOs": {
                "readOnly": true,
                "description": "Guest operating system",
                "type": "string"
              },
              "numberOfCpus": {
                "readOnly": true,
                "description": "Number of CPUs",
                "type": "integer",
                "format": "int32"
              },
              "memoryMB": {
                "readOnly": true,
                "description": "Memory in MB",
                "type": "integer",
                "format": "int32"
              },
              "status": {
                "readOnly": true,
                "description": "Status",
                "type": "string"
              },
              "networkName": {
                "readOnly": true,
                "description": "If configured, the name of the primary network, otherwise empty.",
                "type": "string"
              },
              "network": {
                "readOnly": true,
                "description": "If configured, the HRef of the primary network, otherwise empty.",
                "type": "string"
              },
              "ipAddress": {
                "readOnly": true,
                "description": "If configured, the IP Address of the VM on the primary network, otherwise empty.",
                "type": "string"
              },
              "isBusy": {
                "readOnly": true,
                "description": "True if this entity is busy",
                "type": "boolean"
              },
              "isDeployed": {
                "readOnly": true,
                "description": "True if this entity is deployed",
                "type": "boolean"
              },
              "isPublished": {
                "readOnly": true,
                "description": "True if this entity is in a published catalog",
                "type": "boolean"
              },
              "catalogName": {
                "readOnly": true,
                "description": "Catalog name",
                "type": "string"
              },
              "hardwareVersion": {
                "readOnly": true,
                "description": "Hardware version",
                "type": "integer",
                "format": "int32"
              },
              "vmToolsStatus": {
                "type": "string"
              },
              "isInMaintenanceMode": {
                "readOnly": true,
                "description": "True if this entity is in maintenance mode",
                "type": "boolean"
              },
              "isAutoNature": {
                "readOnly": true,
                "description": "True if the parent vApp is a managed vApp",
                "type": "boolean"
              },
              "storageProfileName": {
                "readOnly": true,
                "description": "Storage profile name",
                "type": "string"
              },
              "gcStatus": {
                "readOnly": true,
                "description": "GC status of this VM.",
                "type": "string"
              },
              "autoUndeployDate": {
                "readOnly": true,
                "description": "autoUndeployDate",
                "type": "string",
                "format": "date-time"
              },
              "autoDeleteDate": {
                "readOnly": true,
                "description": "autoDeleteDate",
                "type": "string",
                "format": "date-time"
              },
              "isAutoUndeployNotified": {
                "type": "boolean"
              },
              "isAutoDeleteNotified": {
                "type": "boolean"
              }
            },
            "required": [
              "name",
              "containerName",
              "container",
              "ownerName",
              "owner",
              "vdc",
              "isVAppTemplate",
              "isDeleted",
              "guestOs",
              "numberOfCpus",
              "memoryMB",
              "status",
              "networkName",
              "network",
              "ipAddress",
              "isBusy",
              "isDeployed",
              "isPublished",
              "catalogName",
              "hardwareVersion",
              "vmToolsStatus",
              "isInMaintenanceMode",
              "isAutoNature",
              "storageProfileName",
              "gcStatus",
              "autoUndeployDate",
              "autoDeleteDate",
              "isAutoUndeployNotified",
              "isAutoDeleteNotified"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultOrgNetworkRecordType": {
        "title": "QueryResultOrgNetworkRecordType",
        "description": "Type for a single orgNetwork query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "The name of this network.",
                "type": "string"
              },
              "networkPool": {
                "readOnly": true,
                "description": "Network pool reference or id",
                "type": "string"
              },
              "networkPoolName": {
                "readOnly": true,
                "description": "Network pool name",
                "type": "string"
              },
              "org": {
                "readOnly": true,
                "description": "Organization reference or id",
                "type": "string"
              },
              "ipScopeId": {
                "readOnly": true,
                "description": "IP scope object",
                "type": "string"
              },
              "isIpScopeInherited": {
                "readOnly": true,
                "description": "True if this network's IP scope is inherited.",
                "type": "boolean"
              },
              "gateway": {
                "readOnly": true,
                "description": "Gateway",
                "type": "string"
              },
              "netmask": {
                "readOnly": true,
                "description": "Netmask",
                "type": "string"
              },
              "dns1": {
                "readOnly": true,
                "description": "Primary DNS",
                "type": "string"
              },
              "dns2": {
                "readOnly": true,
                "description": "Secondary DNS",
                "type": "string"
              },
              "dnsSuffix": {
                "readOnly": true,
                "description": "DNS suffix",
                "type": "string"
              },
              "isBusy": {
                "readOnly": true,
                "description": "True if this entity is busy",
                "type": "boolean"
              }
            },
            "required": [
              "name",
              "networkPool",
              "networkPoolName",
              "org",
              "ipScopeId",
              "isIpScopeInherited",
              "gateway",
              "netmask",
              "dns1",
              "dns2",
              "dnsSuffix",
              "isBusy"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultAdminOrgNetworkRecordType": {
        "title": "QueryResultAdminOrgNetworkRecordType",
        "description": "Type for a single adminOrgNetwork query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "The name of this network.",
                "type": "string"
              },
              "orgName": {
                "readOnly": true,
                "description": "Organization name",
                "type": "string"
              },
              "networkPool": {
                "readOnly": true,
                "description": "Network pool reference or id",
                "type": "string"
              },
              "networkPoolName": {
                "readOnly": true,
                "description": "Network pool name",
                "type": "string"
              },
              "org": {
                "readOnly": true,
                "description": "Organization reference or id",
                "type": "string"
              },
              "ipScopeId": {
                "readOnly": true,
                "description": "IP scope object",
                "type": "string"
              },
              "isIpScopeInherited": {
                "readOnly": true,
                "description": "True if this network's IP scope is inherited.",
                "type": "boolean"
              },
              "gateway": {
                "readOnly": true,
                "description": "Gateway",
                "type": "string"
              },
              "netmask": {
                "readOnly": true,
                "description": "Netmask",
                "type": "string"
              },
              "dns1": {
                "readOnly": true,
                "description": "Primary DNS",
                "type": "string"
              },
              "dns2": {
                "readOnly": true,
                "description": "Secondary DNS",
                "type": "string"
              },
              "isBusy": {
                "readOnly": true,
                "description": "True if this entity is busy",
                "type": "boolean"
              }
            },
            "required": [
              "name",
              "orgName",
              "networkPool",
              "networkPoolName",
              "org",
              "ipScopeId",
              "isIpScopeInherited",
              "gateway",
              "netmask",
              "dns1",
              "dns2",
              "isBusy"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultVAppNetworkRecordType": {
        "title": "QueryResultVAppNetworkRecordType",
        "description": "Type for a single vAppNetwork query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "The name of this network.",
                "type": "string"
              },
              "ipScopeId": {
                "readOnly": true,
                "description": "IP scope object",
                "type": "string"
              },
              "isIpScopeInherited": {
                "readOnly": true,
                "description": "True if this network's IP scope is inherited.",
                "type": "boolean"
              },
              "gateway": {
                "readOnly": true,
                "description": "Gateway",
                "type": "string"
              },
              "netmask": {
                "readOnly": true,
                "description": "Netmask",
                "type": "string"
              },
              "dns1": {
                "readOnly": true,
                "description": "Primary DNS",
                "type": "string"
              },
              "dns2": {
                "readOnly": true,
                "description": "Secondary DNS",
                "type": "string"
              },
              "dnsSuffix": {
                "readOnly": true,
                "description": "DNS suffix",
                "type": "string"
              },
              "vApp": {
                "readOnly": true,
                "description": "VApp reference or id",
                "type": "string"
              },
              "vAppName": {
                "readOnly": true,
                "description": "Vapp name",
                "type": "string"
              },
              "isBusy": {
                "readOnly": true,
                "description": "True if this entity is busy",
                "type": "boolean"
              }
            },
            "required": [
              "name",
              "ipScopeId",
              "isIpScopeInherited",
              "gateway",
              "netmask",
              "dns1",
              "dns2",
              "dnsSuffix",
              "vApp",
              "vAppName",
              "isBusy"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultCatalogRecordType": {
        "title": "QueryResultCatalogRecordType",
        "description": "Type for a single catalog query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "The name of this catalog.",
                "type": "string"
              },
              "description": {
                "readOnly": true,
                "description": "Catalog description",
                "type": "string"
              },
              "isPublished": {
                "readOnly": true,
                "description": "True if this catalog is shared to all organizations.",
                "type": "boolean"
              },
              "isShared": {
                "readOnly": true,
                "description": "True if this catalog is shared.",
                "type": "boolean"
              },
              "creationDate": {
                "readOnly": true,
                "description": "Creation date",
                "type": "string",
                "format": "date-time"
              },
              "orgName": {
                "readOnly": true,
                "description": "Organization name",
                "type": "string"
              },
              "ownerName": {
                "readOnly": true,
                "description": "Owner name",
                "type": "string"
              },
              "numberOfVAppTemplates": {
                "readOnly": true,
                "description": "Number of vApp templates",
                "type": "integer",
                "format": "int32"
              },
              "numberOfMedia": {
                "readOnly": true,
                "description": "Number of media",
                "type": "integer",
                "format": "int32"
              },
              "owner": {
                "readOnly": true,
                "description": "Owner reference or id",
                "type": "string"
              },
              "publishSubscriptionType": {
                "readOnly": true,
                "description": "PUBLISHED if published externally, SUBSCRIBED if subscribed to an external catalog, UNPUBLISHED otherwise.",
                "type": "string"
              },
              "version": {
                "readOnly": true,
                "description": "Version",
                "type": "integer",
                "format": "int64"
              },
              "status": {
                "readOnly": true,
                "description": "Status",
                "type": "string"
              }
            },
            "required": [
              "name",
              "description",
              "isPublished",
              "isShared",
              "creationDate",
              "orgName",
              "ownerName",
              "numberOfVAppTemplates",
              "numberOfMedia",
              "owner",
              "publishSubscriptionType",
              "version",
              "status"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultAdminVdcRecordType": {
        "title": "QueryResultAdminVdcRecordType",
        "description": "Type for a single adminOrgVdc query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "The name of this VDC.",
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "isEnabled": {
                "readOnly": true,
                "description": "True if this entity is enabled",
                "type": "boolean"
              },
              "cpuAllocationMhz": {
                "readOnly": true,
                "description": "CPU allocation in Mhz",
                "type": "integer",
                "format": "int64"
              },
              "cpuLimitMhz": {
                "readOnly": true,
                "description": "CPU limit in Mhz",
                "type": "integer",
                "format": "int64"
              },
              "cpuUsedMhz": {
                "readOnly": true,
                "description": "CPU used in Mhz",
                "type": "integer",
                "format": "int64"
              },
              "memoryAllocationMB": {
                "readOnly": true,
                "description": "Memory allocation in MB",
                "type": "integer",
                "format": "int64"
              },
              "memoryLimitMB": {
                "readOnly": true,
                "description": "Memory limit in MB",
                "type": "integer",
                "format": "int64"
              },
              "memoryUsedMB": {
                "readOnly": true,
                "description": "Memory used in MB",
                "type": "integer",
                "format": "int64"
              },
              "storageAllocationMB": {
                "readOnly": true,
                "description": "Storage allocation in MB",
                "type": "integer",
                "format": "int64"
              },
              "storageLimitMB": {
                "readOnly": true,
                "description": "Storage limit in MB",
                "type": "integer",
                "format": "int64"
              },
              "storageUsedMB": {
                "readOnly": true,
                "description": "Storage used in MB",
                "type": "integer",
                "format": "int64"
              },
              "providerVdcName": {
                "readOnly": true,
                "description": "Provider VDC name",
                "type": "string"
              },
              "providerVdc": {
                "readOnly": true,
                "description": "Provider VDC reference or id",
                "type": "string"
              },
              "orgName": {
                "readOnly": true,
                "description": "Organization name",
                "type": "string"
              },
              "org": {
                "readOnly": true,
                "description": "Organization reference or id",
                "type": "string"
              },
              "numberOfVApps": {
                "readOnly": true,
                "description": "Number of vApps",
                "type": "integer",
                "format": "int32"
              },
              "numberOfMedia": {
                "readOnly": true,
                "description": "Number of media",
                "type": "integer",
                "format": "int32"
              },
              "numberOfDisks": {
                "readOnly": true,
                "description": "Number of disks",
                "type": "integer",
                "format": "int32"
              },
              "numberOfVAppTemplates": {
                "readOnly": true,
                "deprecated": true,
                "description": "Number of vApp templates",
                "type": "integer",
                "format": "int32"
              },
              "isSystemVdc": {
                "readOnly": true,
                "description": "True if this VDC is used exclusively to support vShield Edge devices.",
                "type": "boolean"
              },
              "isBusy": {
                "readOnly": true,
                "description": "True if this entity is busy",
                "type": "boolean"
              },
              "status": {
                "readOnly": true,
                "description": "Status",
                "type": "string"
              },
              "networkPool": {
                "readOnly": true,
                "description": "Network pool reference or id",
                "type": "string"
              },
              "numberOfStorageProfiles": {
                "readOnly": true,
                "description": "Number of storage profiles",
                "type": "integer",
                "format": "int32"
              },
              "numberOfVMs": {
                "readOnly": true,
                "description": "Number of VMs",
                "type": "integer",
                "format": "int32"
              },
              "networkPoolUniversalId": {
                "readOnly": true,
                "description": "Associated universal network pool",
                "type": "string"
              },
              "numberOfRunningVMs": {
                "readOnly": true,
                "description": "Number of Running VMs",
                "type": "integer",
                "format": "int32"
              },
              "numberOfDeployedVApps": {
                "readOnly": true,
                "description": "Number of Deployed vApps",
                "type": "integer",
                "format": "int32"
              }
            },
            "required": [
              "name",
              "description",
              "isEnabled",
              "cpuAllocationMhz",
              "cpuLimitMhz",
              "cpuUsedMhz",
              "memoryAllocationMB",
              "memoryLimitMB",
              "memoryUsedMB",
              "storageAllocationMB",
              "storageLimitMB",
              "storageUsedMB",
              "providerVdcName",
              "providerVdc",
              "orgName",
              "org",
              "numberOfVApps",
              "numberOfMedia",
              "numberOfDisks",
              "numberOfVAppTemplates",
              "isSystemVdc",
              "isBusy",
              "status",
              "networkPool",
              "numberOfStorageProfiles",
              "numberOfVMs",
              "networkPoolUniversalId",
              "numberOfRunningVMs",
              "numberOfDeployedVApps"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultVMWProviderVdcRecordType": {
        "title": "QueryResultVMWProviderVdcRecordType",
        "description": "Type for a single providerVdc query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "The name of this Provider VDC.",
                "type": "string"
              },
              "isEnabled": {
                "readOnly": true,
                "description": "True if this entity is enabled",
                "type": "boolean"
              },
              "isDeleted": {
                "readOnly": true,
                "description": "True if this entity is deleted",
                "type": "boolean"
              },
              "vcpuRatingMhz": {
                "readOnly": true,
                "deprecated": true,
                "description": "vCpu rating in Mhz",
                "type": "integer",
                "format": "int32"
              },
              "cpuUsedMhz": {
                "readOnly": true,
                "description": "CPU used in Mhz",
                "type": "integer",
                "format": "int64"
              },
              "cpuLimitMhz": {
                "readOnly": true,
                "description": "CPU limit in Mhz",
                "type": "integer",
                "format": "int64"
              },
              "cpuAllocationMhz": {
                "readOnly": true,
                "description": "CPU allocation in Mhz",
                "type": "integer",
                "format": "int64"
              },
              "memoryUsedMB": {
                "readOnly": true,
                "description": "Memory used in MB",
                "type": "integer",
                "format": "int64"
              },
              "memoryLimitMB": {
                "readOnly": true,
                "description": "Memory limit in MB",
                "type": "integer",
                "format": "int64"
              },
              "memoryAllocationMB": {
                "readOnly": true,
                "description": "Memory allocation in MB",
                "type": "integer",
                "format": "int64"
              },
              "storageUsedMB": {
                "readOnly": true,
                "description": "Storage used in MB",
                "type": "integer",
                "format": "int64"
              },
              "storageLimitMB": {
                "readOnly": true,
                "description": "Storage limit in MB",
                "type": "integer",
                "format": "int64"
              },
              "storageAllocationMB": {
                "readOnly": true,
                "description": "Storage allocation in MB",
                "type": "integer",
                "format": "int64"
              },
              "numberOfDatastores": {
                "readOnly": true,
                "description": "Number of datastores",
                "type": "integer",
                "format": "int32"
              },
              "numberOfVdcs": {
                "readOnly": true,
                "description": "Number of vDCs",
                "type": "integer",
                "format": "int32"
              },
              "isBusy": {
                "readOnly": true,
                "description": "True if this entity is busy",
                "type": "boolean"
              },
              "status": {
                "readOnly": true,
                "description": "Status",
                "type": "string"
              },
              "numberOfStorageProfiles": {
                "readOnly": true,
                "description": "Number of storage profiles",
                "type": "integer",
                "format": "int32"
              }
            },
            "required": [
              "name",
              "isEnabled",
              "isDeleted",
              "vcpuRatingMhz",
              "cpuUsedMhz",
              "cpuLimitMhz",
              "cpuAllocationMhz",
              "memoryUsedMB",
              "memoryLimitMB",
              "memoryAllocationMB",
              "storageUsedMB",
              "storageLimitMB",
              "storageAllocationMB",
              "numberOfDatastores",
              "numberOfVdcs",
              "isBusy",
              "status",
              "numberOfStorageProfiles"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultNetworkRecordType": {
        "title": "QueryResultNetworkRecordType",
        "description": "Type for a single externalNetwork query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "The name of this network.",
                "type": "string"
              },
              "ipScopeId": {
                "readOnly": true,
                "description": "IP scope object of this network.",
                "type": "string"
              },
              "gateway": {
                "readOnly": true,
                "description": "Gateway for the network",
                "type": "string"
              },
              "netmask": {
                "readOnly": true,
                "description": "Netmask for the network",
                "type": "string"
              },
              "dns1": {
                "readOnly": true,
                "description": "Primary DNS for the network",
                "type": "string"
              },
              "dns2": {
                "readOnly": true,
                "description": "Secondary DNS for the network",
                "type": "string"
              },
              "dnsSuffix": {
                "readOnly": true,
                "description": "DNS suffix for the network",
                "type": "string"
              },
              "isBusy": {
                "readOnly": true,
                "description": "True if this entity is busy",
                "type": "boolean"
              }
            },
            "required": [
              "name",
              "ipScopeId",
              "gateway",
              "netmask",
              "dns1",
              "dns2",
              "dnsSuffix",
              "isBusy"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultGroupRecordType": {
        "title": "QueryResultGroupRecordType",
        "description": "Type for a single group query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "The name of this group.",
                "type": "string"
              },
              "roleName": {
                "readOnly": true,
                "description": "Role name",
                "type": "string"
              },
              "isReadOnly": {
                "readOnly": true,
                "description": "True if this entity is read\\-only.",
                "type": "boolean"
              },
              "identityProviderType": {
                "readOnly": true,
                "description": "Shows the identity provider type of the group",
                "type": "string"
              }
            },
            "required": [
              "name",
              "roleName",
              "isReadOnly",
              "identityProviderType"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultUserRecordType": {
        "title": "QueryResultUserRecordType",
        "description": "Type for a single user query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "The name of this user.",
                "type": "string"
              },
              "fullName": {
                "readOnly": true,
                "description": "The full name of this user.",
                "type": "string"
              },
              "isEnabled": {
                "readOnly": true,
                "description": "True if this entity is enabled",
                "type": "boolean"
              },
              "numberOfDeployedVMs": {
                "readOnly": true,
                "description": "Number of deployed VMs",
                "type": "integer",
                "format": "int32"
              },
              "deployedVMQuota": {
                "readOnly": true,
                "description": "Running VMs Quota",
                "type": "integer",
                "format": "int32"
              },
              "numberOfStoredVMs": {
                "readOnly": true,
                "description": "Number of stored VMs",
                "type": "integer",
                "format": "int32"
              },
              "storedVMQuota": {
                "readOnly": true,
                "description": "Stored VM Quota",
                "type": "integer",
                "format": "int32"
              },
              "isLdapUser": {
                "readOnly": true,
                "description": "If the identity provider type is INTEGRATED, true if the user was imported from LDAP",
                "type": "boolean"
              },
              "identityProviderType": {
                "readOnly": true,
                "description": "Shows the identity provider type of the user",
                "type": "string"
              }
            },
            "required": [
              "name",
              "fullName",
              "isEnabled",
              "numberOfDeployedVMs",
              "deployedVMQuota",
              "numberOfStoredVMs",
              "storedVMQuota",
              "isLdapUser",
              "identityProviderType"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultStrandedUserRecordType": {
        "title": "QueryResultStrandedUserRecordType",
        "description": "Type for a single strandedUser query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "The name of a stranded user.",
                "type": "string"
              },
              "fullName": {
                "readOnly": true,
                "description": "The full name of this user.",
                "type": "string"
              },
              "isInSync": {
                "readOnly": true,
                "description": "True if this list is up to date.",
                "type": "boolean"
              },
              "numberOfDeployedVMs": {
                "readOnly": true,
                "description": "Number of deployed VMs",
                "type": "integer",
                "format": "int32"
              },
              "numberOfStoredVMs": {
                "readOnly": true,
                "description": "Number of stored VMs",
                "type": "integer",
                "format": "int32"
              },
              "org": {
                "readOnly": true,
                "description": "Organization reference or id",
                "type": "string"
              }
            },
            "required": [
              "name",
              "fullName",
              "isInSync",
              "numberOfDeployedVMs",
              "numberOfStoredVMs",
              "org"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultRoleRecordType": {
        "title": "QueryResultRoleRecordType",
        "description": "Type for a single role query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "The name of this role.",
                "type": "string"
              },
              "isReadOnly": {
                "readOnly": true,
                "description": "True if this entity is read\\-only.",
                "type": "boolean"
              }
            },
            "required": [
              "name",
              "isReadOnly"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultAllocatedExternalAddressRecordType": {
        "title": "QueryResultAllocatedExternalAddressRecordType",
        "description": "Type for a single allocatedExternalAddress query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "network": {
                "readOnly": true,
                "description": "Network reference or id",
                "type": "string"
              },
              "ipAddress": {
                "readOnly": true,
                "description": "Allocated IP address",
                "type": "string"
              },
              "linkedNetwork": {
                "readOnly": true,
                "description": "Linked network reference or id",
                "type": "string"
              }
            },
            "required": [
              "network",
              "ipAddress",
              "linkedNetwork"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultEventRecordType": {
        "title": "QueryResultEventRecordType",
        "description": "Type for a single event query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "eventType": {
                "readOnly": true,
                "description": "Event type",
                "type": "string"
              },
              "timeStamp": {
                "readOnly": true,
                "description": "Time stamp",
                "type": "string",
                "format": "date-time"
              },
              "eventStatus": {
                "readOnly": true,
                "description": "Event status",
                "type": "integer",
                "format": "int32"
              },
              "userName": {
                "readOnly": true,
                "description": "User name",
                "type": "string"
              },
              "orgName": {
                "readOnly": true,
                "description": "Organization name",
                "type": "string"
              },
              "entityType": {
                "readOnly": true,
                "description": "Entity type",
                "type": "string"
              },
              "entityName": {
                "readOnly": true,
                "description": "Entity name",
                "type": "string"
              },
              "serviceNamespace": {
                "readOnly": true,
                "description": "Service name space",
                "type": "string"
              },
              "entity": {
                "readOnly": true,
                "description": "Entity reference or id",
                "type": "string"
              }
            },
            "required": [
              "eventType",
              "timeStamp",
              "eventStatus",
              "userName",
              "orgName",
              "entityType",
              "entityName",
              "serviceNamespace",
              "entity"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultResourcePoolRecordType": {
        "title": "QueryResultResourcePoolRecordType",
        "description": "Type for a single resourcePool query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "The name of this resource pool.",
                "type": "string"
              },
              "moref": {
                "readOnly": true,
                "description": "Managed object reference",
                "type": "string"
              },
              "isDeleted": {
                "readOnly": true,
                "description": "True if this entity is deleted",
                "type": "boolean"
              },
              "vc": {
                "readOnly": true,
                "description": "Virtual center reference or id",
                "type": "string"
              },
              "vcName": {
                "readOnly": true,
                "description": "Vitual center name",
                "type": "string"
              }
            },
            "required": [
              "name",
              "moref",
              "isDeleted",
              "vc",
              "vcName"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultDatastoreRecordType": {
        "title": "QueryResultDatastoreRecordType",
        "description": "Type for a single datastore query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "The name of this datastore.",
                "type": "string"
              },
              "datastoreType": {
                "readOnly": true,
                "description": "Datastore type",
                "type": "string"
              },
              "isEnabled": {
                "readOnly": true,
                "description": "True if this entity is enabled",
                "type": "boolean"
              },
              "isDeleted": {
                "readOnly": true,
                "description": "True if this entity is deleted",
                "type": "boolean"
              },
              "storageUsedMB": {
                "readOnly": true,
                "description": "Storage used in MB",
                "type": "integer",
                "format": "int64"
              },
              "storageMB": {
                "readOnly": true,
                "description": "Storage in MB",
                "type": "integer",
                "format": "int64"
              },
              "provisionedStorageMB": {
                "readOnly": true,
                "description": "Provisioned storage in MB",
                "type": "integer",
                "format": "int64"
              },
              "requestedStorageMB": {
                "readOnly": true,
                "description": "Requested storage in MB",
                "type": "integer",
                "format": "int64"
              },
              "vc": {
                "readOnly": true,
                "description": "Virtual center reference or id",
                "type": "string"
              },
              "vcName": {
                "readOnly": true,
                "description": "Vitual center name",
                "type": "string"
              },
              "moref": {
                "readOnly": true,
                "description": "Managed object reference",
                "type": "string"
              },
              "numberOfProviderVdcs": {
                "readOnly": true,
                "description": "Number of provider vDCs",
                "type": "integer",
                "format": "int32"
              },
              "iopsCapacity": {
                "readOnly": true,
                "description": "Total IOPS capacity",
                "type": "integer",
                "format": "int64"
              },
              "iopsAllocated": {
                "readOnly": true,
                "description": "Total IOPS used (allocated) by all provisioned disks",
                "type": "integer",
                "format": "int64"
              }
            },
            "required": [
              "name",
              "datastoreType",
              "isEnabled",
              "isDeleted",
              "storageUsedMB",
              "storageMB",
              "provisionedStorageMB",
              "requestedStorageMB",
              "vc",
              "vcName",
              "moref",
              "numberOfProviderVdcs",
              "iopsCapacity",
              "iopsAllocated"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultNetworkPoolRecordType": {
        "title": "QueryResultNetworkPoolRecordType",
        "description": "Type for a single networkPool query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "Network pool name",
                "type": "string"
              },
              "networkPoolType": {
                "readOnly": true,
                "description": "Type of networkpool (0=Vlan backed network pool; 1=vNI backed network pool;2=Portgroup backed network pool)",
                "type": "integer",
                "format": "int32"
              },
              "isBusy": {
                "readOnly": true,
                "description": "True if this entity is busy",
                "type": "boolean"
              },
              "universalId": {
                "readOnly": true,
                "description": "cross\\-vc unique id for universal transport zone",
                "type": "string"
              }
            },
            "required": [
              "name",
              "networkPoolType",
              "isBusy",
              "universalId"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultPortgroupRecordType": {
        "title": "QueryResultPortgroupRecordType",
        "description": "Type for a single portgroup query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "moref": {
                "readOnly": true,
                "description": "Managed object reference of the portgroup",
                "type": "string"
              },
              "name": {
                "readOnly": true,
                "description": "Portgroup name",
                "type": "string"
              },
              "portgroupType": {
                "readOnly": true,
                "description": "Portgroup type",
                "type": "string"
              },
              "vc": {
                "readOnly": true,
                "description": "Virtual center reference or id",
                "type": "string"
              },
              "vcName": {
                "readOnly": true,
                "description": "Vitual center name associated with the portgroup",
                "type": "string"
              },
              "isVCEnabled": {
                "readOnly": true,
                "description": "True if the associated vCenter is enabled.",
                "type": "boolean"
              },
              "network": {
                "readOnly": true,
                "description": "Network reference or id",
                "type": "string"
              },
              "networkName": {
                "readOnly": true,
                "description": "Name of the network that uses the portgroup",
                "type": "string"
              },
              "scopeType": {
                "readOnly": true,
                "description": "Scope of network using the portgroup(1=Global, 2=Organization, 3=vApp)",
                "type": "integer",
                "format": "int32"
              }
            },
            "required": [
              "moref",
              "name",
              "portgroupType",
              "vc",
              "vcName",
              "isVCEnabled",
              "network",
              "networkName",
              "scopeType"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultDvSwitchRecordType": {
        "title": "QueryResultDvSwitchRecordType",
        "description": "Type for a single dvSwitch query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "moref": {
                "readOnly": true,
                "description": "Managed object reference of DV Switch",
                "type": "string"
              },
              "name": {
                "readOnly": true,
                "description": "Virtual center name",
                "type": "string"
              },
              "vc": {
                "readOnly": true,
                "description": "Virtual center reference or id",
                "type": "string"
              },
              "vcName": {
                "readOnly": true,
                "description": "Vitual center name",
                "type": "string"
              },
              "isVCEnabled": {
                "readOnly": true,
                "description": "True if the associated vCenter is enabled.",
                "type": "boolean"
              }
            },
            "required": [
              "moref",
              "name",
              "vc",
              "vcName",
              "isVCEnabled"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultCellRecordType": {
        "title": "QueryResultCellRecordType",
        "description": "Type for a single cell query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "primaryIp": {
                "readOnly": true,
                "description": "Primary IP",
                "type": "string"
              },
              "name": {
                "readOnly": true,
                "description": "The Cell name",
                "type": "string"
              },
              "isActive": {
                "readOnly": true,
                "description": "True if the cell is active",
                "type": "integer",
                "format": "int32"
              },
              "isVMwareVc": {
                "readOnly": true,
                "description": "True if the cell is in vCenter inventory.",
                "type": "integer",
                "format": "int32"
              },
              "buildDate": {
                "readOnly": true,
                "description": "Build date",
                "type": "string",
                "format": "date-time"
              },
              "version": {
                "readOnly": true,
                "description": "Version",
                "type": "string"
              }
            },
            "required": [
              "primaryIp",
              "name",
              "isActive",
              "isVMwareVc",
              "buildDate",
              "version"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultVirtualCenterRecordType": {
        "title": "QueryResultVirtualCenterRecordType",
        "description": "Type for a single virtualCenter query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "The name of this vCenter.",
                "type": "string"
              },
              "url": {
                "readOnly": true,
                "description": "Url",
                "type": "string"
              },
              "userName": {
                "readOnly": true,
                "description": "User name",
                "type": "string"
              },
              "isEnabled": {
                "readOnly": true,
                "description": "True if this entity is enabled",
                "type": "boolean"
              },
              "vcVersion": {
                "readOnly": true,
                "description": "Virtual center version",
                "type": "string"
              },
              "status": {
                "readOnly": true,
                "description": "Status",
                "type": "string"
              },
              "vsmIP": {
                "readOnly": true,
                "description": "vShield IP address",
                "type": "string"
              },
              "isBusy": {
                "readOnly": true,
                "description": "True if this entity is busy",
                "type": "boolean"
              },
              "listenerState": {
                "readOnly": true,
                "description": "The state of the listener. One of {INVALID\\_SETTINGS, UNSUPPORTED, DISCONNECTED, CONNECTING, CONNECTED\\_SYNCING, CONNECTED, ADMIN\\_DISCONNECTED}.",
                "type": "string"
              },
              "uuid": {
                "readOnly": true,
                "description": "Uuid",
                "type": "string"
              },
              "isSupported": {
                "readOnly": true,
                "description": "True if this vCenter version is supported by this release of vCloud Director.",
                "type": "boolean"
              }
            },
            "required": [
              "name",
              "url",
              "userName",
              "isEnabled",
              "vcVersion",
              "status",
              "vsmIP",
              "isBusy",
              "listenerState",
              "uuid",
              "isSupported"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultHostRecordType": {
        "title": "QueryResultHostRecordType",
        "description": "Type for a single host query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "The name of this host.",
                "type": "string"
              },
              "isEnabled": {
                "readOnly": true,
                "description": "True if this entity is enabled",
                "type": "boolean"
              },
              "isDeleted": {
                "readOnly": true,
                "description": "True if this entity is deleted",
                "type": "boolean"
              },
              "isBusy": {
                "readOnly": true,
                "description": "True if this host has tasks in progress",
                "type": "boolean"
              },
              "isPrepared": {
                "readOnly": true,
                "description": "True if this host is prepared",
                "type": "boolean"
              },
              "isSupported": {
                "readOnly": true,
                "description": "True if this host's ESXi version is supported by this release of vCloud Director.",
                "type": "boolean"
              },
              "isHung": {
                "readOnly": true,
                "description": "True if this host is hung.",
                "type": "boolean"
              },
              "isPendingUpgrade": {
                "readOnly": true,
                "description": "True if this host has an upgrade pending.",
                "type": "boolean"
              },
              "state": {
                "readOnly": true,
                "description": "State",
                "type": "integer",
                "format": "int32"
              },
              "osVersion": {
                "readOnly": true,
                "description": "Operating system version",
                "type": "string"
              },
              "isCrossHostEnabled": {
                "readOnly": true,
                "description": "True if this host is cross\\-host enabled.",
                "type": "boolean"
              },
              "numberOfVMs": {
                "readOnly": true,
                "description": "Number of VMs",
                "type": "integer",
                "format": "int32"
              },
              "isInMaintenanceMode": {
                "readOnly": true,
                "description": "True if this host is in maintenance mode.",
                "type": "boolean"
              },
              "vc": {
                "readOnly": true,
                "description": "Virtual center reference or id",
                "type": "string"
              },
              "vcName": {
                "readOnly": true,
                "description": "Vitual center name",
                "type": "string"
              }
            },
            "required": [
              "name",
              "isEnabled",
              "isDeleted",
              "isBusy",
              "isPrepared",
              "isSupported",
              "isHung",
              "isPendingUpgrade",
              "state",
              "osVersion",
              "isCrossHostEnabled",
              "numberOfVMs",
              "isInMaintenanceMode",
              "vc",
              "vcName"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultAdminVAppRecordType": {
        "title": "QueryResultAdminVAppRecordType",
        "description": "Type for a single adminVApp query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "The name of this vApp.",
                "type": "string"
              },
              "org": {
                "readOnly": true,
                "description": "Organization reference or id",
                "type": "string"
              },
              "vdc": {
                "readOnly": true,
                "description": "VDC reference or id",
                "type": "string"
              },
              "vdcName": {
                "readOnly": true,
                "description": "VDC name",
                "type": "string"
              },
              "isVdcEnabled": {
                "readOnly": true,
                "description": "True if the containing VDC is enabled.",
                "type": "boolean"
              },
              "isEnabled": {
                "readOnly": true,
                "description": "True if this entity is enabled",
                "type": "boolean"
              },
              "isBusy": {
                "readOnly": true,
                "description": "True if this entity is busy",
                "type": "boolean"
              },
              "creationDate": {
                "readOnly": true,
                "description": "Creation date",
                "type": "string",
                "format": "date-time"
              },
              "status": {
                "readOnly": true,
                "description": "Status",
                "type": "string"
              },
              "ownerName": {
                "readOnly": true,
                "description": "Owner name",
                "type": "string"
              },
              "storageKB": {
                "readOnly": true,
                "description": "Storage in KB",
                "type": "integer",
                "format": "int64"
              },
              "numberOfVMs": {
                "readOnly": true,
                "description": "Number of VMs",
                "type": "integer",
                "format": "int32"
              },
              "cpuAllocationMhz": {
                "readOnly": true,
                "description": "CPU allocation in Mhz",
                "type": "integer",
                "format": "int32"
              },
              "memoryAllocationMB": {
                "readOnly": true,
                "description": "Memory allocation in MB",
                "type": "integer",
                "format": "int32"
              },
              "isDeployed": {
                "readOnly": true,
                "description": "True if the vApp is deployed.",
                "type": "boolean"
              },
              "isInMaintenanceMode": {
                "readOnly": true,
                "description": "True if the vApp is in maintenance mode.",
                "type": "boolean"
              },
              "isAutoNature": {
                "readOnly": true,
                "description": "True if the parent vApp is a managed vApp",
                "type": "boolean"
              },
              "isExpired": {
                "readOnly": true,
                "description": "True if the vApp is expired.",
                "type": "boolean"
              }
            },
            "required": [
              "name",
              "org",
              "vdc",
              "vdcName",
              "isVdcEnabled",
              "isEnabled",
              "isBusy",
              "creationDate",
              "status",
              "ownerName",
              "storageKB",
              "numberOfVMs",
              "cpuAllocationMhz",
              "memoryAllocationMB",
              "isDeployed",
              "isInMaintenanceMode",
              "isAutoNature",
              "isExpired"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultRightRecordType": {
        "title": "QueryResultRightRecordType",
        "description": "Type for a single right query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "The name of this right.",
                "type": "string"
              },
              "category": {
                "readOnly": true,
                "description": "Category",
                "type": "string"
              }
            },
            "required": [
              "name",
              "category"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultAdminVMRecordType": {
        "title": "QueryResultAdminVMRecordType",
        "description": "Type for a single adminVM query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "The name of this VM.",
                "type": "string"
              },
              "containerName": {
                "readOnly": true,
                "description": "The name of the containing vApp or vApp template.",
                "type": "string"
              },
              "container": {
                "readOnly": true,
                "description": "Vapp or Vapp template",
                "type": "string"
              },
              "status": {
                "readOnly": true,
                "description": "Status",
                "type": "string"
              },
              "vdc": {
                "readOnly": true,
                "description": "VDC reference or id",
                "type": "string"
              },
              "hostName": {
                "readOnly": true,
                "description": "ESXi host for this VM",
                "type": "string"
              },
              "isVAppTemplate": {
                "readOnly": true,
                "description": "True if the VM belongs to a vApp template.",
                "type": "boolean"
              },
              "isDeleted": {
                "readOnly": true,
                "description": "True if this entity is deleted",
                "type": "boolean"
              },
              "guestOs": {
                "readOnly": true,
                "description": "Guest operating system",
                "type": "string"
              },
              "numberOfCpus": {
                "readOnly": true,
                "description": "Number of CPUs",
                "type": "integer",
                "format": "int32"
              },
              "memoryMB": {
                "readOnly": true,
                "description": "Memory in MB",
                "type": "integer",
                "format": "int32"
              },
              "networkName": {
                "readOnly": true,
                "description": "Network name",
                "type": "string"
              },
              "isDeployed": {
                "readOnly": true,
                "description": "True if this entity is deployed",
                "type": "boolean"
              },
              "isPublished": {
                "readOnly": true,
                "description": "True if this entity is in a published catalog",
                "type": "boolean"
              },
              "catalogName": {
                "readOnly": true,
                "description": "Catalog name",
                "type": "string"
              },
              "isVdcEnabled": {
                "readOnly": true,
                "description": "True if the containing VDC is enabled",
                "type": "boolean"
              },
              "hardwareVersion": {
                "readOnly": true,
                "description": "Hardware version",
                "type": "integer",
                "format": "int32"
              },
              "vmToolsVersion": {
                "readOnly": true,
                "description": "VM tools version",
                "type": "integer",
                "format": "int32"
              },
              "datastoreName": {
                "readOnly": true,
                "description": "Datastore name",
                "type": "string"
              },
              "vc": {
                "readOnly": true,
                "description": "Virtual center reference or id",
                "type": "string"
              },
              "moref": {
                "readOnly": true,
                "description": "Managed object reference",
                "type": "string"
              },
              "org": {
                "readOnly": true,
                "description": "Organization reference or id",
                "type": "string"
              },
              "storageProfileName": {
                "readOnly": true,
                "description": "Storage profile name",
                "type": "string"
              },
              "gcStatus": {
                "readOnly": true,
                "description": "GC status of this VM.",
                "type": "string"
              },
              "isAutoNature": {
                "readOnly": true,
                "description": "True if the parent vApp is a managed vApp",
                "type": "boolean"
              }
            },
            "required": [
              "name",
              "containerName",
              "container",
              "status",
              "vdc",
              "hostName",
              "isVAppTemplate",
              "isDeleted",
              "guestOs",
              "numberOfCpus",
              "memoryMB",
              "networkName",
              "isDeployed",
              "isPublished",
              "catalogName",
              "isVdcEnabled",
              "hardwareVersion",
              "vmToolsVersion",
              "datastoreName",
              "vc",
              "moref",
              "org",
              "storageProfileName",
              "gcStatus",
              "isAutoNature"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultAdminAllocatedExternalAddressRecordType": {
        "title": "QueryResultAdminAllocatedExternalAddressRecordType",
        "description": "Type for a single adminAllocatedExternalAddress query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "network": {
                "readOnly": true,
                "description": "Network reference or id",
                "type": "string"
              },
              "ipAddress": {
                "readOnly": true,
                "description": "Allocated IP address",
                "type": "string"
              },
              "linkedNetwork": {
                "readOnly": true,
                "description": "Linked network reference or id",
                "type": "string"
              },
              "org": {
                "readOnly": true,
                "description": "Organization reference or id",
                "type": "string"
              }
            },
            "required": [
              "network",
              "ipAddress",
              "linkedNetwork",
              "org"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultVAppOrgNetworkRelationRecordType": {
        "title": "QueryResultVAppOrgNetworkRelationRecordType",
        "description": "Type for a single vAppOrgNetworkRelation query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "Entity name",
                "type": "string"
              },
              "org": {
                "readOnly": true,
                "description": "Organization reference or id",
                "type": "string"
              },
              "orgNetwork": {
                "readOnly": true,
                "description": "Network reference or id",
                "type": "string"
              },
              "orgNetworkName": {
                "readOnly": true,
                "description": "Network name",
                "type": "string"
              },
              "configurationType": {
                "readOnly": true,
                "description": "Configuration Type",
                "type": "string"
              },
              "status": {
                "readOnly": true,
                "description": "Status",
                "type": "string"
              },
              "ownerName": {
                "readOnly": true,
                "description": "Owner name",
                "type": "string"
              }
            },
            "required": [
              "name",
              "org",
              "orgNetwork",
              "orgNetworkName",
              "configurationType",
              "status",
              "ownerName"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultOrgVdcResourcePoolRelationRecordType": {
        "title": "QueryResultOrgVdcResourcePoolRelationRecordType",
        "description": "Type for a single orgVdcResourcePoolRelation query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "vdc": {
                "readOnly": true,
                "description": "VDC reference or id",
                "type": "string"
              },
              "vc": {
                "readOnly": true,
                "description": "Virtual center reference or id",
                "type": "string"
              },
              "resourcePoolMoref": {
                "readOnly": true,
                "description": "Resource pool managed object reference",
                "type": "string"
              }
            },
            "required": [
              "vdc",
              "vc",
              "resourcePoolMoref"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultProviderVdcResourcePoolRelationRecordType": {
        "title": "QueryResultProviderVdcResourcePoolRelationRecordType",
        "description": "Type for a single providerVdcResourcePoolRelation query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "The name of this resource pool.",
                "type": "string"
              },
              "resourcePoolMoref": {
                "readOnly": true,
                "description": "Resource pool managed object reference",
                "type": "string"
              },
              "cpuReservationLimitMhz": {
                "readOnly": true,
                "description": "CPU reservation limit in Mhz",
                "type": "integer",
                "format": "int64"
              },
              "cpuReservationAllocationMhz": {
                "readOnly": true,
                "description": "CPU reservation allocation in Mhz",
                "type": "integer",
                "format": "int64"
              },
              "isEnabled": {
                "readOnly": true,
                "description": "True if this entity is enabled",
                "type": "boolean"
              },
              "memoryReservationLimitMB": {
                "readOnly": true,
                "description": "Memory reservation limit in MB",
                "type": "integer",
                "format": "int64"
              },
              "memoryReservationAllocationMB": {
                "readOnly": true,
                "description": "Memory reservation allocation in MB",
                "type": "integer",
                "format": "int64"
              },
              "isPrimary": {
                "readOnly": true,
                "description": "True if this is the primary resource pool for this Provider VDC.",
                "type": "boolean"
              },
              "providerVdc": {
                "readOnly": true,
                "description": "Provider VDC reference or id",
                "type": "string"
              },
              "vc": {
                "readOnly": true,
                "description": "Virtual center reference or id",
                "type": "string"
              },
              "vcName": {
                "readOnly": true,
                "description": "Vitual center name",
                "type": "string"
              },
              "numberOfVMs": {
                "readOnly": true,
                "description": "Number of VMs",
                "type": "integer",
                "format": "int32"
              }
            },
            "required": [
              "name",
              "resourcePoolMoref",
              "cpuReservationLimitMhz",
              "cpuReservationAllocationMhz",
              "isEnabled",
              "memoryReservationLimitMB",
              "memoryReservationAllocationMB",
              "isPrimary",
              "providerVdc",
              "vc",
              "vcName",
              "numberOfVMs"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultDatastoreProviderVdcRelationRecordType": {
        "title": "QueryResultDatastoreProviderVdcRelationRecordType",
        "description": "Type for a single datastoreProviderVdcRelation query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "The name of this datastore.",
                "type": "string"
              },
              "datastoreType": {
                "readOnly": true,
                "description": "Datastore type",
                "type": "string"
              },
              "isEnabled": {
                "readOnly": true,
                "description": "True if this entity is enabled",
                "type": "boolean"
              },
              "isDeleted": {
                "readOnly": true,
                "description": "True if this entity is deleted",
                "type": "boolean"
              },
              "storageUsedMB": {
                "readOnly": true,
                "description": "Storage used in MB",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/xs:float"
                  }
                ]
              },
              "storageMB": {
                "readOnly": true,
                "description": "Storage in MB",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/xs:float"
                  }
                ]
              },
              "provisionedStorageMB": {
                "readOnly": true,
                "description": "Provisioned storage in MB",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/xs:float"
                  }
                ]
              },
              "requestedStorageMB": {
                "readOnly": true,
                "description": "Requested storage in MB",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/xs:float"
                  }
                ]
              },
              "vc": {
                "readOnly": true,
                "description": "Virtual center reference or id",
                "type": "string"
              },
              "vcName": {
                "readOnly": true,
                "description": "Vitual center name",
                "type": "string"
              },
              "moref": {
                "readOnly": true,
                "description": "Managed object reference",
                "type": "string"
              },
              "providerVdc": {
                "readOnly": true,
                "description": "Provider VDC reference or id",
                "type": "string"
              },
              "datastore": {
                "readOnly": true,
                "description": "Datastore reference or id",
                "type": "string"
              }
            },
            "required": [
              "name",
              "datastoreType",
              "isEnabled",
              "isDeleted",
              "storageUsedMB",
              "storageMB",
              "provisionedStorageMB",
              "requestedStorageMB",
              "vc",
              "vcName",
              "moref",
              "providerVdc",
              "datastore"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultAdminUserRecordType": {
        "title": "QueryResultAdminUserRecordType",
        "description": "Type for a single adminUser query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "The name of this user.",
                "type": "string"
              },
              "org": {
                "readOnly": true,
                "description": "Organization reference or id",
                "type": "string"
              },
              "fullName": {
                "readOnly": true,
                "description": "The full name of this user.",
                "type": "string"
              },
              "isEnabled": {
                "readOnly": true,
                "description": "True if this entity is enabled",
                "type": "boolean"
              },
              "numberOfDeployedVMs": {
                "readOnly": true,
                "description": "Number of deployed VMs",
                "type": "integer",
                "format": "int32"
              },
              "deployedVMQuota": {
                "readOnly": true,
                "description": "Running VMs Quota",
                "type": "integer",
                "format": "int32"
              },
              "numberOfStoredVMs": {
                "readOnly": true,
                "description": "Number of stored VMs",
                "type": "integer",
                "format": "int32"
              },
              "storedVMQuota": {
                "readOnly": true,
                "description": "Stored VM Quota",
                "type": "integer",
                "format": "int32"
              },
              "isLdapUser": {
                "readOnly": true,
                "description": "If the identity provider type is INTEGRATED, shows whether the user was imported from LDAP",
                "type": "boolean"
              },
              "deployedVMQuotaRank": {
                "readOnly": true,
                "description": "Deployed VM quota rank",
                "type": "integer",
                "format": "int32"
              },
              "storedVMQuotaRank": {
                "readOnly": true,
                "description": "Stored VM Quota rank",
                "type": "integer",
                "format": "int32"
              },
              "identityProviderType": {
                "readOnly": true,
                "description": "Shows the identity provider type of the user",
                "type": "string"
              }
            },
            "required": [
              "name",
              "org",
              "fullName",
              "isEnabled",
              "numberOfDeployedVMs",
              "deployedVMQuota",
              "numberOfStoredVMs",
              "storedVMQuota",
              "isLdapUser",
              "deployedVMQuotaRank",
              "storedVMQuotaRank",
              "identityProviderType"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultAdminGroupRecordType": {
        "title": "QueryResultAdminGroupRecordType",
        "description": "Type for a single adminGroup query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "The name of this group.",
                "type": "string"
              },
              "org": {
                "readOnly": true,
                "description": "Organization reference or id",
                "type": "string"
              },
              "roleName": {
                "readOnly": true,
                "description": "Role name",
                "type": "string"
              },
              "isReadOnly": {
                "readOnly": true,
                "description": "True if this entity is read\\-only",
                "type": "boolean"
              },
              "identityProviderType": {
                "readOnly": true,
                "description": "Shows the identity provider type of the group",
                "type": "string"
              }
            },
            "required": [
              "name",
              "org",
              "roleName",
              "isReadOnly",
              "identityProviderType"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultAdminVAppNetworkRecordType": {
        "title": "QueryResultAdminVAppNetworkRecordType",
        "description": "Type for a single adminVAppNetwork query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "The name of this network.",
                "type": "string"
              },
              "org": {
                "readOnly": true,
                "description": "Organization reference or id",
                "type": "string"
              },
              "isIpScopeInherited": {
                "readOnly": true,
                "description": "True if this network's IP scope is inherited.",
                "type": "boolean"
              },
              "gateway": {
                "readOnly": true,
                "description": "Gateway",
                "type": "string"
              },
              "netmask": {
                "readOnly": true,
                "description": "Netmask",
                "type": "string"
              },
              "dns1": {
                "readOnly": true,
                "description": "Primary DNS",
                "type": "string"
              },
              "dns2": {
                "readOnly": true,
                "description": "Secondary DNS",
                "type": "string"
              },
              "dnsSuffix": {
                "readOnly": true,
                "description": "DNS suffix",
                "type": "string"
              },
              "vApp": {
                "readOnly": true,
                "description": "VApp reference or id",
                "type": "string"
              },
              "vappName": {
                "readOnly": true,
                "description": "Vapp name",
                "type": "string"
              },
              "isBusy": {
                "readOnly": true,
                "description": "True if this entity is busy",
                "type": "boolean"
              }
            },
            "required": [
              "name",
              "org",
              "isIpScopeInherited",
              "gateway",
              "netmask",
              "dns1",
              "dns2",
              "dnsSuffix",
              "vApp",
              "vappName",
              "isBusy"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultAdminCatalogRecordType": {
        "title": "QueryResultAdminCatalogRecordType",
        "description": "Type for a single adminCatalog query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "org": {
                "readOnly": true,
                "description": "Organization reference or id",
                "type": "string"
              },
              "name": {
                "readOnly": true,
                "description": "The name of this catalog.",
                "type": "string"
              },
              "isPublished": {
                "readOnly": true,
                "description": "True if this entity is in a published catalog",
                "type": "boolean"
              },
              "isShared": {
                "readOnly": true,
                "description": "True if this entity is shared",
                "type": "boolean"
              },
              "creationDate": {
                "readOnly": true,
                "description": "Creation date",
                "type": "string",
                "format": "date-time"
              },
              "orgName": {
                "readOnly": true,
                "description": "Organization name",
                "type": "string"
              },
              "ownerName": {
                "readOnly": true,
                "description": "Owner name",
                "type": "string"
              },
              "numberOfTemplates": {
                "readOnly": true,
                "description": "Number of vApp templates",
                "type": "integer",
                "format": "int32"
              },
              "numberOfMedia": {
                "readOnly": true,
                "description": "Number of media",
                "type": "integer",
                "format": "int32"
              },
              "owner": {
                "readOnly": true,
                "description": "Owner reference or id",
                "type": "string"
              }
            },
            "required": [
              "org",
              "name",
              "isPublished",
              "isShared",
              "creationDate",
              "orgName",
              "ownerName",
              "numberOfTemplates",
              "numberOfMedia",
              "owner"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultAdminCatalogItemRecordType": {
        "title": "QueryResultAdminCatalogItemRecordType",
        "description": "Type for a single adminCatalogItem query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "entity": {
                "readOnly": true,
                "description": "Entity reference or id",
                "type": "string"
              },
              "entityName": {
                "readOnly": true,
                "description": "Entity name",
                "type": "string"
              },
              "entityType": {
                "readOnly": true,
                "description": "Entity type",
                "type": "string"
              },
              "catalog": {
                "readOnly": true,
                "description": "Catalog reference or id",
                "type": "string"
              },
              "catalogName": {
                "readOnly": true,
                "description": "Catalog name",
                "type": "string"
              },
              "ownerName": {
                "readOnly": true,
                "description": "Owner name",
                "type": "string"
              },
              "owner": {
                "readOnly": true,
                "description": "Owner reference or id",
                "type": "string"
              },
              "isPublished": {
                "readOnly": true,
                "description": "True if this entity is in a published catalog",
                "type": "boolean"
              },
              "vdc": {
                "readOnly": true,
                "description": "VDC reference or id",
                "type": "string"
              },
              "vdcName": {
                "readOnly": true,
                "description": "VDC name",
                "type": "string"
              },
              "isVdcEnabled": {
                "readOnly": true,
                "description": "True if the containing VDC is enabled.",
                "type": "boolean"
              },
              "org": {
                "readOnly": true,
                "description": "Organization reference or id",
                "type": "string"
              },
              "creationDate": {
                "readOnly": true,
                "description": "Creation date",
                "type": "string",
                "format": "date-time"
              },
              "isExpired": {
                "readOnly": true,
                "description": "True if this entity is expired",
                "type": "boolean"
              },
              "status": {
                "readOnly": true,
                "description": "Status",
                "type": "string"
              },
              "name": {
                "readOnly": true,
                "description": "The name of this catalog item.",
                "type": "string"
              }
            },
            "required": [
              "entity",
              "entityName",
              "entityType",
              "catalog",
              "catalogName",
              "ownerName",
              "owner",
              "isPublished",
              "vdc",
              "vdcName",
              "isVdcEnabled",
              "org",
              "creationDate",
              "isExpired",
              "status",
              "name"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultCatalogItemRecordType": {
        "title": "QueryResultCatalogItemRecordType",
        "description": "Type for a single catalogItem query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "entity": {
                "readOnly": true,
                "description": "Entity reference or id",
                "type": "string"
              },
              "entityName": {
                "readOnly": true,
                "description": "Entity name",
                "type": "string"
              },
              "entityType": {
                "readOnly": true,
                "description": "Entity type",
                "type": "string"
              },
              "catalog": {
                "readOnly": true,
                "description": "Catalog reference or id",
                "type": "string"
              },
              "catalogName": {
                "readOnly": true,
                "description": "Catalog name",
                "type": "string"
              },
              "ownerName": {
                "readOnly": true,
                "description": "Owner name",
                "type": "string"
              },
              "owner": {
                "readOnly": true,
                "description": "Owner reference or id",
                "type": "string"
              },
              "isPublished": {
                "readOnly": true,
                "description": "True if this entity is in a published catalog",
                "type": "boolean"
              },
              "vdc": {
                "readOnly": true,
                "description": "VDC reference or id",
                "type": "string"
              },
              "vdcName": {
                "readOnly": true,
                "description": "VDC name",
                "type": "string"
              },
              "isVdcEnabled": {
                "readOnly": true,
                "description": "True if the containing VDC is enabled.",
                "type": "boolean"
              },
              "creationDate": {
                "readOnly": true,
                "description": "Creation date",
                "type": "string",
                "format": "date-time"
              },
              "isExpired": {
                "readOnly": true,
                "description": "True if this entity is expired",
                "type": "boolean"
              },
              "status": {
                "readOnly": true,
                "description": "Status",
                "type": "string"
              },
              "name": {
                "readOnly": true,
                "description": "The name of this catalog item.",
                "type": "string"
              }
            },
            "required": [
              "entity",
              "entityName",
              "entityType",
              "catalog",
              "catalogName",
              "ownerName",
              "owner",
              "isPublished",
              "vdc",
              "vdcName",
              "isVdcEnabled",
              "creationDate",
              "isExpired",
              "status",
              "name"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultAdminMediaRecordType": {
        "title": "QueryResultAdminMediaRecordType",
        "description": "Type for a single adminMedia query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "org": {
                "readOnly": true,
                "description": "Organization reference or id",
                "type": "string"
              },
              "ownerName": {
                "readOnly": true,
                "description": "Owner name",
                "type": "string"
              },
              "owner": {
                "readOnly": true,
                "description": "Owner reference or id",
                "type": "string"
              },
              "isPublished": {
                "readOnly": true,
                "description": "True if this entity is in a published catalog",
                "type": "boolean"
              },
              "name": {
                "readOnly": true,
                "description": "The name of this media object.",
                "type": "string"
              },
              "storageB": {
                "readOnly": true,
                "description": "Storage in Bytes",
                "type": "integer",
                "format": "int64"
              },
              "vdc": {
                "readOnly": true,
                "description": "VDC reference or id",
                "type": "string"
              },
              "vdcName": {
                "readOnly": true,
                "description": "VDC name",
                "type": "string"
              },
              "isVdcEnabled": {
                "readOnly": true,
                "description": "True if the containing VDC is enabled.",
                "type": "boolean"
              },
              "catalog": {
                "readOnly": true,
                "description": "Catalog reference or id",
                "type": "string"
              },
              "catalogName": {
                "readOnly": true,
                "description": "Catalog name",
                "type": "string"
              },
              "catalogItem": {
                "readOnly": true,
                "description": "Catalog item reference or id",
                "type": "string"
              },
              "creationDate": {
                "readOnly": true,
                "description": "Creation date",
                "type": "string",
                "format": "date-time"
              },
              "isBusy": {
                "readOnly": true,
                "description": "True if this entity is busy",
                "type": "boolean"
              },
              "status": {
                "readOnly": true,
                "description": "Status",
                "type": "string"
              },
              "storageProfileName": {
                "readOnly": true,
                "description": "Storage profile name",
                "type": "string"
              }
            },
            "required": [
              "org",
              "ownerName",
              "owner",
              "isPublished",
              "name",
              "storageB",
              "vdc",
              "vdcName",
              "isVdcEnabled",
              "catalog",
              "catalogName",
              "catalogItem",
              "creationDate",
              "isBusy",
              "status",
              "storageProfileName"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultAdminVAppTemplateRecordType": {
        "title": "QueryResultAdminVAppTemplateRecordType",
        "description": "Type for a single adminVAppTemplate query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "org": {
                "readOnly": true,
                "description": "Organization reference or id",
                "type": "string"
              },
              "ownerName": {
                "readOnly": true,
                "description": "Owner name",
                "type": "string"
              },
              "owner": {
                "readOnly": true,
                "description": "Owner reference or id",
                "type": "string"
              },
              "isPublished": {
                "readOnly": true,
                "description": "True if this entity is in a published catalog.",
                "type": "boolean"
              },
              "name": {
                "readOnly": true,
                "description": "The name of this vApp template.",
                "type": "string"
              },
              "vdc": {
                "readOnly": true,
                "description": "VDC reference or id",
                "type": "string"
              },
              "vdcName": {
                "readOnly": true,
                "description": "VDC name",
                "type": "string"
              },
              "isVdcEnabled": {
                "readOnly": true,
                "description": "True if the containing VDC is enabled.",
                "type": "boolean"
              },
              "catalog": {
                "readOnly": true,
                "description": "Catalog reference or id",
                "type": "string"
              },
              "catalogName": {
                "readOnly": true,
                "description": "Catalog name",
                "type": "string"
              },
              "catalogItem": {
                "readOnly": true,
                "description": "Catalog item reference or id",
                "type": "string"
              },
              "creationDate": {
                "readOnly": true,
                "description": "Creation date",
                "type": "string",
                "format": "date-time"
              },
              "isBusy": {
                "readOnly": true,
                "description": "True if this entity is busy",
                "type": "boolean"
              },
              "isGoldMaster": {
                "readOnly": true,
                "description": "True if this template is marked as a gold master",
                "type": "boolean"
              },
              "isEnabled": {
                "readOnly": true,
                "description": "True if this entity is enabled",
                "type": "boolean"
              },
              "isExpired": {
                "readOnly": true,
                "description": "True if this entity is expired",
                "type": "boolean"
              },
              "isDeployed": {
                "readOnly": true,
                "description": "True if this entity is deployed",
                "type": "boolean"
              },
              "status": {
                "readOnly": true,
                "description": "Status",
                "type": "string"
              },
              "storageProfileName": {
                "readOnly": true,
                "description": "Storage profile name",
                "type": "string"
              }
            },
            "required": [
              "org",
              "ownerName",
              "owner",
              "isPublished",
              "name",
              "vdc",
              "vdcName",
              "isVdcEnabled",
              "catalog",
              "catalogName",
              "catalogItem",
              "creationDate",
              "isBusy",
              "isGoldMaster",
              "isEnabled",
              "isExpired",
              "isDeployed",
              "status",
              "storageProfileName"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultAdminShadowVMRecordType": {
        "title": "QueryResultAdminShadowVMRecordType",
        "description": "Type for a single adminShadowVM query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "isPublished": {
                "readOnly": true,
                "description": "True if this entity is in a published catalog",
                "type": "boolean"
              },
              "name": {
                "readOnly": true,
                "description": "Entity name",
                "type": "string"
              },
              "primaryVmName": {
                "readOnly": true,
                "description": "Primary VM name",
                "type": "string"
              },
              "shadowVApp": {
                "readOnly": true,
                "description": "Shadow vApp reference or id",
                "type": "string"
              },
              "primaryVAppTemplate": {
                "readOnly": true,
                "description": "Primary vApp template reference or id",
                "type": "string"
              },
              "primaryVAppName": {
                "readOnly": true,
                "description": "Primary vApp name",
                "type": "string"
              },
              "datastoreName": {
                "readOnly": true,
                "description": "Datastore name",
                "type": "string"
              },
              "vcName": {
                "readOnly": true,
                "description": "Vitual center name",
                "type": "string"
              },
              "isDeleted": {
                "readOnly": true,
                "description": "True if this entity is deleted",
                "type": "boolean"
              },
              "status": {
                "readOnly": true,
                "description": "Status",
                "type": "string"
              },
              "isBusy": {
                "readOnly": true,
                "description": "True if this entity is busy",
                "type": "boolean"
              },
              "primaryVMOwner": {
                "readOnly": true,
                "description": "Primary VM owner reference or id",
                "type": "string"
              },
              "primaryVM": {
                "readOnly": true,
                "description": "Primary VM refernce or id",
                "type": "string"
              },
              "primaryVMCatalog": {
                "readOnly": true,
                "description": "Primary VM catalog reference or id",
                "type": "string"
              },
              "org": {
                "readOnly": true,
                "description": "Organization reference or id",
                "type": "string"
              }
            },
            "required": [
              "isPublished",
              "name",
              "primaryVmName",
              "shadowVApp",
              "primaryVAppTemplate",
              "primaryVAppName",
              "datastoreName",
              "vcName",
              "isDeleted",
              "status",
              "isBusy",
              "primaryVMOwner",
              "primaryVM",
              "primaryVMCatalog",
              "org"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultTaskRecordType": {
        "title": "QueryResultTaskRecordType",
        "description": "Type for a single task query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "org": {
                "readOnly": true,
                "description": "Organization reference or id",
                "type": "string"
              },
              "orgName": {
                "readOnly": true,
                "description": "Organization name",
                "type": "string"
              },
              "name": {
                "readOnly": true,
                "description": "The name of this task.",
                "type": "string"
              },
              "operationFull": {
                "readOnly": true,
                "description": "The full human readable name of this task.",
                "type": "string"
              },
              "startDate": {
                "readOnly": true,
                "description": "Start date",
                "type": "string",
                "format": "date-time"
              },
              "endDate": {
                "readOnly": true,
                "description": "End date",
                "type": "string",
                "format": "date-time"
              },
              "status": {
                "readOnly": true,
                "description": "Status",
                "type": "string"
              },
              "progress": {
                "readOnly": true,
                "description": "Progress of the task, expressed as a percentage.",
                "type": "integer",
                "format": "int32"
              },
              "ownerName": {
                "readOnly": true,
                "description": "Owner name",
                "type": "string"
              },
              "object": {
                "readOnly": true,
                "description": "Object",
                "type": "string"
              },
              "objectType": {
                "readOnly": true,
                "description": "Object type",
                "type": "string"
              },
              "objectName": {
                "readOnly": true,
                "description": "Object name",
                "type": "string"
              },
              "serviceNamespace": {
                "readOnly": true,
                "description": "Service name space",
                "type": "string"
              }
            },
            "required": [
              "org",
              "orgName",
              "name",
              "operationFull",
              "startDate",
              "endDate",
              "status",
              "progress",
              "ownerName",
              "object",
              "objectType",
              "objectName",
              "serviceNamespace"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultAdminTaskRecordType": {
        "title": "QueryResultAdminTaskRecordType",
        "description": "Type for a single adminTask query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "org": {
                "readOnly": true,
                "description": "Organization reference or id",
                "type": "string"
              },
              "orgName": {
                "readOnly": true,
                "description": "Organization name",
                "type": "string"
              },
              "name": {
                "readOnly": true,
                "description": "The name of this task.",
                "type": "string"
              },
              "operationFull": {
                "readOnly": true,
                "description": "The full human readable name of this task.",
                "type": "string"
              },
              "startDate": {
                "readOnly": true,
                "description": "Start date",
                "type": "string",
                "format": "date-time"
              },
              "endDate": {
                "readOnly": true,
                "description": "End date",
                "type": "string",
                "format": "date-time"
              },
              "status": {
                "readOnly": true,
                "description": "Status",
                "type": "string"
              },
              "progress": {
                "readOnly": true,
                "description": "Progress of the task, expressed as a percentage.",
                "type": "integer",
                "format": "int32"
              },
              "owner": {
                "readOnly": true,
                "description": "Owner reference or id",
                "type": "string"
              },
              "ownerName": {
                "readOnly": true,
                "description": "Owner name",
                "type": "string"
              },
              "object": {
                "readOnly": true,
                "description": "Object",
                "type": "string"
              },
              "objectType": {
                "readOnly": true,
                "description": "Object type",
                "type": "string"
              },
              "objectName": {
                "readOnly": true,
                "description": "Object name",
                "type": "string"
              },
              "cellName": {
                "readOnly": true,
                "description": "Cell name",
                "type": "string"
              },
              "serviceNamespace": {
                "readOnly": true,
                "description": "Service name space",
                "type": "string"
              },
              "hasOwner": {
                "readOnly": true,
                "description": "True if this task has an owner.",
                "type": "boolean"
              }
            },
            "required": [
              "org",
              "orgName",
              "name",
              "operationFull",
              "startDate",
              "endDate",
              "status",
              "progress",
              "owner",
              "ownerName",
              "object",
              "objectType",
              "objectName",
              "cellName",
              "serviceNamespace",
              "hasOwner"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultBlockingTaskRecordType": {
        "title": "QueryResultBlockingTaskRecordType",
        "description": "Type for a single blockingTask query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "status": {
                "readOnly": true,
                "description": "Status",
                "type": "string"
              },
              "operationName": {
                "readOnly": true,
                "description": "Operation name",
                "type": "string"
              },
              "owner": {
                "readOnly": true,
                "description": "Owner reference or id",
                "type": "string"
              },
              "ownerName": {
                "readOnly": true,
                "description": "Owner name",
                "type": "string"
              },
              "originatingOrgName": {
                "readOnly": true,
                "description": "Originating organization name",
                "type": "string"
              },
              "originatingOrg": {
                "readOnly": true,
                "description": "Organization reference or id",
                "type": "string"
              },
              "creationDate": {
                "readOnly": true,
                "description": "Creation date",
                "type": "string",
                "format": "date-time"
              },
              "expirationTime": {
                "readOnly": true,
                "description": "Expiration time",
                "type": "string",
                "format": "date-time"
              },
              "timeoutAction": {
                "readOnly": true,
                "description": "Time action",
                "type": "string"
              },
              "task": {
                "readOnly": true,
                "description": "task reference or id",
                "type": "string"
              },
              "jobStatus": {
                "readOnly": true,
                "description": "Job status",
                "type": "string"
              },
              "hasOwner": {
                "readOnly": true,
                "description": "True if this blocking task has an owner.",
                "type": "boolean"
              }
            },
            "required": [
              "status",
              "operationName",
              "owner",
              "ownerName",
              "originatingOrgName",
              "originatingOrg",
              "creationDate",
              "expirationTime",
              "timeoutAction",
              "task",
              "jobStatus",
              "hasOwner"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultDiskRecordType": {
        "title": "QueryResultDiskRecordType",
        "description": "Type for a single disk query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "Disk name",
                "type": "string"
              },
              "vdc": {
                "readOnly": true,
                "description": "VDC reference or id",
                "type": "string"
              },
              "sizeB": {
                "readOnly": true,
                "description": "Size of the disk in bytes",
                "type": "integer",
                "format": "int64"
              },
              "datastore": {
                "readOnly": true,
                "description": "Datastore reference or id",
                "type": "string"
              },
              "datastoreName": {
                "readOnly": true,
                "description": "Datastore name",
                "type": "string"
              },
              "ownerName": {
                "readOnly": true,
                "description": "Owner name",
                "type": "string"
              },
              "vdcName": {
                "readOnly": true,
                "description": "VDC name",
                "type": "string"
              },
              "task": {
                "readOnly": true,
                "description": "In\\-progress task reference or id",
                "type": "string"
              },
              "storageProfile": {
                "readOnly": true,
                "description": "Storage profile reference or id",
                "type": "string"
              },
              "storageProfileName": {
                "readOnly": true,
                "description": "Storage profile name",
                "type": "string"
              },
              "status": {
                "readOnly": true,
                "description": "Disk status",
                "type": "string"
              },
              "busType": {
                "readOnly": true,
                "description": "Disk controller type",
                "type": "string"
              },
              "busTypeDesc": {
                "readOnly": true,
                "description": "Disk controller type description",
                "type": "string"
              },
              "busSubType": {
                "readOnly": true,
                "description": "Disk controller subtype",
                "type": "string"
              },
              "isAttached": {
                "readOnly": true,
                "description": "True if the disk is already attached.",
                "type": "boolean"
              }
            },
            "required": [
              "name",
              "vdc",
              "sizeB",
              "datastore",
              "datastoreName",
              "ownerName",
              "vdcName",
              "task",
              "storageProfile",
              "storageProfileName",
              "status",
              "busType",
              "busTypeDesc",
              "busSubType",
              "isAttached"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultVmDiskRelationRecordType": {
        "title": "QueryResultVmDiskRelationRecordType",
        "description": "Type for a single vmDiskRelation query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "vdc": {
                "readOnly": true,
                "description": "vDc reference or id",
                "type": "string"
              },
              "disk": {
                "readOnly": true,
                "description": "Disk reference or id",
                "type": "string"
              },
              "vm": {
                "readOnly": true,
                "description": "Virtual machine reference or id",
                "type": "string"
              }
            },
            "required": [
              "vdc",
              "disk",
              "vm"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultAdminDiskRecordType": {
        "title": "QueryResultAdminDiskRecordType",
        "description": "Type for a single adminDisk query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "vdc": {
                "readOnly": true,
                "description": "VDC reference or id",
                "type": "string"
              },
              "sizeB": {
                "readOnly": true,
                "description": "Size of disk in bytes",
                "type": "integer",
                "format": "int64"
              },
              "vc": {
                "readOnly": true,
                "description": "Virtual center reference or id",
                "type": "string"
              },
              "datastore": {
                "readOnly": true,
                "description": "Datastore reference or id",
                "type": "string"
              },
              "datastoreName": {
                "readOnly": true,
                "description": "Datastore name",
                "type": "string"
              },
              "ownerName": {
                "readOnly": true,
                "description": "Owner name",
                "type": "string"
              },
              "vdcName": {
                "readOnly": true,
                "description": "VDC name",
                "type": "string"
              },
              "org": {
                "readOnly": true,
                "description": "Organization reference or id",
                "type": "string"
              },
              "task": {
                "readOnly": true,
                "description": "In\\-progress task reference or id",
                "type": "string"
              },
              "storageProfile": {
                "readOnly": true,
                "description": "Storage profile reference or id",
                "type": "string"
              },
              "storageProfileName": {
                "readOnly": true,
                "description": "Storage profile reference or id",
                "type": "string"
              },
              "status": {
                "readOnly": true,
                "description": "Disk status",
                "type": "string"
              },
              "busType": {
                "readOnly": true,
                "description": "Disk controller type",
                "type": "string"
              },
              "busTypeDesc": {
                "readOnly": true,
                "description": "Disk controller type description",
                "type": "string"
              },
              "busSubType": {
                "readOnly": true,
                "description": "Disk controller subtype",
                "type": "string"
              },
              "isAttached": {
                "readOnly": true,
                "description": "True if the disk is already attached.",
                "type": "boolean"
              }
            },
            "required": [
              "name",
              "vdc",
              "sizeB",
              "vc",
              "datastore",
              "datastoreName",
              "ownerName",
              "vdcName",
              "org",
              "task",
              "storageProfile",
              "storageProfileName",
              "status",
              "busType",
              "busTypeDesc",
              "busSubType",
              "isAttached"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultAdminVmDiskRelationRecordType": {
        "title": "QueryResultAdminVmDiskRelationRecordType",
        "description": "Type for a single adminVMDiskRelation query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "vdc": {
                "readOnly": true,
                "description": "VDC reference or id",
                "type": "string"
              },
              "disk": {
                "readOnly": true,
                "description": "Disk reference or id",
                "type": "string"
              },
              "vm": {
                "readOnly": true,
                "description": "Virtual machine reference or id",
                "type": "string"
              }
            },
            "required": [
              "vdc",
              "disk",
              "vm"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultConditionRecordType": {
        "title": "QueryResultConditionRecordType",
        "description": "Type for a single condition query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "object": {
                "readOnly": true,
                "description": "Reference to the entity",
                "type": "string"
              },
              "objectType": {
                "readOnly": true,
                "description": "The type of the object.",
                "type": "string"
              },
              "severity": {
                "readOnly": true,
                "description": "The severity of the condition. One of RED:the integrity of the object has been compromised and the object may be inaccessible or inoperable. ORANGE: the integrity of the object has been compromised. YELLOW: the condition should be investigated when convenient. BLUE: object is in consistent state.",
                "type": "string"
              },
              "summary": {
                "readOnly": true,
                "description": "A summary of the condition.",
                "type": "string"
              },
              "details": {
                "readOnly": true,
                "description": "Details of the condition.",
                "type": "string"
              },
              "occurenceDate": {
                "readOnly": true,
                "description": "Date and time when the condition occurred.",
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "object",
              "objectType",
              "severity",
              "summary",
              "details",
              "occurenceDate"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultAdminEventRecordType": {
        "title": "QueryResultAdminEventRecordType",
        "description": "Type for a single adminEvent query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "eventId": {
                "readOnly": true,
                "description": "Event ID.",
                "type": "string"
              },
              "eventType": {
                "readOnly": true,
                "description": "Event type",
                "type": "string"
              },
              "timeStamp": {
                "readOnly": true,
                "description": "Time stamp",
                "type": "string",
                "format": "date-time"
              },
              "eventStatus": {
                "readOnly": true,
                "description": "Event status",
                "type": "integer",
                "format": "int32"
              },
              "userName": {
                "readOnly": true,
                "description": "User name",
                "type": "string"
              },
              "orgName": {
                "readOnly": true,
                "description": "Organization name",
                "type": "string"
              },
              "entityType": {
                "readOnly": true,
                "description": "Entity type",
                "type": "string"
              },
              "entityName": {
                "readOnly": true,
                "description": "Entity name",
                "type": "string"
              },
              "serviceNamespace": {
                "readOnly": true,
                "description": "Service namespace",
                "type": "string"
              },
              "productVersion": {
                "readOnly": true,
                "description": "Version of the product",
                "type": "string"
              },
              "entity": {
                "readOnly": true,
                "description": "Entity reference or id",
                "type": "string"
              },
              "org": {
                "readOnly": true,
                "description": "Organization reference or id",
                "type": "string"
              }
            },
            "required": [
              "eventId",
              "eventType",
              "timeStamp",
              "eventStatus",
              "userName",
              "orgName",
              "entityType",
              "entityName",
              "serviceNamespace",
              "productVersion",
              "entity",
              "org"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultStrandedItemRecordType": {
        "title": "QueryResultStrandedItemRecordType",
        "description": "Type for a single strandedItem query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "The name of this stranded item.",
                "type": "string"
              },
              "vimObjectType": {
                "readOnly": true,
                "description": "Vim object type",
                "type": "string"
              },
              "parentName": {
                "readOnly": true,
                "description": "The name of the parent of the stranded item",
                "type": "string"
              },
              "deletionDate": {
                "readOnly": true,
                "description": "Date when the vCD object is deleted",
                "type": "string",
                "format": "date-time"
              },
              "parent": {
                "readOnly": true,
                "description": "The href of the parent of the stranded item",
                "type": "string"
              },
              "numberOfPurgeAttempts": {
                "readOnly": true,
                "description": "Shows if purging of the item from a vCenter has failed",
                "type": "integer",
                "format": "int32"
              }
            },
            "required": [
              "name",
              "vimObjectType",
              "parentName",
              "deletionDate",
              "parent",
              "numberOfPurgeAttempts"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultAdminServiceRecordType": {
        "title": "QueryResultAdminServiceRecordType",
        "description": "Type for a single adminService query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "Name of the external service.",
                "type": "string"
              },
              "enabled": {
                "readOnly": true,
                "description": "True if service is enabled.",
                "type": "boolean"
              },
              "exchange": {
                "readOnly": true,
                "description": "The service exchange.",
                "type": "string"
              },
              "priority": {
                "readOnly": true,
                "description": "Service priority.",
                "type": "integer",
                "format": "int32"
              },
              "routingKey": {
                "readOnly": true,
                "description": "The service routing key.",
                "type": "string"
              },
              "vendor": {
                "readOnly": true,
                "description": "Service vendor.",
                "type": "string"
              },
              "namespace": {
                "readOnly": true,
                "description": "Service namespace.",
                "type": "string"
              },
              "isAuthorizationEnabled": {
                "readOnly": true,
                "description": "True if authorization is enabled.",
                "type": "boolean"
              }
            },
            "required": [
              "name",
              "enabled",
              "exchange",
              "priority",
              "routingKey",
              "vendor",
              "namespace",
              "isAuthorizationEnabled"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultServiceRecordType": {
        "title": "QueryResultServiceRecordType",
        "description": "Type for a single service query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "Name of the external service.",
                "type": "string"
              },
              "vendor": {
                "readOnly": true,
                "description": "External service vendor.",
                "type": "string"
              },
              "namespace": {
                "readOnly": true,
                "description": "Service namespace.",
                "type": "string"
              }
            },
            "required": [
              "name",
              "vendor",
              "namespace"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultServiceLinkRecordType": {
        "title": "QueryResultServiceLinkRecordType",
        "description": "Type for a single serviceLink query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "rel": {
                "readOnly": true,
                "description": "Relation for the link.",
                "type": "string"
              },
              "linkHref": {
                "readOnly": true,
                "description": "Href for the link.",
                "type": "string"
              },
              "mimeType": {
                "readOnly": true,
                "description": "Link's mime type.",
                "type": "string"
              },
              "resourceType": {
                "readOnly": true,
                "description": "Resource type the link is registered for.",
                "type": "string"
              },
              "service": {
                "readOnly": true,
                "description": "Service reference or id",
                "type": "string"
              },
              "resourceId": {
                "readOnly": true,
                "description": "Resource id the link is registered for.",
                "type": "string"
              }
            },
            "required": [
              "rel",
              "linkHref",
              "mimeType",
              "resourceType",
              "service",
              "resourceId"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultOrgVdcStorageProfileRecordType": {
        "title": "QueryResultOrgVdcStorageProfileRecordType",
        "description": "Type for a single orgVdcStorageProfile query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "Name of the storage profile",
                "type": "string"
              },
              "isEnabled": {
                "readOnly": true,
                "description": "True if this entity is enabled",
                "type": "boolean"
              },
              "isDefaultStorageProfile": {
                "readOnly": true,
                "description": "True if this is the default storage profile.",
                "type": "boolean"
              },
              "storageUsedMB": {
                "readOnly": true,
                "description": "Storage used in MB",
                "type": "integer",
                "format": "int32"
              },
              "storageLimitMB": {
                "readOnly": true,
                "description": "Storage limit in MB",
                "type": "integer",
                "format": "int32"
              },
              "iopsAllocated": {
                "readOnly": true,
                "description": "Total IOPS currently allocated to this storage profile",
                "type": "integer",
                "format": "int64"
              },
              "iopsLimit": {
                "readOnly": true,
                "description": "IOPS limit for the storage profile",
                "type": "integer",
                "format": "int64"
              },
              "numberOfConditions": {
                "readOnly": true,
                "description": "Number of conditions on the storage profile",
                "type": "integer",
                "format": "int32"
              },
              "vdc": {
                "readOnly": true,
                "description": "VDC reference or id",
                "type": "string"
              },
              "vdcName": {
                "readOnly": true,
                "description": "VDC name",
                "type": "string"
              },
              "isVdcBusy": {
                "readOnly": true,
                "description": "True if the associated VDC is busy.",
                "type": "boolean"
              }
            },
            "required": [
              "name",
              "isEnabled",
              "isDefaultStorageProfile",
              "storageUsedMB",
              "storageLimitMB",
              "iopsAllocated",
              "iopsLimit",
              "numberOfConditions",
              "vdc",
              "vdcName",
              "isVdcBusy"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultAdminOrgVdcStorageProfileRecordType": {
        "title": "QueryResultAdminOrgVdcStorageProfileRecordType",
        "description": "Type for a single adminOrgVdcStorageProfile query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "Name of the storage profile",
                "type": "string"
              },
              "isEnabled": {
                "readOnly": true,
                "description": "True if this entity is enabled",
                "type": "boolean"
              },
              "isDefaultStorageProfile": {
                "readOnly": true,
                "description": "True if this is the default storage profile for a VDC.",
                "type": "boolean"
              },
              "storageUsedMB": {
                "readOnly": true,
                "description": "Storage used in MB",
                "type": "integer",
                "format": "int32"
              },
              "storageLimitMB": {
                "readOnly": true,
                "description": "Storage limit in MB",
                "type": "integer",
                "format": "int32"
              },
              "iopsAllocated": {
                "readOnly": true,
                "description": "Total currently allocated IOPS on the storage profile",
                "type": "integer",
                "format": "int64"
              },
              "iopsLimit": {
                "readOnly": true,
                "description": "IOPS limit for the storage profile",
                "type": "integer",
                "format": "int64"
              },
              "numberOfConditions": {
                "readOnly": true,
                "description": "Number of conditions on the storage profile",
                "type": "integer",
                "format": "int32"
              },
              "vdc": {
                "readOnly": true,
                "description": "VDC reference or id",
                "type": "string"
              },
              "vdcName": {
                "readOnly": true,
                "description": "VDC name",
                "type": "string"
              },
              "org": {
                "readOnly": true,
                "description": "Organization reference or id",
                "type": "string"
              },
              "vc": {
                "readOnly": true,
                "description": "Virtual center reference or id",
                "type": "string"
              },
              "storageProfileMoref": {
                "readOnly": true,
                "description": "Managed object reference of the storage profile",
                "type": "string"
              }
            },
            "required": [
              "name",
              "isEnabled",
              "isDefaultStorageProfile",
              "storageUsedMB",
              "storageLimitMB",
              "iopsAllocated",
              "iopsLimit",
              "numberOfConditions",
              "vdc",
              "vdcName",
              "org",
              "vc",
              "storageProfileMoref"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultProviderVdcStorageProfileRecordType": {
        "title": "QueryResultProviderVdcStorageProfileRecordType",
        "description": "Type for a single providerVdcStorageProfile query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "isEnabled": {
                "readOnly": true,
                "description": "True if this entity is enabled",
                "type": "boolean"
              },
              "name": {
                "readOnly": true,
                "description": "Name of the Provider VDC storage profile",
                "type": "string"
              },
              "storageTotalMB": {
                "readOnly": true,
                "description": "Total storage in MB",
                "type": "integer",
                "format": "int64"
              },
              "storageUsedMB": {
                "type": "integer",
                "format": "int64"
              },
              "storageRequestedMB": {
                "type": "integer",
                "format": "int64"
              },
              "storageProvisionedMB": {
                "type": "integer",
                "format": "int64"
              },
              "numberOfConditions": {
                "readOnly": true,
                "description": "Number of conditions on the provider storage profile",
                "type": "integer",
                "format": "int32"
              },
              "providerVdc": {
                "readOnly": true,
                "description": "Provider VDC reference or id",
                "type": "string"
              },
              "vc": {
                "readOnly": true,
                "description": "Virtual center reference or id",
                "type": "string"
              },
              "storageProfileMoref": {
                "readOnly": true,
                "description": "Managed object reference of the storage profile",
                "type": "string"
              },
              "iopsCapacity": {
                "readOnly": true,
                "description": "Provider VDC IOPS capacity",
                "type": "integer",
                "format": "int64"
              },
              "iopsAllocated": {
                "readOnly": true,
                "description": "IOPS allocated in Provider VDC",
                "type": "integer",
                "format": "int64"
              }
            },
            "required": [
              "isEnabled",
              "name",
              "storageTotalMB",
              "storageUsedMB",
              "storageRequestedMB",
              "storageProvisionedMB",
              "numberOfConditions",
              "providerVdc",
              "vc",
              "storageProfileMoref",
              "iopsCapacity",
              "iopsAllocated"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultApiFilterRecordType": {
        "title": "QueryResultApiFilterRecordType",
        "description": "Type for a single apiFilter query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "urlPattern": {
                "readOnly": true,
                "description": "Url pattern on which the extension service is bind.",
                "type": "string"
              },
              "service": {
                "readOnly": true,
                "description": "Service reference or id",
                "type": "string"
              }
            },
            "required": [
              "urlPattern",
              "service"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultAdminApiDefinitionRecordType": {
        "title": "QueryResultAdminApiDefinitionRecordType",
        "description": "Type for a single adminApiDefinition query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "API definition name",
                "type": "string"
              },
              "entryPoint": {
                "readOnly": true,
                "description": "API definition entry point",
                "type": "string"
              },
              "service": {
                "readOnly": true,
                "description": "Service reference or id",
                "type": "string"
              },
              "namespace": {
                "readOnly": true,
                "description": "API definition namespace.",
                "type": "string"
              },
              "apiVendor": {
                "readOnly": true,
                "description": "API definition vendor.",
                "type": "string"
              },
              "serviceName": {
                "readOnly": true,
                "description": "Service name",
                "type": "string"
              },
              "serviceNamespace": {
                "readOnly": true,
                "description": "Service namespace",
                "type": "string"
              },
              "serviceVendor": {
                "readOnly": true,
                "description": "Service vendor",
                "type": "string"
              }
            },
            "required": [
              "name",
              "entryPoint",
              "service",
              "namespace",
              "apiVendor",
              "serviceName",
              "serviceNamespace",
              "serviceVendor"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultApiDefinitionRecordType": {
        "title": "QueryResultApiDefinitionRecordType",
        "description": "Type for a single apiDefinition query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "API definition name",
                "type": "string"
              },
              "entryPoint": {
                "readOnly": true,
                "description": "API definition entry point",
                "type": "string"
              },
              "service": {
                "readOnly": true,
                "description": "Service reference or id",
                "type": "string"
              },
              "namespace": {
                "readOnly": true,
                "description": "API definition namespace.",
                "type": "string"
              },
              "apiVendor": {
                "readOnly": true,
                "description": "API definition vendor.",
                "type": "string"
              },
              "serviceName": {
                "readOnly": true,
                "description": "Service name",
                "type": "string"
              },
              "serviceNamespace": {
                "readOnly": true,
                "description": "Service namespace",
                "type": "string"
              },
              "serviceVendor": {
                "readOnly": true,
                "description": "Service vendor",
                "type": "string"
              }
            },
            "required": [
              "name",
              "entryPoint",
              "service",
              "namespace",
              "apiVendor",
              "serviceName",
              "serviceNamespace",
              "serviceVendor"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultAdminFileDescriptorRecordType": {
        "title": "QueryResultAdminFileDescriptorRecordType",
        "description": "Type for a single adminFileDescriptor query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "fileUrl": {
                "readOnly": true,
                "description": "File URL.",
                "type": "string"
              },
              "apiDefinition": {
                "readOnly": true,
                "description": "Reference to the API definition owner of the file descriptor",
                "type": "string"
              },
              "fileMimeType": {
                "readOnly": true,
                "description": "File mime type.",
                "type": "string"
              },
              "name": {
                "readOnly": true,
                "description": "File name.",
                "type": "string"
              },
              "apiName": {
                "readOnly": true,
                "description": "API definition name",
                "type": "string"
              },
              "apiNamespace": {
                "readOnly": true,
                "description": "API definition namespace",
                "type": "string"
              },
              "apiVendor": {
                "readOnly": true,
                "description": "API definition vendor",
                "type": "string"
              },
              "serviceName": {
                "readOnly": true,
                "description": "File descriptor owner service name",
                "type": "string"
              },
              "serviceNamespace": {
                "readOnly": true,
                "description": "File descriptor owner service namespace",
                "type": "string"
              },
              "serviceVendor": {
                "readOnly": true,
                "description": "File descriptor owner service vendor",
                "type": "string"
              },
              "service": {
                "readOnly": true,
                "description": "Service reference or id",
                "type": "string"
              }
            },
            "required": [
              "fileUrl",
              "apiDefinition",
              "fileMimeType",
              "name",
              "apiName",
              "apiNamespace",
              "apiVendor",
              "serviceName",
              "serviceNamespace",
              "serviceVendor",
              "service"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultFileDescriptorRecordType": {
        "title": "QueryResultFileDescriptorRecordType",
        "description": "Type for a single fileDescriptor query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "fileUrl": {
                "readOnly": true,
                "description": "File URL.",
                "type": "string"
              },
              "apiDefinition": {
                "readOnly": true,
                "description": "Reference to the API definition owner of the file descriptor",
                "type": "string"
              },
              "fileMimeType": {
                "readOnly": true,
                "description": "File mime type.",
                "type": "string"
              },
              "name": {
                "readOnly": true,
                "description": "File name.",
                "type": "string"
              },
              "apiName": {
                "readOnly": true,
                "description": "API definition name",
                "type": "string"
              },
              "apiNamespace": {
                "readOnly": true,
                "description": "API definition namespace",
                "type": "string"
              },
              "apiVendor": {
                "readOnly": true,
                "description": "API definition vendor",
                "type": "string"
              },
              "serviceName": {
                "readOnly": true,
                "description": "File descriptor owner service name",
                "type": "string"
              },
              "serviceNamespace": {
                "readOnly": true,
                "description": "File descriptor owner service namespace",
                "type": "string"
              },
              "serviceVendor": {
                "readOnly": true,
                "description": "File descriptor owner service vendor",
                "type": "string"
              },
              "service": {
                "readOnly": true,
                "description": "Service reference or id",
                "type": "string"
              }
            },
            "required": [
              "fileUrl",
              "apiDefinition",
              "fileMimeType",
              "name",
              "apiName",
              "apiNamespace",
              "apiVendor",
              "serviceName",
              "serviceNamespace",
              "serviceVendor",
              "service"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultResourceClassActionRecordType": {
        "title": "QueryResultResourceClassActionRecordType",
        "description": "Type for a single resourceClassAction query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "The name of the action.",
                "type": "string"
              },
              "httpMethod": {
                "readOnly": true,
                "description": "HTTP request method. One of GET, POST, PUT, DELETE.",
                "type": "string"
              },
              "urlPattern": {
                "readOnly": true,
                "description": "HTTP URL regular expression pattern.",
                "type": "string"
              },
              "resourceClass": {
                "readOnly": true,
                "description": "Reference to resource class.",
                "type": "string"
              }
            },
            "required": [
              "name",
              "httpMethod",
              "urlPattern",
              "resourceClass"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultAclRuleRecordType": {
        "title": "QueryResultAclRuleRecordType",
        "description": "Type for a single aclRule query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "org": {
                "readOnly": true,
                "description": "Organization reference or id.",
                "type": "string"
              },
              "principal": {
                "readOnly": true,
                "description": "Principal reference.",
                "type": "string"
              },
              "name": {
                "readOnly": true,
                "description": "The name of the ACL rule.",
                "type": "string"
              },
              "serviceResource": {
                "readOnly": true,
                "description": "ServiceResource reference or id.",
                "type": "string"
              },
              "principalType": {
                "readOnly": true,
                "description": "Principal type \\- user or right.",
                "type": "string"
              },
              "resourceClassAction": {
                "readOnly": true,
                "description": "Resource class action reference or id.",
                "type": "string"
              },
              "orgAccess": {
                "readOnly": true,
                "description": "Organization Access \\- Entity, Shared or Published.",
                "type": "string"
              },
              "serviceResourceAccess": {
                "readOnly": true,
                "description": "Service Resource Access \\- Entity or Shared .",
                "type": "string"
              },
              "principalAccess": {
                "readOnly": true,
                "description": "Principal Access \\- Entity or Shared.",
                "type": "string"
              }
            },
            "required": [
              "org",
              "principal",
              "name",
              "serviceResource",
              "principalType",
              "resourceClassAction",
              "orgAccess",
              "serviceResourceAccess",
              "principalAccess"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultResourceClassRecordType": {
        "title": "QueryResultResourceClassRecordType",
        "description": "Type for a single resourceClass query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "The name of the resource class.",
                "type": "string"
              },
              "service": {
                "readOnly": true,
                "description": "Service reference or id",
                "type": "string"
              },
              "mimeType": {
                "readOnly": true,
                "description": "The MIME type of this resource class.",
                "type": "string"
              },
              "urlTemplate": {
                "readOnly": true,
                "description": "Object's url template",
                "type": "string"
              },
              "nid": {
                "readOnly": true,
                "description": "NID part of a urn which in the resolving process will have link based on the url template",
                "type": "string"
              },
              "urnPattern": {
                "readOnly": true,
                "description": "String template that should match the NSS part of a urn",
                "type": "string"
              }
            },
            "required": [
              "name",
              "service",
              "mimeType",
              "urlTemplate",
              "nid",
              "urnPattern"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultServiceResourceRecordType": {
        "title": "QueryResultServiceResourceRecordType",
        "description": "Type for a single serviceResource query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "The name of the service resource.",
                "type": "string"
              },
              "org": {
                "readOnly": true,
                "description": "Reference to organization or id.",
                "type": "string"
              },
              "resourceClass": {
                "readOnly": true,
                "description": "Reference to resource class.",
                "type": "string"
              },
              "externalObjectId": {
                "readOnly": true,
                "description": "The id of the external object.",
                "type": "string"
              }
            },
            "required": [
              "name",
              "org",
              "resourceClass",
              "externalObjectId"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultEdgeGatewayRecordType": {
        "title": "QueryResultEdgeGatewayRecordType",
        "description": "Type for a single edgeGateway query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "EdgeGateway name.",
                "type": "string"
              },
              "vdc": {
                "readOnly": true,
                "description": "VDC Reference or ID",
                "type": "string"
              },
              "numberOfExtNetworks": {
                "readOnly": true,
                "description": "Number of external networks connected to the edgeGateway.",
                "type": "integer",
                "format": "int32"
              },
              "numberOfOrgNetworks": {
                "readOnly": true,
                "description": "Number of org VDC networks connected to the edgeGateway",
                "type": "integer",
                "format": "int32"
              },
              "isBusy": {
                "readOnly": true,
                "description": "True if this Edge Gateway is busy.",
                "type": "boolean"
              },
              "orgVdcName": {
                "type": "string"
              },
              "availableNetCount": {
                "readOnly": true,
                "description": "Available networks count",
                "type": "integer",
                "format": "int32"
              },
              "gatewayStatus": {
                "type": "string"
              },
              "haStatus": {
                "readOnly": true,
                "description": "High Availability Status of the edgeGateway",
                "type": "string"
              },
              "advancedNetworkingEnabled": {
                "readOnly": true,
                "description": "Is Advanced Networking Enabled",
                "type": "boolean"
              },
              "distributedRoutingEnabled": {
                "readOnly": true,
                "description": "True if Distributed Routing for this Edge Gateway is enabled",
                "type": "boolean"
              }
            },
            "required": [
              "name",
              "vdc",
              "numberOfExtNetworks",
              "numberOfOrgNetworks",
              "isBusy",
              "orgVdcName",
              "availableNetCount",
              "gatewayStatus",
              "haStatus",
              "advancedNetworkingEnabled",
              "distributedRoutingEnabled"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultOrgVdcNetworkRecordType": {
        "title": "QueryResultOrgVdcNetworkRecordType",
        "description": "Type for a single orgVdcNetwork query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "Network Name",
                "type": "string"
              },
              "defaultGateway": {
                "readOnly": true,
                "description": "Default Gateway",
                "type": "string"
              },
              "netmask": {
                "readOnly": true,
                "description": "Netmask",
                "type": "string"
              },
              "dns1": {
                "readOnly": true,
                "description": "Primary DNS",
                "type": "string"
              },
              "dns2": {
                "readOnly": true,
                "description": "Secondary DNS",
                "type": "string"
              },
              "dnsSuffix": {
                "readOnly": true,
                "description": "DNS Suffix",
                "type": "string"
              },
              "linkType": {
                "readOnly": true,
                "description": "Link Type",
                "type": "integer",
                "format": "int32"
              },
              "connectedTo": {
                "readOnly": true,
                "description": "Network or Gateway that it connects to",
                "type": "string"
              },
              "vdc": {
                "readOnly": true,
                "description": "VDC Reference or ID",
                "type": "string"
              },
              "isBusy": {
                "readOnly": true,
                "description": "True if this network is busy.",
                "type": "boolean"
              },
              "isShared": {
                "readOnly": true,
                "description": "True if this network is shared.",
                "type": "boolean"
              },
              "vdcName": {
                "readOnly": true,
                "description": "VDC Name",
                "type": "string"
              },
              "isIpScopeInherited": {
                "readOnly": true,
                "description": "True if this network's IP scope is inherited.",
                "type": "boolean"
              },
              "usedIpCount": {
                "readOnly": true,
                "description": "Used IP Count",
                "type": "integer",
                "format": "int32"
              },
              "totalIpCount": {
                "readOnly": true,
                "description": "Total IP Count",
                "type": "integer",
                "format": "int32"
              },
              "interfaceType": {
                "readOnly": true,
                "description": "Interface Type",
                "type": "integer",
                "format": "int32"
              },
              "crossVdcNetworkId": {
                "readOnly": true,
                "description": "Owner cross\\-vdc network Id",
                "type": "string"
              },
              "crossVdcNetworkSiteId": {
                "readOnly": true,
                "description": "Site Id of owning cross\\-vdc network",
                "type": "string"
              }
            },
            "required": [
              "name",
              "defaultGateway",
              "netmask",
              "dns1",
              "dns2",
              "dnsSuffix",
              "linkType",
              "connectedTo",
              "vdc",
              "isBusy",
              "isShared",
              "vdcName",
              "isIpScopeInherited",
              "usedIpCount",
              "totalIpCount",
              "interfaceType",
              "crossVdcNetworkId",
              "crossVdcNetworkSiteId"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultVAppOrgVdcNetworkRelationRecordType": {
        "title": "QueryResultVAppOrgVdcNetworkRelationRecordType",
        "description": "Type for a single vAppOrgVdcNetworkRelation query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "entityType": {
                "readOnly": true,
                "description": "Configuration Type",
                "type": "string"
              },
              "name": {
                "readOnly": true,
                "description": "Entity name",
                "type": "string"
              },
              "org": {
                "readOnly": true,
                "description": "Organization reference or id",
                "type": "string"
              },
              "orgVdcNetwork": {
                "readOnly": true,
                "description": "Network reference or id",
                "type": "string"
              },
              "orgVdcNetworkName": {
                "readOnly": true,
                "description": "Network name",
                "type": "string"
              },
              "status": {
                "readOnly": true,
                "description": "Status",
                "type": "string"
              },
              "ownerName": {
                "readOnly": true,
                "description": "Owner name",
                "type": "string"
              }
            },
            "required": [
              "entityType",
              "name",
              "org",
              "orgVdcNetwork",
              "orgVdcNetworkName",
              "status",
              "ownerName"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultExternalLocalizationRecordType": {
        "title": "QueryResultExternalLocalizationRecordType",
        "description": "Type for a single externalLocalization query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "serviceNamespace": {
                "readOnly": true,
                "description": "Service namespace",
                "type": "string"
              },
              "locale": {
                "readOnly": true,
                "description": "Locale",
                "type": "string"
              },
              "key": {
                "readOnly": true,
                "description": "Localization template key",
                "type": "string"
              },
              "value": {
                "readOnly": true,
                "description": "Localization template value",
                "type": "string"
              }
            },
            "required": [
              "serviceNamespace",
              "locale",
              "key",
              "value"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultResourcePoolVMRecordType": {
        "title": "QueryResultResourcePoolVMRecordType",
        "description": "Type for a single resourcePoolVmList query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "readOnly": true,
                "description": "The name of this resource pool.",
                "type": "string"
              },
              "status": {
                "readOnly": true,
                "description": "VM Status",
                "type": "string"
              },
              "containerName": {
                "readOnly": true,
                "description": "Name of the vApp or vApp template that contains the VM",
                "type": "string"
              },
              "guestOs": {
                "readOnly": true,
                "description": "Guest operating system",
                "type": "string"
              },
              "isDeployed": {
                "readOnly": true,
                "description": "True if this entity is deployed",
                "type": "boolean"
              },
              "isBusy": {
                "readOnly": true,
                "description": "True if this entity is busy",
                "type": "boolean"
              },
              "hardwareVersion": {
                "readOnly": true,
                "description": "Hardware version",
                "type": "integer",
                "format": "int32"
              }
            },
            "required": [
              "name",
              "status",
              "containerName",
              "guestOs",
              "isDeployed",
              "isBusy",
              "hardwareVersion"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultVmGroupVmsRecordType": {
        "title": "QueryResultVmGroupVmsRecordType",
        "description": "Type for a single vmGroupVms query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "vmGroupName": {
                "readOnly": true,
                "description": "The name of the containing VM group.",
                "type": "string"
              },
              "vmName": {
                "readOnly": true,
                "description": "The name of the VM.",
                "type": "string"
              },
              "vmMoref": {
                "readOnly": true,
                "description": "The moref of the VM.",
                "type": "string"
              },
              "vappName": {
                "readOnly": true,
                "description": "The name of the vApp to which the VM belongs.",
                "type": "string"
              },
              "vappId": {
                "readOnly": true,
                "description": "The ID of the vApp to which the VM belongs.",
                "type": "string"
              },
              "orgVdcName": {
                "readOnly": true,
                "description": "The name of the org VDC containing the VM.",
                "type": "string"
              },
              "orgVdcId": {
                "readOnly": true,
                "description": "The ID of the org VDC containing the VM.",
                "type": "string"
              },
              "clusterMoref": {
                "readOnly": true,
                "description": "The moref of the cluster containing the VM.",
                "type": "string"
              },
              "vcId": {
                "readOnly": true,
                "description": "The ID of the vCenter containing the VM.",
                "type": "string"
              },
              "vmGroupId": {
                "readOnly": true,
                "description": "The ID of the containing VM group.",
                "type": "string"
              },
              "isVappTemplate": {
                "readOnly": true,
                "description": "True if the VM belongs to a vApp template.",
                "type": "boolean"
              }
            },
            "required": [
              "vmGroupName",
              "vmName",
              "vmMoref",
              "vappName",
              "vappId",
              "orgVdcName",
              "orgVdcId",
              "clusterMoref",
              "vcId",
              "vmGroupId",
              "isVappTemplate"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultVmGroupsRecordType": {
        "title": "QueryResultVmGroupsRecordType",
        "description": "Type for a single vmGroups query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "vmGroupId": {
                "readOnly": true,
                "description": "The ID of the VM group.",
                "type": "string"
              },
              "vmGroupName": {
                "readOnly": true,
                "description": "The name of the VM group.",
                "type": "string"
              },
              "clusterMoref": {
                "readOnly": true,
                "description": "The moref of the cluster containing the VM group.",
                "type": "string"
              },
              "vcId": {
                "readOnly": true,
                "description": "The ID of the vCenter containing the VM group.",
                "type": "string"
              }
            },
            "required": [
              "vmGroupId",
              "vmGroupName",
              "clusterMoref",
              "vcId"
            ],
            "additionalProperties": false
          }
        ]
      },
      "QueryResultAdminRoleRecordType": {
        "title": "QueryResultAdminRoleRecordType",
        "description": "Type for a single adminRole query result in records format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueryResultRecordType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "isReadOnly": {
                "type": "boolean"
              },
              "org": {
                "type": "string"
              },
              "orgName": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "isReadOnly",
              "org",
              "orgName"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ResourceEntityType": {
        "title": "ResourceEntityType",
        "description": "Base type that represents a resource entity such as a vApp template or virtual media.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityType"
          },
          {
            "type": "object",
            "properties": {
              "status": {
                "readOnly": true,
                "description": "Creation status of the resource entity.",
                "type": "integer",
                "format": "int32"
              },
              "files": {
                "nullable": true,
                "readOnly": true,
                "description": "Represents a list of files to be transferred (uploaded or downloaded). Each File in the list is part of the ResourceEntity.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FilesListType"
                  }
                ]
              }
            },
            "required": [
              "status",
              "files"
            ],
            "additionalProperties": false
          }
        ]
      },
      "FilesListType": {
        "title": "FilesListType",
        "description": "Represents a list of files to be transferred (uploaded or downloaded).",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "file": {
                "readOnly": true,
                "description": "A file to be transferred (uploaded or downloaded).",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FileType"
                }
              }
            },
            "required": [
              "file"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ScreenTicketType": {
        "title": "ScreenTicketType",
        "description": "The ticket for accessing the console of a VM.",
        "type": "object",
        "additionalProperties": false
      },
      "ApiExtensibilityType": {
        "title": "ApiExtensibilityType",
        "description": "Lists links to API extensibility operations and entities.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ServiceType": {
        "title": "ServiceType",
        "description": "Public representation of an external service.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityType"
          },
          {
            "type": "object",
            "properties": {
              "namespace": {
                "nullable": true,
                "readOnly": true,
                "description": "Namespace for the service.",
                "type": "string"
              },
              "vendor": {
                "nullable": true,
                "readOnly": true,
                "description": "External service vendor.",
                "type": "string"
              }
            },
            "required": [
              "namespace",
              "vendor"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ApiDefinitionType": {
        "title": "ApiDefinitionType",
        "description": "Representation of an API definition accessible by all authenticated users.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityType"
          },
          {
            "type": "object",
            "properties": {
              "entryPoint": {
                "nullable": true,
                "readOnly": true,
                "description": "The entry point of the API definition.",
                "type": "string"
              },
              "namespace": {
                "nullable": true,
                "readOnly": true,
                "description": "The namespace of the API definition.",
                "type": "string"
              },
              "apiVendor": {
                "nullable": true,
                "readOnly": true,
                "description": "API definition vendor.",
                "type": "string"
              },
              "supportedApiVersions": {
                "nullable": true,
                "readOnly": true,
                "description": "List of API versions supported by the ApiVendor.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VersionsType"
                  }
                ]
              }
            },
            "required": [
              "entryPoint",
              "namespace",
              "apiVendor",
              "supportedApiVersions"
            ],
            "additionalProperties": false
          }
        ]
      },
      "FileDescriptorType": {
        "title": "FileDescriptorType",
        "description": "Represents a file required by an extension API definition.",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentifiableResourceType"
          },
          {
            "type": "object",
            "properties": {
              "description": {
                "nullable": true,
                "readOnly": true,
                "description": "Description for the file descriptor.",
                "type": "string"
              },
              "file": {
                "nullable": true,
                "readOnly": true,
                "description": "The file descriptor itself (name, type, href).",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              }
            },
            "required": [
              "description",
              "file"
            ],
            "additionalProperties": false
          }
        ]
      },
      "SessionType": {
        "title": "SessionType",
        "description": "Represents a vCloud Session.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "user": {
                "readOnly": true,
                "description": "The name of the user that owns the session",
                "type": "string"
              },
              "org": {
                "readOnly": true,
                "description": "The name of the user's organization",
                "type": "string"
              },
              "userId": {
                "readOnly": true,
                "description": "The URN of the user entity",
                "type": "string"
              },
              "roles": {
                "readOnly": true,
                "description": "Role assigned to this user during this session.",
                "type": "string"
              },
              "locationId": {
                "readOnly": true,
                "description": "Location id of the logged in org",
                "type": "string"
              },
              "authorizedLocations": {
                "readOnly": true,
                "description": "The locations, both local and remote, that can be accessed by this user in this session.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AuthorizedLocationsType"
                  }
                ]
              }
            },
            "required": [
              "user",
              "org",
              "userId",
              "roles",
              "locationId",
              "authorizedLocations"
            ],
            "additionalProperties": false
          }
        ]
      },
      "TaskType": {
        "title": "TaskType",
        "description": "Represents an asynchronous operation in vCloud Director.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityType"
          },
          {
            "type": "object",
            "properties": {
              "status": {
                "readOnly": true,
                "description": "The execution status of the task. One of:  \n**queued** (The task has been queued for execution)  \n**preRunning** (The task is awaiting preprocessing or administrative action.)  \n**running** (The task is running.)  \n**success** (The task completed with a status of success.)  \n**error** (The task encountered an error while running.)  \n**canceled** (The task was canceled by the owner or an administrator.)  \n**aborted** (The task was aborted by an administrative action.)",
                "type": "string"
              },
              "operation": {
                "description": "A message describing the operation that is tracked by this task.",
                "type": "string"
              },
              "operationName": {
                "readOnly": true,
                "description": "The short name of the operation that is tracked by this task.",
                "type": "string"
              },
              "serviceNamespace": {
                "description": "Identifier of the service that created the task. It must not start with com.vmware.vcloud and the length must be between 1 and 128 symbols.",
                "type": "string"
              },
              "startTime": {
                "readOnly": true,
                "description": "The date and time the system started executing the task. May not be present if the task has not been executed yet.",
                "type": "string",
                "format": "date-time"
              },
              "endTime": {
                "readOnly": true,
                "description": "The date and time that processing of the task was completed. May not be present if the task is still being executed.",
                "type": "string",
                "format": "date-time"
              },
              "expiryTime": {
                "readOnly": true,
                "description": "The date and time at which the task resource will be destroyed and no longer available for retrieval. May not be present if the task has not been executed or is still being executed.",
                "type": "string",
                "format": "date-time"
              },
              "cancelRequested": {
                "readOnly": true,
                "description": "Whether user has requested this processing to be canceled.",
                "type": "boolean"
              },
              "owner": {
                "nullable": true,
                "description": "Reference to the owner of the task. This is typically the object that the task is creating or updating.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "error": {
                "nullable": true,
                "description": "Represents error information from a failed task.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ErrorType"
                  }
                ]
              },
              "user": {
                "nullable": true,
                "description": "The user who started the task.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "organization": {
                "nullable": true,
                "readOnly": true,
                "description": "The organization to which the User belongs.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "progress": {
                "nullable": true,
                "readOnly": true,
                "description": "Read\\-only indicator of task progress as an approximate percentage between 0 and 100. Not available for all tasks.",
                "type": "integer",
                "format": "int32"
              },
              "params": {
                "nullable": true,
                "readOnly": true,
                "description": "The parameters with which this task was started.",
                "type": "string"
              },
              "details": {
                "nullable": true,
                "description": "Detailed message about the task. Also contained by the Owner entity when task status is preRunning.",
                "type": "string"
              },
              "result": {
                "nullable": true,
                "description": "An optional element that can be used to hold the result of a task.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResultType"
                  }
                ]
              }
            },
            "required": [
              "status",
              "operation",
              "operationName",
              "serviceNamespace",
              "startTime",
              "endTime",
              "expiryTime",
              "cancelRequested",
              "owner",
              "error",
              "user",
              "organization",
              "progress",
              "params",
              "details",
              "result"
            ],
            "additionalProperties": false
          }
        ]
      },
      "TaskOperationListType": {
        "title": "TaskOperationListType",
        "description": "List of operation names.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "operation": {
                "description": "An operation that will be enabled as a blocking task. See the vCloud API Programming Guide for the operation names.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "operation"
            ],
            "additionalProperties": false
          }
        ]
      },
      "TaskPrototypeType": {
        "title": "TaskPrototypeType",
        "description": "Describes an asynchronous operation to be performed by vCloud Director extension.",
        "type": "object",
        "properties": {
          "owner": {
            "nullable": true,
            "description": "Reference to the owner of the task. This is typically the object that the task is updating.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ReferenceType"
              }
            ]
          }
        },
        "required": [
          "owner"
        ],
        "additionalProperties": false
      },
      "TasksListType": {
        "title": "TasksListType",
        "description": "A list of tasks.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityType"
          },
          {
            "type": "object",
            "properties": {
              "task": {
                "readOnly": true,
                "description": "A task.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TaskType"
                }
              }
            },
            "required": [
              "task"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AbstractVAppType": {
        "title": "AbstractVAppType",
        "description": "Represents a base type for VAppType and VmType.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceEntityType"
          },
          {
            "type": "object",
            "properties": {
              "deployed": {
                "readOnly": true,
                "description": "True if the virtual machine is deployed.",
                "type": "boolean"
              },
              "vAppParent": {
                "nullable": true,
                "readOnly": true,
                "description": "Reserved. Unimplemented.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "dateCreated": {
                "nullable": true,
                "readOnly": true,
                "description": "Creation date/time of the vApp.",
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "deployed",
              "vAppParent",
              "dateCreated"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VmType": {
        "title": "VmType",
        "description": "Represents a virtual machine.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractVAppType"
          },
          {
            "type": "object",
            "properties": {
              "needsCustomization": {
                "readOnly": true,
                "description": "True if this virtual machine needs customization.",
                "type": "boolean"
              },
              "nestedHypervisorEnabled": {
                "readOnly": true,
                "description": "True if hardware\\-assisted CPU virtualization capabilities in the host should be exposed to the guest operating system.",
                "type": "boolean"
              },
              "vAppScopedLocalId": {
                "nullable": true,
                "readOnly": true,
                "description": "A unique identifier for the virtual machine in the scope of the vApp.",
                "type": "string"
              },
              "vmCapabilities": {
                "nullable": true,
                "description": "Allows you to specify certain capabilities of this virtual machine.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VmCapabilitiesType"
                  }
                ]
              },
              "storageProfile": {
                "nullable": true,
                "description": "A reference to a storage profile to be used for this object. The specified storage profile must exist in the organization vDC that contains the object. If not specified, the default storage profile for the vDC is used.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "bootOptions": {
                "nullable": true,
                "description": "Boot options for this virtual machine.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BootOptionsType"
                  }
                ]
              },
              "media": {
                "nullable": true,
                "readOnly": true,
                "description": "Reference to the media object to insert in a new VM.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              }
            },
            "required": [
              "needsCustomization",
              "nestedHypervisorEnabled",
              "vAppScopedLocalId",
              "vmCapabilities",
              "storageProfile",
              "bootOptions",
              "media"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VmCheckPGCType": {
        "title": "VmCheckPGCType",
        "description": "Checks the status of if post guest customization script should be checked. Internal Use only.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractVAppType"
          },
          {
            "type": "object",
            "properties": {
              "checkPostGCStatus": {
                "nullable": true,
                "description": "Checks the status of if post guest customization script would be added",
                "type": "boolean"
              }
            },
            "required": [
              "checkPostGCStatus"
            ],
            "additionalProperties": false
          }
        ]
      },
      "GuestCustomizationStatusSectionType": {
        "title": "GuestCustomizationStatusSectionType",
        "description": "Represents a guest customization status. Internal Use only.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ovf:Section_Type"
          },
          {
            "type": "object",
            "properties": {
              "href": {
                "description": "A reference to the section in URL format.",
                "type": "string",
                "format": "uri"
              },
              "type": {
                "description": "Current status of guest customization.",
                "type": "string"
              },
              "guestCustStatus": {
                "nullable": true,
                "readOnly": true,
                "description": "Current status of guest customization.",
                "type": "string"
              }
            },
            "required": [
              "href",
              "type",
              "guestCustStatus"
            ],
            "additionalProperties": false
          }
        ]
      },
      "BootOptionsType": {
        "title": "BootOptionsType",
        "description": "Allows you to specify boot options for this virtual machine.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "bootDelay": {
                "nullable": true,
                "description": "Number of milliseconds to wait between powering\\-on and booting this virtual machine. Defaults to 0. Maximum permissible value is 10000 milliseconds.",
                "type": "integer",
                "format": "int64"
              },
              "enterBIOSSetup": {
                "nullable": true,
                "description": "Set to true to force this virtual machine to enter BIOS setup mode when rebooted. This value is reset to false after the next reboot.",
                "type": "boolean"
              }
            },
            "required": [
              "bootDelay",
              "enterBIOSSetup"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VmCapabilitiesType": {
        "title": "VmCapabilitiesType",
        "description": "Allows you to specify certain capabilities of this virtual machine.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "memoryHotAddEnabled": {
                "nullable": true,
                "description": "True if the virtual machine supports addition of memory while powered on.",
                "type": "boolean"
              },
              "cpuHotAddEnabled": {
                "nullable": true,
                "description": "True if the virtual machine supports addition of virtual CPUs while powered on.",
                "type": "boolean"
              }
            },
            "required": [
              "memoryHotAddEnabled",
              "cpuHotAddEnabled"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VAppType": {
        "title": "VAppType",
        "description": "Represents a vApp.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractVAppType"
          },
          {
            "type": "object",
            "properties": {
              "ovfDescriptorUploaded": {
                "readOnly": true,
                "description": "Read\\-only indicator that the OVF descriptor for this vApp has been uploaded.",
                "type": "boolean"
              },
              "owner": {
                "nullable": true,
                "readOnly": true,
                "description": "vApp owner.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OwnerType"
                  }
                ]
              },
              "autoNature": {
                "nullable": true,
                "readOnly": true,
                "description": "True if this vApp is automatically created by vCD when a new VM is discovered in a vCenter Resource Pool attached to an Organization VDC.",
                "type": "boolean"
              },
              "inMaintenanceMode": {
                "nullable": true,
                "description": "True if this vApp is in maintenance mode. Prevents users from changing vApp metadata.",
                "type": "boolean"
              },
              "children": {
                "nullable": true,
                "readOnly": true,
                "description": "Container for virtual machines included in this vApp.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VAppChildrenType"
                  }
                ]
              }
            },
            "required": [
              "ovfDescriptorUploaded",
              "owner",
              "autoNature",
              "inMaintenanceMode",
              "children"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VAppChildrenType": {
        "title": "VAppChildrenType",
        "description": "Container for virtual machines included in this vApp.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "RasdItemsListType": {
        "title": "RasdItemsListType",
        "description": "Represents a list of RASD items specifying a group of related DMTF Resource Allocation Setting Data properties of this virtual machine.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "InstantiationParamsType": {
        "title": "InstantiationParamsType",
        "description": "Container for ovf:Section\\_Type elements that specify vApp configuration on instantiate, compose, or recompose.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "VAppNetworkConfigurationType": {
        "title": "VAppNetworkConfigurationType",
        "description": "Represents a vApp network configuration.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "networkName": {
                "description": "The name of the vApp network.",
                "type": "string"
              },
              "description": {
                "nullable": true,
                "description": "Optional description.",
                "type": "string"
              },
              "configuration": {
                "description": "Represents a vApp network configuration.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NetworkConfigurationType"
                  }
                ]
              },
              "isDeployed": {
                "nullable": true,
                "readOnly": true,
                "description": "True if this network has been deployed.",
                "type": "boolean"
              }
            },
            "required": [
              "networkName",
              "description",
              "configuration",
              "isDeployed"
            ],
            "additionalProperties": false
          }
        ]
      },
      "NetworkConfigSectionType": {
        "title": "NetworkConfigSectionType",
        "description": "Container for vApp networks.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ovf:Section_Type"
          },
          {
            "type": "object",
            "properties": {
              "href": {
                "readOnly": true,
                "description": "A reference to the section in URL format.",
                "type": "string",
                "format": "uri"
              },
              "type": {
                "readOnly": true,
                "description": "The MIME type of the section.",
                "type": "string"
              },
              "link": {
                "readOnly": true,
                "description": "Optional link to an entity or operation associated with this section.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LinkType"
                }
              },
              "networkConfig": {
                "description": "Represents the the configuration of a vApp network.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VAppNetworkConfigurationType"
                }
              }
            },
            "required": [
              "href",
              "type",
              "link",
              "networkConfig"
            ],
            "additionalProperties": false
          }
        ]
      },
      "LeaseSettingsSectionType": {
        "title": "LeaseSettingsSectionType",
        "description": "Represents vApp lease settings.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ovf:Section_Type"
          },
          {
            "type": "object",
            "properties": {
              "href": {
                "readOnly": true,
                "description": "A reference to the section in URL format.",
                "type": "string",
                "format": "uri"
              },
              "type": {
                "readOnly": true,
                "description": "The MIME type of the section.",
                "type": "string"
              },
              "link": {
                "readOnly": true,
                "description": "Optional link to an entity or operation associated with this section.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LinkType"
                }
              },
              "deploymentLeaseInSeconds": {
                "nullable": true,
                "description": "Deployment lease in seconds.",
                "type": "integer",
                "format": "int32"
              },
              "storageLeaseInSeconds": {
                "nullable": true,
                "description": "Storage lease in seconds.",
                "type": "integer",
                "format": "int32"
              },
              "deploymentLeaseExpiration": {
                "nullable": true,
                "readOnly": true,
                "description": "Expiration date/time of deployment lease.",
                "type": "string",
                "format": "date-time"
              },
              "storageLeaseExpiration": {
                "nullable": true,
                "readOnly": true,
                "description": "Expiration date/time of storage lease.",
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "href",
              "type",
              "link",
              "deploymentLeaseInSeconds",
              "storageLeaseInSeconds",
              "deploymentLeaseExpiration",
              "storageLeaseExpiration"
            ],
            "additionalProperties": false
          }
        ]
      },
      "NetworkConnectionType": {
        "title": "NetworkConnectionType",
        "description": "Represents a network connection in the virtual machine.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "network": {
                "description": "Name of the network to which this NIC is connected.",
                "type": "string"
              },
              "needsCustomization": {
                "readOnly": true,
                "description": "True if this NIC needs customization.",
                "type": "boolean"
              },
              "networkConnectionIndex": {
                "description": "Virtual slot number associated with this NIC. First slot number is 0.",
                "type": "integer",
                "format": "int32"
              },
              "ipAddress": {
                "nullable": true,
                "description": "IP address assigned to this NIC.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              },
              "externalIpAddress": {
                "nullable": true,
                "readOnly": true,
                "description": "If the network to which this NIC connects provides NAT services, the external address assigned to this NIC appears here.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddressType"
                  }
                ]
              },
              "isConnected": {
                "description": "If the virtual machine is undeployed, this value specifies whether the NIC should be connected upon deployment. If the virtual machine is deployed, this value reports the current status of this NIC's connection, and can be updated to change that connection status.",
                "type": "boolean"
              },
              "mACAddress": {
                "nullable": true,
                "description": "MAC address associated with the NIC.",
                "type": "string"
              },
              "ipAddressAllocationMode": {
                "description": "IP address allocation mode for this connection. One of:  \n**POOL** (A static IP address is allocated automatically from a pool of addresses.)  \n**DHCP** (The IP address is obtained from a DHCP service.)  \n**MANUAL** (The IP address is assigned manually in the IpAddress element.)  \n**NONE** (No IP addressing mode specified.)",
                "type": "string"
              },
              "networkAdapterType": {
                "nullable": true,
                "description": "Type of network adapter to be used for this connection. One of:  \n**VLANCE (emulated version of the AMD 79C970 PCnet32\\-LANCE NIC)**  \n**E1000 (emulated version of the Intel 82545EM Gigabit Ethernet NIC)**  \n**E1000E (emulates a newer model of Intel Gigabit NIC (number 82574))**  \n**VMXNET (has no physical counterpart; optimized for performance in a virtual machine)**  \n**VMXNET2 (based on the VMXNET adapter but provides some high\\-performance features)**  \n**VMXNET3 (next generation of a paravirtualized NIC designed for performance; not related to VMXNET or VMXNET2)**  \n**FLEXIBLE (identifies itself as a Vlance adapter when a virtual machine boots, but initializes itself and functions as either a Vlance or a VMXNET adapter, depending on which driver initializes it)**  \n",
                "type": "string"
              }
            },
            "required": [
              "network",
              "needsCustomization",
              "networkConnectionIndex",
              "ipAddress",
              "externalIpAddress",
              "isConnected",
              "mACAddress",
              "ipAddressAllocationMode",
              "networkAdapterType"
            ],
            "additionalProperties": false
          }
        ]
      },
      "MediaSettingsType": {
        "title": "MediaSettingsType",
        "description": "TBD",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "deviceId": {
                "nullable": true,
                "readOnly": true,
                "description": "TBD",
                "type": "string"
              },
              "mediaImage": {
                "nullable": true,
                "readOnly": true,
                "description": "The media image that is mounted onto the device. This property can be 'null' which represents that no media is mounted on the device.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "mediaType": {
                "nullable": true,
                "readOnly": true,
                "description": "Specified the type of media that is mounted onto the device.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MediaTypeType"
                  }
                ]
              },
              "mediaState": {
                "nullable": true,
                "readOnly": true,
                "description": "Specifies the state of the media device.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MediaStateType"
                  }
                ]
              },
              "unitNumber": {
                "description": "The device number on the controller of the media device.",
                "type": "integer",
                "format": "int32"
              },
              "busNumber": {
                "description": "The bus number of the media device controller.",
                "type": "integer",
                "format": "int32"
              },
              "adapterType": {
                "nullable": true,
                "readOnly": true,
                "description": "The type of controller, e.g. IDE vs SCSI and if SCSI bus\\-logic vs LSI logic.",
                "type": "string"
              }
            },
            "required": [
              "deviceId",
              "mediaImage",
              "mediaType",
              "mediaState",
              "unitNumber",
              "busNumber",
              "adapterType"
            ],
            "additionalProperties": false
          }
        ]
      },
      "DiskSettingsType": {
        "title": "DiskSettingsType",
        "description": "A description of a virtual disk of a VM.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "diskId": {
                "nullable": true,
                "description": "Specifies a unique identifier for this disk in the scope of the corresponding VM. This element is optional when creating a VM, but if it is provided it should be unique. This element is mandatory when updating an existing disk.",
                "type": "string"
              },
              "sizeMb": {
                "description": "The size of the disk in MB.",
                "type": "integer",
                "format": "int64"
              },
              "unitNumber": {
                "description": "The device number on the SCSI or IDE controller of the disk.",
                "type": "integer",
                "format": "int32"
              },
              "busNumber": {
                "description": "The number of the SCSI or IDE controller itself.",
                "type": "integer",
                "format": "int32"
              },
              "adapterType": {
                "description": "The type of disk controller, e.g. IDE vs SCSI and if SCSI bus\\-logic vs LSI logic.",
                "type": "string"
              },
              "thinProvisioned": {
                "description": "Specifies whether the disk storage is pre\\-allocated or allocated on demand.",
                "type": "boolean"
              },
              "disk": {
                "nullable": true,
                "description": "Specifies reference to a named disk.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "storageProfile": {
                "nullable": true,
                "description": "Specifies reference to a storage profile to be associated with the disk.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "overrideVmDefault": {
                "nullable": true,
                "description": "Specifies that the disk storage profile overrides the VM's default storage profile.",
                "type": "boolean"
              },
              "iops": {
                "nullable": true,
                "description": "Specifies the IOPS for the disk.",
                "type": "integer",
                "format": "int64"
              },
              "virtualQuantityUnit": {
                "nullable": true,
                "readOnly": true,
                "description": "The units in which VirtualQuantity is measured.",
                "type": "string"
              },
              "virtualQuantity": {
                "nullable": true,
                "readOnly": true,
                "description": "The actual size of the disk.",
                "type": "integer",
                "format": "int64"
              }
            },
            "required": [
              "diskId",
              "sizeMb",
              "unitNumber",
              "busNumber",
              "adapterType",
              "thinProvisioned",
              "disk",
              "storageProfile",
              "overrideVmDefault",
              "iops",
              "virtualQuantityUnit",
              "virtualQuantity"
            ],
            "additionalProperties": false
          }
        ]
      },
      "MediaSectionType": {
        "title": "MediaSectionType",
        "description": "xxxx",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "mediaSettings": {
                "description": "xxx.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MediaSettingsType"
                }
              }
            },
            "required": [
              "mediaSettings"
            ],
            "additionalProperties": false
          }
        ]
      },
      "DiskSectionType": {
        "title": "DiskSectionType",
        "description": "xxxx",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "diskSettings": {
                "description": "xxx.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DiskSettingsType"
                }
              }
            },
            "required": [
              "diskSettings"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ComputeResourceType": {
        "title": "ComputeResourceType",
        "description": "xxxx",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "configured": {
                "description": "xxx.",
                "type": "integer",
                "format": "int64"
              },
              "reservation": {
                "nullable": true,
                "description": "xxx.",
                "type": "integer",
                "format": "int64"
              },
              "limit": {
                "nullable": true,
                "description": "xxx.",
                "type": "integer",
                "format": "int64"
              },
              "sharesLevel": {
                "nullable": true,
                "description": "xxx.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceSharesLevelType"
                  }
                ]
              },
              "shares": {
                "nullable": true,
                "description": "xxx.",
                "type": "integer",
                "format": "int32"
              }
            },
            "required": [
              "configured",
              "reservation",
              "limit",
              "sharesLevel",
              "shares"
            ],
            "additionalProperties": false
          }
        ]
      },
      "HardwareVersionType": {
        "title": "HardwareVersionType",
        "description": "Represents a supported virtual hardware version.",
        "allOf": [
          {
            "$ref": "#/components/schemas/HardwareVersionBaseType"
          },
          {
            "type": "object",
            "properties": {
              "href": {
                "description": "The URI of the entity.",
                "type": "string",
                "format": "uri"
              },
              "type": {
                "description": "Contains the type of the the entity.",
                "type": "string"
              }
            },
            "required": [
              "href",
              "type"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VmSpecSectionType": {
        "title": "VmSpecSectionType",
        "description": "Container for the specification of this virtual machine. This is an alternate to using ovf:VirtualHardwareSection \\+ ovf:OperatingSystemSection",
        "allOf": [
          {
            "$ref": "#/components/schemas/ovf:Section_Type"
          },
          {
            "type": "object",
            "properties": {
              "Modified": {
                "description": "True indicates that this section overrides any possible VirtualHardware and OperatingSystem sections during a PUT or POST action.",
                "type": "boolean"
              },
              "osType": {
                "nullable": true,
                "description": "The type of the OS. This parameter may be omitted when using the VmSpec to update the contents of an existing VM.",
                "type": "string"
              },
              "numCpus": {
                "nullable": true,
                "description": "Number of CPUs. This parameter may be omitted when using the VmSpec to update the contents of an existing VM.",
                "type": "integer",
                "format": "int32"
              },
              "numCoresPerSocket": {
                "nullable": true,
                "description": "Number of cores among which to distribute CPUs in this virtual machine.. This parameter may be omitted when using the VmSpec to update the contents of an existing VM.",
                "type": "integer",
                "format": "int32"
              },
              "cpuResourceMhz": {
                "nullable": true,
                "description": "CPU compute resources. This parameter may be omitted when using the VmSpec to update the contents of an existing VM.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ComputeResourceType"
                  }
                ]
              },
              "memoryResourceMb": {
                "nullable": true,
                "description": "Memory compute resources. This parameter may be omitted when using the VmSpec to update the contents of an existing VM.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ComputeResourceType"
                  }
                ]
              },
              "mediaSection": {
                "nullable": true,
                "description": "The media devices of this VM.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MediaSectionType"
                  }
                ]
              },
              "diskSection": {
                "nullable": true,
                "description": "virtual disks of this VM.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DiskSectionType"
                  }
                ]
              },
              "hardwareVersion": {
                "description": "vSphere name of Virtual Hardware Version of this VM. Example: vmx\\-13 This parameter may be omitted when using the VmSpec to update the contents of an existing VM.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/HardwareVersionType"
                  }
                ]
              },
              "vmToolsVersion": {
                "nullable": true,
                "readOnly": true,
                "description": "VMware tools version of this VM.",
                "type": "string"
              },
              "toolsGuestOsId": {
                "nullable": true,
                "readOnly": true,
                "description": "The tools guest os identifier of a VM when VM is powered on and has VM Tools installed on it.",
                "type": "string"
              },
              "virtualCpuType": {
                "nullable": true,
                "description": "The capabilities settings for this VM. This parameter may be omitted when using the VmSpec to update the contents of an existing VM.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VirtualCpuTypeType"
                  }
                ]
              },
              "timeSyncWithHost": {
                "nullable": true,
                "description": "Synchronize the VM's time with the host.",
                "type": "boolean"
              }
            },
            "required": [
              "Modified",
              "osType",
              "numCpus",
              "numCoresPerSocket",
              "cpuResourceMhz",
              "memoryResourceMb",
              "mediaSection",
              "diskSection",
              "hardwareVersion",
              "vmToolsVersion",
              "toolsGuestOsId",
              "virtualCpuType",
              "timeSyncWithHost"
            ],
            "additionalProperties": false
          }
        ]
      },
      "NetworkConnectionSectionType": {
        "title": "NetworkConnectionSectionType",
        "description": "Container for the network connections of this virtual machine.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ovf:Section_Type"
          },
          {
            "type": "object",
            "properties": {
              "href": {
                "readOnly": true,
                "description": "A reference to the section in URL format.",
                "type": "string",
                "format": "uri"
              },
              "type": {
                "readOnly": true,
                "description": "The MIME type of the section.",
                "type": "string"
              },
              "primaryNetworkConnectionIndex": {
                "nullable": true,
                "description": "Virtual slot number associated with the NIC that should be considered this virtual machine's primary network connection. Defaults to slot 0.",
                "type": "integer",
                "format": "int32"
              },
              "networkConnection": {
                "description": "Represents a network connection in the virtual machine.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NetworkConnectionType"
                }
              },
              "link": {
                "readOnly": true,
                "description": "A link to an operation on this section.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LinkType"
                }
              }
            },
            "required": [
              "href",
              "type",
              "primaryNetworkConnectionIndex",
              "networkConnection",
              "link"
            ],
            "additionalProperties": false
          }
        ]
      },
      "RuntimeInfoSectionType": {
        "title": "RuntimeInfoSectionType",
        "description": "VMware Tools and other runtime information for this virtual machine.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ovf:Section_Type"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "GuestCustomizationSectionType": {
        "title": "GuestCustomizationSectionType",
        "description": "Represents a guest customization settings.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ovf:Section_Type"
          },
          {
            "type": "object",
            "properties": {
              "href": {
                "readOnly": true,
                "description": "A reference to the section in URL format.",
                "type": "string",
                "format": "uri"
              },
              "type": {
                "readOnly": true,
                "description": "The MIME type of the section.",
                "type": "string"
              },
              "enabled": {
                "nullable": true,
                "description": "True if guest customization is enabled.",
                "type": "boolean"
              },
              "changeSid": {
                "nullable": true,
                "description": "True if customization can change the Windows SID of this virtual machine.",
                "type": "boolean"
              },
              "virtualMachineId": {
                "nullable": true,
                "readOnly": true,
                "description": "Virtual machine ID to apply.",
                "type": "string"
              },
              "joinDomainEnabled": {
                "nullable": true,
                "description": "True if this virtual machine can join a Windows Domain.",
                "type": "boolean"
              },
              "useOrgSettings": {
                "nullable": true,
                "description": "True if customization should use organization settings (OrgGuestPersonalizationSettings) when joining a Windows Domain.",
                "type": "boolean"
              },
              "domainName": {
                "nullable": true,
                "description": "The name of the Windows Domain to join.",
                "type": "string"
              },
              "domainUserName": {
                "nullable": true,
                "description": "User name to specify when joining a Windows Domain.",
                "type": "string"
              },
              "domainUserPassword": {
                "nullable": true,
                "description": "Password to use with DomainUserName.",
                "type": "string"
              },
              "machineObjectOU": {
                "nullable": true,
                "description": "The name of the Windows Domain Organizational Unit (OU) in which the computer account for this virtual machine will be created.",
                "type": "string"
              },
              "adminPasswordEnabled": {
                "nullable": true,
                "description": "True if guest customization can modify administrator password settings for this virtual machine.",
                "type": "boolean"
              },
              "adminPasswordAuto": {
                "nullable": true,
                "description": "True if the administrator password for this virtual machine should be automatically generated.",
                "type": "boolean"
              },
              "adminPassword": {
                "nullable": true,
                "description": "True if the administrator password for this virtual machine should be set to this string. (AdminPasswordAuto must be false.)",
                "type": "string"
              },
              "adminAutoLogonEnabled": {
                "nullable": true,
                "description": "True if guest administrator should automatically log into this virtual machine.",
                "type": "boolean"
              },
              "adminAutoLogonCount": {
                "nullable": true,
                "description": "Number of times administrator can automatically log into this virtual machine. In case AdminAutoLogon is set to True, this value should be between 1 and 100. Otherwise, it should be 0.",
                "type": "integer",
                "format": "int32"
              },
              "resetPasswordRequired": {
                "nullable": true,
                "description": "True if the administrator password for this virtual machine must be reset after first use.",
                "type": "boolean"
              },
              "customizationScript": {
                "nullable": true,
                "description": "Script to run on guest customization. The entire script must appear in this element. Use the XML entity &#13; to represent a newline. Unicode characters can be represented in the form &#xxxx; where xxxx is the character number.",
                "type": "string"
              },
              "computerName": {
                "nullable": true,
                "description": "Computer name to assign to this virtual machine.",
                "type": "string"
              },
              "link": {
                "readOnly": true,
                "description": "A link to an operation on this section.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LinkType"
                }
              }
            },
            "required": [
              "href",
              "type",
              "enabled",
              "changeSid",
              "virtualMachineId",
              "joinDomainEnabled",
              "useOrgSettings",
              "domainName",
              "domainUserName",
              "domainUserPassword",
              "machineObjectOU",
              "adminPasswordEnabled",
              "adminPasswordAuto",
              "adminPassword",
              "adminAutoLogonEnabled",
              "adminAutoLogonCount",
              "resetPasswordRequired",
              "customizationScript",
              "computerName",
              "link"
            ],
            "additionalProperties": false
          }
        ]
      },
      "SnapshotType": {
        "title": "SnapshotType",
        "description": "Represents a virtual machine snapshot.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "poweredOn": {
                "readOnly": true,
                "description": "True if the virtual machine was powered on when the snapshot was created.",
                "type": "boolean"
              },
              "created": {
                "readOnly": true,
                "description": "Creation date/time of the snapshot.",
                "type": "string",
                "format": "date-time"
              },
              "size": {
                "readOnly": true,
                "description": "Size of the snapshot.",
                "type": "integer",
                "format": "int64"
              }
            },
            "required": [
              "poweredOn",
              "created",
              "size"
            ],
            "additionalProperties": false
          }
        ]
      },
      "SnapshotSectionType": {
        "title": "SnapshotSectionType",
        "description": "Represents information about vApp and virtual machine snapshots.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ovf:Section_Type"
          },
          {
            "type": "object",
            "properties": {
              "href": {
                "readOnly": true,
                "description": "A reference to the section in URL format.",
                "type": "string",
                "format": "uri"
              },
              "type": {
                "readOnly": true,
                "description": "The MIME type of the section.",
                "type": "string"
              },
              "link": {
                "readOnly": true,
                "description": "A link to the section.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LinkType"
                }
              },
              "snapshot": {
                "nullable": true,
                "readOnly": true,
                "description": "Information about a snapshot.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SnapshotType"
                  }
                ]
              }
            },
            "required": [
              "href",
              "type",
              "link",
              "snapshot"
            ],
            "additionalProperties": false
          }
        ]
      },
      "NetworkAssignmentType": {
        "title": "NetworkAssignmentType",
        "description": "Maps a network name specified in a Vm to the network name of a vApp network defined in the VApp that contains the Vm",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "innerNetwork": {
                "description": "Name of the network as specified in the Vm.",
                "type": "string"
              },
              "containerNetwork": {
                "description": "Name of the vApp network to map to.",
                "type": "string"
              }
            },
            "required": [
              "innerNetwork",
              "containerNetwork"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VAppCreationParamsType": {
        "title": "VAppCreationParamsType",
        "description": "Represents vApp creation parameters.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ParamsType"
          },
          {
            "type": "object",
            "properties": {
              "deploy": {
                "description": "True if the vApp should be deployed at instantiation. Defaults to true.",
                "type": "boolean"
              },
              "powerOn": {
                "description": "True if the vApp should be powered\\-on at instantiation. Defaults to true.",
                "type": "boolean"
              },
              "vAppParent": {
                "nullable": true,
                "description": "Reserved. Unimplemented.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "instantiationParams": {
                "nullable": true,
                "description": "Instantiation parameters for the composed vApp.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InstantiationParamsType"
                  }
                ]
              }
            },
            "required": [
              "deploy",
              "powerOn",
              "vAppParent",
              "instantiationParams"
            ],
            "additionalProperties": false
          }
        ]
      },
      "SourcedCompositionItemParamType": {
        "title": "SourcedCompositionItemParamType",
        "description": "Represents a vApp, vApp template or Vm to include in a composed vApp.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "sourceDelete": {
                "description": "True if the source item should be deleted after composition is complete.",
                "type": "boolean"
              },
              "source": {
                "description": "A reference to a source object. One of:  \n vApp  \n vAppTemplate  \n Vm  \n Vms must be powered off and cannot have an independent disk attached.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "vmGeneralParams": {
                "nullable": true,
                "description": "Specify name, description, and other properties of a VM during instantiation.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VmGeneralParamsType"
                  }
                ]
              },
              "vAppScopedLocalId": {
                "nullable": true,
                "description": "If Source references a Vm, this value provides a unique identifier for the Vm in the scope of the composed vApp.",
                "type": "string"
              },
              "instantiationParams": {
                "nullable": true,
                "description": "If Source references a Vm this can include any of the following OVF sections:  \n VirtualHardwareSection  \n OperatingSystemSection  \n NetworkConnectionSection  \n GuestCustomizationSection.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InstantiationParamsType"
                  }
                ]
              },
              "networkAssignment": {
                "description": "If Source references a Vm, this element maps a network name specified in the Vm to the network name of a vApp network defined in the composed vApp.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NetworkAssignmentType"
                }
              },
              "storageProfile": {
                "nullable": true,
                "description": "If Source references a Vm, this element contains a reference to a storage profile to be used for the Vm. The specified storage profile must exist in the organization vDC that contains the composed vApp. If not specified, the default storage profile for the vDC is used.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "localityParams": {
                "nullable": true,
                "description": "Locality parameters provide a hint that may help optimize placement of a VM and an independent a Disk so that the VM can make efficient use of the disk. See [KB 2105352](http://kb.vmware.com/kb/2105352).",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LocalityParamsType"
                  }
                ]
              },
              "vmCapabilities": {
                "nullable": true,
                "description": "If Source references a Vm, this element describes the capabilities (hot swap, etc.) the instantiated VM should have.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VmCapabilitiesType"
                  }
                ]
              }
            },
            "required": [
              "sourceDelete",
              "source",
              "vmGeneralParams",
              "vAppScopedLocalId",
              "instantiationParams",
              "networkAssignment",
              "storageProfile",
              "localityParams",
              "vmCapabilities"
            ],
            "additionalProperties": false
          }
        ]
      },
      "SourcedVmTemplateParamsType": {
        "title": "SourcedVmTemplateParamsType",
        "description": "Represents an existing VM template from a Catalog. Internal use only.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "source": {
                "description": "A reference to an existing VM template.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "vmGeneralParams": {
                "nullable": true,
                "description": "Specify name, description, and other properties of a VM during instantiation.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VmGeneralParamsType"
                  }
                ]
              },
              "vmTemplateInstantiationParams": {
                "nullable": true,
                "description": "This can include any of the following OVF sections and more:  \n NetworkConnectionSection  \n LeaseSettingsSection  \n GuestCustomizationSection.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InstantiationParamsType"
                  }
                ]
              },
              "storageProfile": {
                "nullable": true,
                "description": "A reference to a storage profile to be used for the Vm. The specified storage profile must exist in the organization vDC that contains the composed vApp. If not specified, the default storage profile for the vDC is used.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "localityParams": {
                "nullable": true,
                "description": "Locality parameters provide a hint that may help optimize placement of a VM and an independent a Disk so that the VM can make efficient use of the disk. See [KB 2105352](http://kb.vmware.com/kb/2105352).",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LocalityParamsType"
                  }
                ]
              },
              "vmCapabilities": {
                "nullable": true,
                "description": "Describes the capabilities (hot swap, etc.) the instantiated VM should have.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VmCapabilitiesType"
                  }
                ]
              }
            },
            "required": [
              "source",
              "vmGeneralParams",
              "vmTemplateInstantiationParams",
              "storageProfile",
              "localityParams",
              "vmCapabilities"
            ],
            "additionalProperties": false
          }
        ]
      },
      "InstantiateVmTemplateParamsType": {
        "title": "InstantiateVmTemplateParamsType",
        "description": "Represents VM template instantiation parameters. Internal use only.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ParamsType"
          },
          {
            "type": "object",
            "properties": {
              "powerOn": {
                "description": "True if the VM should be powered\\-on at instantiation. Defaults to false.",
                "type": "boolean"
              },
              "sourcedVmTemplateItem": {
                "nullable": true,
                "description": "Represents virtual machine instantiation parameters.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SourcedVmTemplateParamsType"
                  }
                ]
              }
            },
            "required": [
              "powerOn",
              "sourcedVmTemplateItem"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VmGeneralParamsType": {
        "title": "VmGeneralParamsType",
        "description": "A set of overrides to source VM properties to apply to target VM during copying.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "nullable": true,
                "description": "Name of VM",
                "type": "string"
              },
              "description": {
                "nullable": true,
                "description": "VM description",
                "type": "string"
              },
              "needsCustomization": {
                "nullable": true,
                "description": "True if this VM needs guest customization",
                "type": "boolean"
              },
              "regenerateBiosUuid": {
                "nullable": true,
                "description": "True if BIOS UUID of the virtual machine should be regenerated so that it is unique, and not the same as the source virtual machine's BIOS UUID.",
                "type": "boolean"
              }
            },
            "required": [
              "name",
              "description",
              "needsCustomization",
              "regenerateBiosUuid"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ComposeVAppParamsType": {
        "title": "ComposeVAppParamsType",
        "description": "Represents vApp composition parameters.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VAppCreationParamsType"
          },
          {
            "type": "object",
            "properties": {
              "linkedClone": {
                "description": "Reserved. Unimplemented.",
                "type": "boolean"
              },
              "sourcedItem": {
                "description": "Composition item. One of:  \n vApp  \n vAppTemplate  \n Vm  \n Vms must be powered off and cannot have an independent disk attached.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SourcedCompositionItemParamType"
                }
              },
              "createItem": {
                "readOnly": true,
                "description": "Read\\-only information about a VM added during vApp composition or recomposition.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VmType"
                }
              }
            },
            "required": [
              "linkedClone",
              "sourcedItem",
              "createItem"
            ],
            "additionalProperties": false
          }
        ]
      },
      "CreateVmParamsType": {
        "title": "CreateVmParamsType",
        "description": "Represents VM creation parameters.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ParamsType"
          },
          {
            "type": "object",
            "properties": {
              "powerOn": {
                "readOnly": true,
                "description": "True if the VM should be powered\\-on after creation. Defaults to false.",
                "type": "boolean"
              },
              "createVm": {
                "readOnly": true,
                "description": "Read\\-only information about the Vm to create. This information appears in the Task returned by a createVm request.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VmType"
                  }
                ]
              },
              "media": {
                "nullable": true,
                "readOnly": true,
                "description": "Reference to the media object to insert in the new VM.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              }
            },
            "required": [
              "powerOn",
              "createVm",
              "media"
            ],
            "additionalProperties": false
          }
        ]
      },
      "RecomposeVAppParamsType": {
        "title": "RecomposeVAppParamsType",
        "description": "Parameters for a recompose vApp request.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ComposeVAppParamsType"
          },
          {
            "type": "object",
            "properties": {
              "deleteItem": {
                "description": "Reference to a Vm to be deleted during recomposition.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReferenceType"
                }
              },
              "reconfigureItem": {
                "description": "Existing Vm to be reconfigured during recomposition.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VmType"
                }
              }
            },
            "required": [
              "deleteItem",
              "reconfigureItem"
            ],
            "additionalProperties": false
          }
        ]
      },
      "RegisterVAppParamsType": {
        "title": "RegisterVAppParamsType",
        "description": "Represents vApp registration parameters.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ParamsType"
          },
          {
            "type": "object",
            "properties": {
              "ovf": {
                "description": "Embedded OVF. Must be embedded as CDATA.",
                "type": "string"
              },
              "vsToVmxMap": {
                "nullable": true,
                "description": "Map from OVF Virtual Systems via the BIOS UUID to the datastore location of the replicated VM's files on the destination site.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VsToVmxMapType"
                  }
                ]
              },
              "ovfToVdcNetworkMap": {
                "nullable": true,
                "description": "Maps from OVF to site specific networks.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OvfToVdcNetworkMapType"
                  }
                ]
              },
              "externalNatIpMap": {
                "nullable": true,
                "description": "Maps source site external NAT IP addresses to destination site external NAT IP addresses.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExternalNatIpMapType"
                  }
                ]
              },
              "nicIpMap": {
                "nullable": true,
                "description": "VM's with NICs that are connected directly to a VDC network and where the NICs have manually assigned IP addresses needs to be mapped to a valid IP address within the IP range of the destination site's VDC network. This element provides that mapping.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NicIpMapType"
                  }
                ]
              }
            },
            "required": [
              "ovf",
              "vsToVmxMap",
              "ovfToVdcNetworkMap",
              "externalNatIpMap",
              "nicIpMap"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VsToVmxMapType": {
        "title": "VsToVmxMapType",
        "description": "Map from OVF Virtual Systems via the BIOS UUID to the datastore location of the replicated VM's files on the destination site.",
        "type": "object",
        "additionalProperties": false
      },
      "OvfToVdcNetworkMapType": {
        "title": "OvfToVdcNetworkMapType",
        "description": "Map from OVF to Org networks.",
        "type": "object",
        "additionalProperties": false
      },
      "ExternalNatIpMapType": {
        "title": "ExternalNatIpMapType",
        "description": "Maps source site external NAT IP addresses to destination site external NAT IP addresses.",
        "type": "object",
        "additionalProperties": false
      },
      "NicIpMapType": {
        "title": "NicIpMapType",
        "description": "VM's with NICs that are connected directly to a VDC network and where the NICs have manually assigned IP addresses needs to be mapped to a valid IP address within the IP range of the destination site's VDC network. This type provides that mapping.",
        "type": "object",
        "additionalProperties": false
      },
      "LocalityParamsType": {
        "title": "LocalityParamsType",
        "description": "Locality parameters provide a hint that may help optimize placement of a VM with respect to another VM or an independent disk. See [KB 2105352](http://kb.vmware.com/kb/2105352).",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "resourceEntity": {
                "description": "Reference to a Disk, or a VM.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReferenceType"
                }
              }
            },
            "required": [
              "resourceEntity"
            ],
            "additionalProperties": false
          }
        ]
      },
      "SourcedVmInstantiationParamsType": {
        "deprecated": true,
        "title": "SourcedVmInstantiationParamsType",
        "description": "Represents instantiation parameters. Deprecated in favor of SourcedCompositionItemParamType",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "source": {
                "description": "A reference to a source Vm.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "storageProfile": {
                "nullable": true,
                "description": "A reference to a storage profile to be used for this object. The specified storage profile must exist in the organization vDC that contains the object. If not specified, the default storage profile for the vDC is used.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "localityParams": {
                "nullable": true,
                "description": "Locality parameters provide a hint that may help optimize placement of a VM with respect to another VM or an independent disk. See [KB 2105352](http://kb.vmware.com/kb/2105352).",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LocalityParamsType"
                  }
                ]
              },
              "hardwareCustomization": {
                "nullable": true,
                "description": "Specification of common hardware parameters that should be applied to the VM upon instantiation. This only applies when instantiating a vApp template and is otherwise ignored.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InstantiateVmHardwareCustomizationParamsType"
                  }
                ]
              }
            },
            "required": [
              "source",
              "storageProfile",
              "localityParams",
              "hardwareCustomization"
            ],
            "additionalProperties": false
          }
        ]
      },
      "InstantiateVAppParamsType": {
        "title": "InstantiateVAppParamsType",
        "description": "Represents vApp instantiation parameters.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VAppCreationParamsType"
          },
          {
            "type": "object",
            "properties": {
              "linkedClone": {
                "description": "Reserved. Unimplemented.",
                "type": "boolean"
              },
              "source": {
                "description": "A reference to a source object. One of:  \n vApp  \n vAppTemplate  \n Vm  \n Vms must be powered off and cannot have an independent disk attached.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "isSourceDelete": {
                "nullable": true,
                "description": "Set to true to delete the source object after the operation completes.",
                "type": "boolean"
              },
              "sourcedVmInstantiationParams": {
                "deprecated": true,
                "description": "Represents virtual machine instantiation parameters.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SourcedVmInstantiationParamsType"
                }
              },
              "sourcedItem": {
                "description": "Represents VM instantiation parameters. If this section is present, then SourcedVmInstantiationParamsType section (if present) will be ignored.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SourcedCompositionItemParamType"
                }
              }
            },
            "required": [
              "linkedClone",
              "source",
              "isSourceDelete",
              "sourcedVmInstantiationParams",
              "sourcedItem"
            ],
            "additionalProperties": false
          }
        ]
      },
      "InstantiateVAppTemplateParamsType": {
        "title": "InstantiateVAppTemplateParamsType",
        "description": "Represents vApp template instantiation parameters.",
        "allOf": [
          {
            "$ref": "#/components/schemas/InstantiateVAppParamsType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "InstantiateOvfParamsType": {
        "title": "InstantiateOvfParamsType",
        "description": "Represents vApp instantiation from OVF parameters",
        "allOf": [
          {
            "$ref": "#/components/schemas/VAppCreationParamsType"
          },
          {
            "type": "object",
            "properties": {
              "transferFormat": {
                "type": "string"
              },
              "removeNonStandardOvfExtensions": {
                "nullable": true,
                "description": "If true, remove elements in the uploaded descriptor if they are not defined in the OVF XML namespace (http://schemas.dmtf.org/ovf/envelope/1). Default is false.",
                "type": "boolean"
              }
            },
            "required": [
              "transferFormat",
              "removeNonStandardOvfExtensions"
            ],
            "additionalProperties": false
          }
        ]
      },
      "NetworkMappingType": {
        "title": "NetworkMappingType",
        "description": "Represents a mapping from an OVF source network to a vCloud target network. Used to update network properties in the OVF.",
        "type": "object",
        "properties": {
          "source": {
            "description": "The name of an OVF network.",
            "type": "string"
          },
          "target": {
            "description": "The name of a vCloud network.",
            "type": "string"
          }
        },
        "required": [
          "source",
          "target"
        ],
        "additionalProperties": false
      },
      "InstantiateOvfPropertyType": {
        "title": "InstantiateOvfPropertyType",
        "description": "Represents an OVF property value assignment.",
        "type": "object",
        "properties": {
          "classId": {
            "nullable": true,
            "description": "The class ID of the product section to which the property belongs.",
            "type": "string"
          },
          "instanceId": {
            "nullable": true,
            "description": "The instance ID of the product section to which the property belongs.",
            "type": "string"
          },
          "key": {
            "description": "The key of the OVF property.",
            "type": "string"
          },
          "value": {
            "description": "The value to assign to the OVF property.",
            "type": "string"
          }
        },
        "required": [
          "classId",
          "instanceId",
          "key",
          "value"
        ],
        "additionalProperties": false
      },
      "InstantiateVmParamsType": {
        "title": "InstantiateVmParamsType",
        "description": "Instantiation parameters for a VM in a vApp.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "The ovf:id of the VirtualSystem in the source OVF that the instantiation parameters apply to.",
                "type": "string"
              },
              "networkConnectionSection": {
                "nullable": true,
                "description": "Network connection configuration for a VM.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NetworkConnectionSectionType"
                  }
                ]
              },
              "computerName": {
                "nullable": true,
                "description": "Represents the computer name that is part of guest customization.",
                "type": "string"
              },
              "vdcStorageProfile": {
                "nullable": true,
                "description": "The VDC storage profile to use. If set, the value must refer to an existing and enabled storage profile on the VDC.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "hardwareCustomization": {
                "nullable": true,
                "description": "Specification of common virtual machine hardware parameters. This is a simple way to customize hardware settings without modifying the source OVF descriptor before uploading it.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InstantiateVmHardwareCustomizationParamsType"
                  }
                ]
              }
            },
            "required": [
              "id",
              "networkConnectionSection",
              "computerName",
              "vdcStorageProfile",
              "hardwareCustomization"
            ],
            "additionalProperties": false
          }
        ]
      },
      "InstantiateVmHardwareCustomizationParamsType": {
        "title": "InstantiateVmHardwareCustomizationParamsType",
        "description": "Hardware parameter customization applied to a virtual machine in a vApp when instantiated.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "numberOfCpus": {
                "nullable": true,
                "description": "The number of vCPUs configured for the virtual machine. Note that if CoresPerSocket is specified in the OVF or included in the customization parameters then the number of CPUs must be evenly divisible by the number of cores per socket. The minimum value is 1.",
                "type": "integer",
                "format": "int32"
              },
              "coresPerSocket": {
                "nullable": true,
                "description": "Specifies the distribution of the total number of CPUs over a number of virtual sockets. The number of vCPUs must be evenly divisible by the number of cores per socket. The minimum value is 1.",
                "type": "integer",
                "format": "int32"
              },
              "memorySize": {
                "nullable": true,
                "description": "The amount of virtual machine memory in megabytes. Must be a multiple of four. Minimum size is four megabytes.",
                "type": "integer",
                "format": "int64"
              }
            },
            "required": [
              "numberOfCpus",
              "coresPerSocket",
              "memorySize"
            ],
            "additionalProperties": false
          }
        ]
      },
      "CloneVAppParamsType": {
        "title": "CloneVAppParamsType",
        "description": "Parameters for a clonevApp request.",
        "allOf": [
          {
            "$ref": "#/components/schemas/InstantiateVAppParamsType"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "DeployVAppParamsType": {
        "title": "DeployVAppParamsType",
        "description": "Parameters to a deploy vApp request.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "powerOn": {
                "description": "Used to specify whether to power on vapp on deployment, if not set default value is true.",
                "type": "boolean"
              },
              "deploymentLeaseSeconds": {
                "description": "Lease in seconds for deployment. A value of 0 is replaced by the organization default deploymentLeaseSeconds value.",
                "type": "integer",
                "format": "int32"
              },
              "forceCustomization": {
                "description": "Used to specify whether to force customization on deployment, if not set default value is false.",
                "type": "boolean"
              }
            },
            "required": [
              "powerOn",
              "deploymentLeaseSeconds",
              "forceCustomization"
            ],
            "additionalProperties": false
          }
        ]
      },
      "UndeployVAppParamsType": {
        "title": "UndeployVAppParamsType",
        "description": "Parameters to an undeploy vApp request.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "undeployPowerAction": {
                "nullable": true,
                "description": "The specified action is applied to all virtual machines in the vApp. All values other than **default** ignore actions, order, and delay specified in the StartupSection. One of:  \n**powerOff** (Power off the virtual machines. This is the default action if this attribute is missing or empty)  \n**suspend** (Suspend the virtual machines)  \n**shutdown** (Shut down the virtual machines)  \n**force** (Attempt to power off the virtual machines. Failures in undeploying the virtual machine or associated networks are ignored. All references to the vApp and its virtual machines are removed from the database)  \n**default** (Use the actions, order, and delay specified in the StartupSection).",
                "type": "string"
              }
            },
            "required": [
              "undeployPowerAction"
            ],
            "additionalProperties": false
          }
        ]
      },
      "MediaInsertOrEjectParamsType": {
        "title": "MediaInsertOrEjectParamsType",
        "description": "Parameters for an insertMedia or ejectMedia request.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "media": {
                "nullable": true,
                "description": "Reference to the media object to insert or eject. In API requests that specify version 29.0 or higher, this element is optional when ejecting the media.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              }
            },
            "required": [
              "media"
            ],
            "additionalProperties": false
          }
        ]
      },
      "CaptureVAppParamsType": {
        "title": "CaptureVAppParamsType",
        "description": "Parameters for a captureVapp request.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ParamsType"
          },
          {
            "type": "object",
            "properties": {
              "source": {
                "description": "Contains a reference to the vApp to capture.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "vdcStorageProfile": {
                "nullable": true,
                "deprecated": true,
                "description": "A reference to the storage profile to be specified in the vApp template created by this capture. Ignored by vCloud Director 5.5 and later.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "targetCatalogItem": {
                "nullable": true,
                "description": "To overwrite an existing vApp template with the one created by this capture, place a reference to the existing template here. Otherwise, the operation creates a new vApp template.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              }
            },
            "required": [
              "source",
              "vdcStorageProfile",
              "targetCatalogItem"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VmPendingQuestionType": {
        "title": "VmPendingQuestionType",
        "description": "Represents a question posted by a virtual machine that is WAITING\\_FOR\\_INPUT (status=\"5\").",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "question": {
                "readOnly": true,
                "description": "Question text.",
                "type": "string"
              },
              "questionId": {
                "description": "Question ID of this question.",
                "type": "string"
              },
              "choices": {
                "description": "Choices of answers to the question.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VmQuestionAnswerChoiceType"
                }
              }
            },
            "required": [
              "question",
              "questionId",
              "choices"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VmQuestionAnswerType": {
        "title": "VmQuestionAnswerType",
        "description": "Represents the answer to a question posted by a virtual machine that is WAITING\\_FOR\\_INPUT (status=\"5\").",
        "type": "object",
        "properties": {
          "choiceId": {
            "description": "Choice ID of this answer.",
            "type": "integer",
            "format": "int32"
          },
          "questionId": {
            "description": "Question ID of the question.",
            "type": "string"
          }
        },
        "required": [
          "choiceId",
          "questionId"
        ],
        "additionalProperties": false
      },
      "VmQuestionAnswerChoiceType": {
        "title": "VmQuestionAnswerChoiceType",
        "description": "Represents the answer to a question posted by a virtual machine that is WAITING\\_FOR\\_INPUT (status=\"5\").",
        "type": "object",
        "properties": {
          "id": {
            "readOnly": true,
            "description": "Choice ID of the answer.",
            "type": "integer",
            "format": "int32"
          },
          "text": {
            "nullable": true,
            "readOnly": true,
            "description": "Answer text.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "text"
        ],
        "additionalProperties": false
      },
      "RelocateParamsType": {
        "title": "RelocateParamsType",
        "description": "Parameters to be used for virtual machine relocation.",
        "type": "object",
        "properties": {
          "datastore": {
            "description": "Reference to destination datastore.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ReferenceType"
              }
            ]
          }
        },
        "required": [
          "datastore"
        ],
        "additionalProperties": false
      },
      "CreateSnapshotParamsType": {
        "title": "CreateSnapshotParamsType",
        "description": "Parameters for a createSnapshot request.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ParamsType"
          },
          {
            "type": "object",
            "properties": {
              "memory": {
                "description": "True if the snapshot should include the virtual machine's memory.",
                "type": "boolean"
              },
              "quiesce": {
                "description": "True if the file system of the virtual machine should be quiesced before the snapshot is created.",
                "type": "boolean"
              }
            },
            "required": [
              "memory",
              "quiesce"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ComplianceResultType": {
        "title": "ComplianceResultType",
        "description": "Represents the results of a GET /vApp/vm\\-{id}/complianceResult request. Empty if such a request has never been made.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "complianceStatus": {
                "readOnly": true,
                "description": "The compliance status for the entity.",
                "type": "string"
              },
              "complianceStatusMessage": {
                "nullable": true,
                "readOnly": true,
                "description": "A descriptive message detailing the compliance result.",
                "type": "string"
              },
              "complianceCheckTime": {
                "nullable": true,
                "readOnly": true,
                "description": "The date/time when the compliance check was run.",
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "complianceStatus",
              "complianceStatusMessage",
              "complianceCheckTime"
            ],
            "additionalProperties": false
          }
        ]
      },
      "DefaultStorageProfileSection_Type": {
        "title": "DefaultStorageProfileSection_Type",
        "description": "Name of the storage profile that will be specified for this virtual machine. The named storage profile must exist in the organization vDC that contains the virtual machine. If not specified, the default storage profile for the vDC is used.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ovf:Section_Type"
          },
          {
            "type": "object",
            "properties": {
              "storageProfile": {
                "nullable": true,
                "description": "Name of the storage profile that will be specified for this virtual machine. The named storage profile must exist in the organization vDC that contains the virtual machine. If not specified, the default storage profile for the vDC is used.",
                "type": "string"
              }
            },
            "required": [
              "storageProfile"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VAppTemplateType": {
        "title": "VAppTemplateType",
        "description": "Represents a vApp template.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceEntityType"
          },
          {
            "type": "object",
            "properties": {
              "ovfDescriptorUploaded": {
                "readOnly": true,
                "description": "True if the OVF descriptor for this template has been uploaded.",
                "type": "boolean"
              },
              "goldMaster": {
                "description": "True if this template is a gold master.",
                "type": "boolean"
              },
              "owner": {
                "nullable": true,
                "readOnly": true,
                "description": "vAppTemplate owner.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OwnerType"
                  }
                ]
              },
              "children": {
                "nullable": true,
                "readOnly": true,
                "description": "Container for virtual machines included in this vApp template.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VAppTemplateChildrenType"
                  }
                ]
              },
              "vAppScopedLocalId": {
                "nullable": true,
                "description": "A unique identifier for the Vm in the scope of the vApp template.",
                "type": "string"
              },
              "defaultStorageProfile": {
                "nullable": true,
                "description": "The name of the storage profile to be used for this object. The named storage profile must exist in the organization vDC that contains the object. If not specified, the default storage profile for the vDC is used.",
                "type": "string"
              },
              "dateCreated": {
                "nullable": true,
                "readOnly": true,
                "description": "Creation date/time of the template.",
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "ovfDescriptorUploaded",
              "goldMaster",
              "owner",
              "children",
              "vAppScopedLocalId",
              "defaultStorageProfile",
              "dateCreated"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VAppTemplateChildrenType": {
        "title": "VAppTemplateChildrenType",
        "description": "Container for virtual machines included in this vApp template.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "vm": {
                "readOnly": true,
                "description": "Represents a virtual machine in this vApp template.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VAppTemplateType"
                }
              }
            },
            "required": [
              "vm"
            ],
            "additionalProperties": false
          }
        ]
      },
      "UploadVAppTemplateParamsType": {
        "title": "UploadVAppTemplateParamsType",
        "description": "Parameters for an uploadVappTemplate request.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ParamsType"
          },
          {
            "type": "object",
            "properties": {
              "transferFormat": {
                "description": "Reserved. Unimplemented.",
                "type": "string"
              },
              "manifestRequired": {
                "description": "True if an OVF manifest is included in the upload. Default value is false.",
                "type": "boolean"
              },
              "sourceHref": {
                "description": "Source URL of the OVF package.",
                "type": "string",
                "format": "uri"
              },
              "vdcStorageProfile": {
                "nullable": true,
                "description": "A reference to the storage profile to be specified in the DefaultStorageProfile element of the vApp template created by this operation.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              }
            },
            "required": [
              "transferFormat",
              "manifestRequired",
              "sourceHref",
              "vdcStorageProfile"
            ],
            "additionalProperties": false
          }
        ]
      },
      "CloneVAppTemplateParamsType": {
        "title": "CloneVAppTemplateParamsType",
        "description": "Parameters for a cloneVappTemplate request.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ParamsType"
          },
          {
            "type": "object",
            "properties": {
              "source": {
                "description": "Reference to the vApp template to clone.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              },
              "isSourceDelete": {
                "nullable": true,
                "description": "True if the source vApp template should be deleted after cloning is complete.",
                "type": "boolean"
              },
              "vdcStorageProfile": {
                "nullable": true,
                "description": "A reference to the storage profile to be specified in the vApp template created by this operation.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferenceType"
                  }
                ]
              }
            },
            "required": [
              "source",
              "isSourceDelete",
              "vdcStorageProfile"
            ],
            "additionalProperties": false
          }
        ]
      },
      "CustomizationSectionType": {
        "title": "CustomizationSectionType",
        "description": "Represents a vApp template customization settings.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ovf:Section_Type"
          },
          {
            "type": "object",
            "properties": {
              "goldMaster": {
                "description": "True if this template is a gold master.",
                "type": "boolean"
              },
              "href": {
                "readOnly": true,
                "description": "Link to the section.",
                "type": "string",
                "format": "uri"
              },
              "type": {
                "readOnly": true,
                "description": "MIME type of the section.",
                "type": "string"
              },
              "customizeOnInstantiate": {
                "description": "True if instatiating this template applies customization settings. Otherwise, instatiation creates an identical copy.",
                "type": "boolean"
              },
              "link": {
                "readOnly": true,
                "description": "Optional link to an entity or operation associated with this section.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LinkType"
                }
              }
            },
            "required": [
              "goldMaster",
              "href",
              "type",
              "customizeOnInstantiate",
              "link"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ResourceEntitiesType": {
        "title": "ResourceEntitiesType",
        "description": "Container for references to ResourceEntity objects in this vDC.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "resourceEntity": {
                "readOnly": true,
                "description": "Reference to a ResourceEntity in this vDC.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceReferenceType"
                }
              }
            },
            "required": [
              "resourceEntity"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AvailableNetworksType": {
        "title": "AvailableNetworksType",
        "description": "Container for references to available organization vDC networks.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "network": {
                "readOnly": true,
                "description": "Reference to an organization vDC network.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReferenceType"
                }
              }
            },
            "required": [
              "network"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VdcsType": {
        "title": "VdcsType",
        "description": "Represents a list of references to vDCs.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "vdc": {
                "readOnly": true,
                "description": "Reference to a vDC.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReferenceType"
                }
              }
            },
            "required": [
              "vdc"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VdcType": {
        "title": "VdcType",
        "description": "Represents the user view of an organization vDC.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityType"
          },
          {
            "type": "object",
            "properties": {
              "status": {
                "readOnly": true,
                "description": "Creation status of the vDC. One of:  \n 0 (The vDC is still being created)  \n 1 (The vDC is ready)  \n \\-1 (There was an error while creating the vDC).",
                "type": "integer",
                "format": "int32"
              },
              "allocationModel": {
                "nullable": true,
                "description": "The allocation model used by this vDC. One of:  \n**AllocationVApp** (Pay as you go. Resources are committed to a vDC only when vApps are created in it. When you use this allocation model, any Limit values you specify for Memory and CPU are ignored on create and returned as 0 on retrieve.)  \n**AllocationPool** (Only a percentage of the resources you allocate are committed to the organization vDC.)  \n**ReservationPool** (All the resources you allocate are committed as a pool to the organization vDC. vApps in vDCs that support this allocation model can specify values for resource and limit.)",
                "type": "string"
              },
              "storageCapacity": {
                "nullable": true,
                "description": "The storage capacity allocated to this vDC.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CapacityWithUsageType"
                  }
                ]
              },
              "computeCapacity": {
                "nullable": true,
                "description": "The compute capacity allocated to this vDC.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ComputeCapacityType"
                  }
                ]
              },
              "resourceEntities": {
                "nullable": true,
                "readOnly": true,
                "description": "Read\\-only list of resource entities in this vDC.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceEntitiesType"
                  }
                ]
              },
              "availableNetworks": {
                "nullable": true,
                "readOnly": true,
                "description": "Read\\-only list of organization vDC networks in this vDC.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AvailableNetworksType"
                  }
                ]
              },
              "capabilities": {
                "nullable": true,
                "readOnly": true,
                "description": "Read\\-only list of VM hardware capabilities supported in this vDC.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CapabilitiesType"
                  }
                ]
              },
              "nicQuota": {
                "nullable": true,
                "description": "Maximum number of virtual NICs allowed in this vDC. Defaults to 0, which specifies an unlimited number.",
                "type": "integer",
                "format": "int32"
              },
              "networkQuota": {
                "nullable": true,
                "description": "Maximum number of network objects that can be deployed in this vDC. Defaults to 0, which specifies an unlimited number.",
                "type": "integer",
                "format": "int32"
              },
              "usedNetworkCount": {
                "nullable": true,
                "description": "Number of networks in use for/by this vDC.",
                "type": "integer",
                "format": "int32"
              },
              "vmQuota": {
                "nullable": true,
                "description": "The quota of VMs that can be created in this vDC. Includes VMs in both vApps and vApp templates, deployed, or otherwise. Defaults to 0, which specifies an unlimited number.",
                "type": "integer",
                "format": "int32"
              },
              "isEnabled": {
                "nullable": true,
                "description": "True if this vDC is enabled for use. Read\\-only in the user view. Modifiable in the admin view.",
                "type": "boolean"
              },
              "vdcStorageProfiles": {
                "nullable": true,
                "readOnly": true,
                "description": "Storage profiles supported in this vDC.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VdcStorageProfilesType"
                  }
                ]
              },
              "vCpuInMhz2": {
                "nullable": true,
                "description": "Specifies the clock frequency, in Megahertz, for any virtual CPU that is allocated to a VM. A VM with 2 vCPUs will consume twice as much of this value. Ignored for ReservationPool. Required when AllocationModel is AllocationVApp or AllocationPool, and may not be less than 256 MHz. Defaults to 1000 MHz if the element is empty or missing.",
                "type": "integer",
                "format": "int64"
              }
            },
            "required": [
              "status",
              "allocationModel",
              "storageCapacity",
              "computeCapacity",
              "resourceEntities",
              "availableNetworks",
              "capabilities",
              "nicQuota",
              "networkQuota",
              "usedNetworkCount",
              "vmQuota",
              "isEnabled",
              "vdcStorageProfiles",
              "vCpuInMhz2"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ComputeCapacityType": {
        "title": "ComputeCapacityType",
        "description": "Represents vDC compute capacity.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "cpu": {
                "description": "CPU capacity and usage.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CapacityWithUsageType"
                  }
                ]
              },
              "memory": {
                "description": "Memory capacity and usage.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CapacityWithUsageType"
                  }
                ]
              }
            },
            "required": [
              "cpu",
              "memory"
            ],
            "additionalProperties": false
          }
        ]
      },
      "CapabilitiesType": {
        "title": "CapabilitiesType",
        "description": "Collection of supported hardware capabilities.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "supportedHardwareVersions": {
                "nullable": true,
                "readOnly": true,
                "description": "Read\\-only list of virtual hardware versions supported by this vDC.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SupportedHardwareVersionsType"
                  }
                ]
              }
            },
            "required": [
              "supportedHardwareVersions"
            ],
            "additionalProperties": false
          }
        ]
      },
      "SupportedHardwareVersionsType": {
        "title": "SupportedHardwareVersionsType",
        "description": "Contains a list of VMware virtual hardware versions supported in this vDC.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "supportedHardwareVersion": {
                "readOnly": true,
                "description": "A virtual hardware version supported in this vDC.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SupportedHardwareVersionType"
                }
              }
            },
            "required": [
              "supportedHardwareVersion"
            ],
            "additionalProperties": false
          }
        ]
      },
      "SupportedHardwareVersionType": {
        "title": "SupportedHardwareVersionType",
        "description": "Represents a supported virtual hardware version.",
        "allOf": [
          {
            "$ref": "#/components/schemas/SupportedHardwareVersionBaseType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "description": "vSphere name of Virtual Hardware Version.",
                "type": "string"
              },
              "href": {
                "description": "The URI of the entity.",
                "type": "string",
                "format": "uri"
              },
              "default": {
                "description": "Indicates that this SupportedHardwareVersion should be used as the highest supported hardware version for organization VDCs backed by this Provider VDC.",
                "type": "boolean"
              },
              "type": {
                "description": "Contains the type of the the entity.",
                "type": "string"
              }
            },
            "required": [
              "name",
              "href",
              "default",
              "type"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VirtualHardwareVersionType": {
        "title": "VirtualHardwareVersionType",
        "description": "Represents the user view of a virtual hardware version.",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentifiableResourceType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "description": "The name of the entity.",
                "type": "string"
              },
              "maxCoresPerSocket": {
                "description": "Specifies the maximum number of cores per socket supported.",
                "type": "integer",
                "format": "int64"
              },
              "supportedOperatingSystems": {
                "description": "Operating systems available for use on virtual machines at this virtual hardware version.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SupportedOperatingSystemsInfoType"
                  }
                ]
              },
              "maxMemorySizeMb": {
                "description": "Specifies the maximum amount of memory supported (in MB).",
                "type": "integer",
                "format": "int64"
              },
              "maxCPUs": {
                "description": "Specifies the maximum number of vCPUs supported.",
                "type": "integer",
                "format": "int64"
              },
              "maxNICs": {
                "description": "Specifies the maximum number of vNICs supported.",
                "type": "integer",
                "format": "int64"
              },
              "supportsNestedHV": {
                "description": "Specifies nested virtualization is supported.",
                "type": "boolean"
              },
              "supportsHotPlugPCI": {
                "description": "Specifies whether PCI hotplug is supported.",
                "type": "boolean"
              },
              "supportsHotAdd": {
                "description": "Specifies whether the hot\\-add memory and virtual CPU feature is supported.",
                "type": "boolean"
              },
              "supportedMemorySizeGb": {
                "description": "Specifies the supported memory sizes (in GB).",
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "supportedCoresPerSocket": {
                "description": "Specifies the supported number of cores per socket combos.",
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "hardDiskAdapter": {
                "readOnly": true,
                "description": "Supported hard disk controller types.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HardDiskAdapterType"
                }
              }
            },
            "required": [
              "name",
              "maxCoresPerSocket",
              "supportedOperatingSystems",
              "maxMemorySizeMb",
              "maxCPUs",
              "maxNICs",
              "supportsNestedHV",
              "supportsHotPlugPCI",
              "supportsHotAdd",
              "supportedMemorySizeGb",
              "supportedCoresPerSocket",
              "hardDiskAdapter"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ReservationPoolVdcSummaryType": {
        "title": "ReservationPoolVdcSummaryType",
        "description": "Represents the summary of consumed and reserved memory, CPU, and storage for a vDC using the Reservation Pool allocation model.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "memoryConsumptionMB": {
                "readOnly": true,
                "description": "The amount of memory consumed in MB.",
                "type": "integer",
                "format": "int64"
              },
              "memoryReservationMB": {
                "readOnly": true,
                "description": "The amount of memory reserved in MB.",
                "type": "integer",
                "format": "int64"
              },
              "storageConsumptionMB": {
                "readOnly": true,
                "description": "The amount of storage consumed in MB.",
                "type": "integer",
                "format": "int64"
              },
              "cpuReservationMhz": {
                "readOnly": true,
                "description": "The amount of CPU reserved in MHz.",
                "type": "integer",
                "format": "int64"
              },
              "cpuConsumptionMhz": {
                "readOnly": true,
                "description": "The amount of CPU consumed in MHz.",
                "type": "integer",
                "format": "int64"
              }
            },
            "required": [
              "memoryConsumptionMB",
              "memoryReservationMB",
              "storageConsumptionMB",
              "cpuReservationMhz",
              "cpuConsumptionMhz"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AllocationPoolVdcSummaryType": {
        "title": "AllocationPoolVdcSummaryType",
        "description": "Represents the summary of consumed and reserved memory, CPU, and storage for a vDC using the Allocation Pool allocation model.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "memoryConsumptionMB": {
                "readOnly": true,
                "description": "The amount of memory consumed in MB.",
                "type": "integer",
                "format": "int64"
              },
              "memoryReservationMB": {
                "readOnly": true,
                "description": "The amount of memory reserved in MB.",
                "type": "integer",
                "format": "int64"
              },
              "storageConsumptionMB": {
                "readOnly": true,
                "description": "The amount of storage consumed in MB.",
                "type": "integer",
                "format": "int64"
              },
              "cpuReservationMhz": {
                "readOnly": true,
                "description": "The amount of CPU reserved in MHz.",
                "type": "integer",
                "format": "int64"
              },
              "cpuConsumptionMhz": {
                "readOnly": true,
                "description": "The amount of CPU consumed in MHz.",
                "type": "integer",
                "format": "int64"
              }
            },
            "required": [
              "memoryConsumptionMB",
              "memoryReservationMB",
              "storageConsumptionMB",
              "cpuReservationMhz",
              "cpuConsumptionMhz"
            ],
            "additionalProperties": false
          }
        ]
      },
      "PayGoVdcSummaryType": {
        "title": "PayGoVdcSummaryType",
        "description": "Represents the summary of consumed CPU, memory, and storage for a vDC using the AllocationVApp (Pay\\-as\\-you\\-Go) allocation model.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "memoryConsumptionMB": {
                "readOnly": true,
                "description": "The amount of memory consumed in MB.",
                "type": "integer",
                "format": "int64"
              },
              "cpuConsumptionMhz": {
                "readOnly": true,
                "description": "The amount of CPU consumed in MHz.",
                "type": "integer",
                "format": "int64"
              },
              "storageConsumptionMB": {
                "readOnly": true,
                "description": "The amount of storage consumed in MB.",
                "type": "integer",
                "format": "int64"
              }
            },
            "required": [
              "memoryConsumptionMB",
              "cpuConsumptionMhz",
              "storageConsumptionMB"
            ],
            "additionalProperties": false
          }
        ]
      },
      "OrgVdcRollupType": {
        "title": "OrgVdcRollupType",
        "description": "Contains rolled\\-up summary information for all vDCs in this organization. If a multisite request is made for this summary information, it will contain combined summary information for the vDCs in this organization and any associated organizations.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "numberOfOrgs": {
                "nullable": true,
                "readOnly": true,
                "description": "The number of organizations used to create this summary.",
                "type": "integer",
                "format": "int32"
              },
              "numberOfPoweredOnVms": {
                "readOnly": true,
                "description": "The number of powered on VMs in this organization.",
                "type": "integer",
                "format": "int32"
              },
              "numberOfDeployedVApps": {
                "readOnly": true,
                "description": "The number of deployed vApps in this organization.",
                "type": "integer",
                "format": "int32"
              },
              "reservationPoolVdcSummary": {
                "nullable": true,
                "readOnly": true,
                "description": "Represents the summation of consumed and reserved memory, CPU, and storage for all vDCs using the Reservation Pool allocation model.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReservationPoolVdcSummaryType"
                  }
                ]
              },
              "allocationPoolVdcSummary": {
                "nullable": true,
                "readOnly": true,
                "description": "Represents the summation of consumed and reserved memory, CPU, and storage for a all vDCs using the Allocation Pool allocation model.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AllocationPoolVdcSummaryType"
                  }
                ]
              },
              "payGoVdcSummary": {
                "nullable": true,
                "readOnly": true,
                "description": "Represents the summation of consumed memory and storage for all vDCs using the AllocationVApp (Pay\\-as\\-you\\-Go) allocation model.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayGoVdcSummaryType"
                  }
                ]
              }
            },
            "required": [
              "numberOfOrgs",
              "numberOfPoweredOnVms",
              "numberOfDeployedVApps",
              "reservationPoolVdcSummary",
              "allocationPoolVdcSummary",
              "payGoVdcSummary"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VdcStorageProfilesType": {
        "title": "VdcStorageProfilesType",
        "description": "Container for references to storage profiles associated with a vDC.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "vdcStorageProfile": {
                "description": "A reference to a vDC storage profile.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReferenceType"
                }
              }
            },
            "required": [
              "vdcStorageProfile"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VdcStorageProfileIopsSettingsType": {
        "title": "VdcStorageProfileIopsSettingsType",
        "description": "Grouping of IOPs related settings associated with a particular VdcStorageProfile, i.e. a particular Vdc \\+ StorageProfile pairing.",
        "type": "object",
        "properties": {
          "enabled": {
            "description": "True if this storage profile is IOPs\\-based placement enabled.",
            "type": "boolean"
          },
          "diskIopsMax": {
            "description": "The maximum IOPS value that this storage profile is permitted to deliver. Value must be in the range 0\\-Integer.MAX\\_VALUE, and if greater than 0, cannot be less than the value of DiskIopsDefault. Value of 0 means this max setting is is disabled and there is no max disk IOPS restriction.",
            "type": "integer",
            "format": "int64"
          },
          "diskIopsDefault": {
            "description": "This value is applied when provisioning a disk that does not specify vcloud:iops. Value must be in the range 0\\-Integer.MAX\\_VALUE. If DiskIopsPerGbMax is greater than 0 and if (diskSize \\* DiskIopsPerGbMax) less than DiskIopsDefault, then the default iops for the disk will be set as (diskSize \\* DiskIopsPerGbMax). Value of 0 for disk iops means that no iops would be reserved or provisioned for that virtual disk.",
            "type": "integer",
            "format": "int64"
          },
          "storageProfileIopsLimit": {
            "nullable": true,
            "description": "Maximum number of IOPs that can be allocated for this profile. A value of 0 is understood to mean \"maximum possible.\"",
            "type": "integer",
            "format": "int64"
          },
          "diskIopsPerGbMax": {
            "nullable": true,
            "description": "The maximum disk IOPs per GB value that this storage profile is permitted to deliver. A value of 0 means there is no perGB IOPS restriction.",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "enabled",
          "diskIopsMax",
          "diskIopsDefault",
          "storageProfileIopsLimit",
          "diskIopsPerGbMax"
        ],
        "additionalProperties": false
      },
      "VdcStorageProfileType": {
        "title": "VdcStorageProfileType",
        "description": "Represents a storage profile in an organization vDC.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityType"
          },
          {
            "type": "object",
            "properties": {
              "enabled": {
                "nullable": true,
                "description": "True if this storage profile is enabled for use in the vDC.",
                "type": "boolean"
              },
              "units": {
                "description": "Scale used to define Limit. NOTE: currently, only \"MB\" is allowed.",
                "type": "string"
              },
              "limit": {
                "description": "Maximum number of storage bytes (scaled by Units) allocated for this profile. A value of 0 is understood to mean \"maximum possible.\"",
                "type": "integer",
                "format": "int64"
              },
              "default": {
                "description": "True if this is default storage profile for this vDC. The default storage profile is used when an object that can specify a storage profile is created with no storage profile specified.",
                "type": "boolean"
              },
              "iopsSettings": {
                "nullable": true,
                "description": "When NOT provided, disk storage placement ignores IOPs considerations; otherwise, this element holds all the disk IOPs related settings, including a subordinate Enabled flag. When that flag is false, disk provisioning using this profile will behave identically as if this element was not provided in the first place.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VdcStorageProfileIopsSettingsType"
                  }
                ]
              },
              "storageUsedMB": {
                "nullable": true,
                "readOnly": true,
                "description": "Storage used, in Megabytes, by the storage profile",
                "type": "integer",
                "format": "int64"
              },
              "iopsAllocated": {
                "nullable": true,
                "readOnly": true,
                "description": "Total IOPS currently allocated to this storage profile",
                "type": "integer",
                "format": "int64"
              }
            },
            "required": [
              "enabled",
              "units",
              "limit",
              "default",
              "iopsSettings",
              "storageUsedMB",
              "iopsAllocated"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VendorServicesType": {
        "title": "VendorServicesType",
        "description": "Vendor services available for service insertion on networks or edge gateways.",
        "type": "object",
        "properties": {
          "networkServices": {
            "description": "A network service that is inserted and available for networks within an org vDC",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NetworkServiceInsertionType"
            }
          },
          "edgeGatewayServices": {
            "description": "An edge gateway service that is inserted and available for edge gateways within an org vDC",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NetworkServiceInsertionType"
            }
          }
        },
        "required": [
          "networkServices",
          "edgeGatewayServices"
        ],
        "additionalProperties": false
      },
      "NetworkServiceInsertionType": {
        "title": "NetworkServiceInsertionType",
        "description": "Information about a network service that has been inserted",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "nullable": true,
                "readOnly": true,
                "description": "Name of the network service that has been inserted. This is required.",
                "type": "string"
              },
              "id": {
                "nullable": true,
                "readOnly": true,
                "description": "ID of the network service that has been inserted. This is required.",
                "type": "string"
              },
              "category": {
                "nullable": true,
                "readOnly": true,
                "description": "Category of the network service that has been inserted. Allowed values are 'VDS' and 'EDGE'",
                "type": "string"
              },
              "categoryType": {
                "nullable": true,
                "readOnly": true,
                "description": "Category type of the network service. This is optional.",
                "type": "string"
              }
            },
            "required": [
              "name",
              "id",
              "category",
              "categoryType"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VendorTemplateType": {
        "title": "VendorTemplateType",
        "description": "Information about a vendor service template. This is optional.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "nullable": true,
                "description": "Name of the vendor template. This is required.",
                "type": "string"
              },
              "id": {
                "nullable": true,
                "description": "ID of the vendor template. This is required.",
                "type": "string"
              }
            },
            "required": [
              "name",
              "id"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VendorTemplateAttributesType": {
        "title": "VendorTemplateAttributesType",
        "description": "Information about vendor template attributes",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "nullable": true,
                "description": "Name of the vendor template attribute. This is required.",
                "type": "string"
              },
              "key": {
                "nullable": true,
                "description": "Key of the vendor template attribute. This is required.",
                "type": "string"
              },
              "value": {
                "nullable": true,
                "description": "Value of the service template attribute. This is optional.",
                "type": "string"
              }
            },
            "required": [
              "name",
              "key",
              "value"
            ],
            "additionalProperties": false
          }
        ]
      },
      "AffinityRuleType": {
        "title": "AffinityRuleType",
        "description": "Represents the base type for affinity and anti\\-affinity rules.",
        "allOf": [
          {
            "$ref": "#/components/schemas/vcloud:IdentifiableResourceType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "nullable": true,
                "description": "The name of this affinity rule.",
                "type": "string"
              },
              "isEnabled": {
                "nullable": true,
                "description": "True if the affinity rule is enabled.",
                "type": "boolean"
              },
              "isMandatory": {
                "nullable": true,
                "description": "True if this affinity rule is mandatory. When a rule is mandatory, a host failover will not power on the VM if doing so would violate the rule.",
                "type": "boolean"
              }
            },
            "required": [
              "name",
              "isEnabled",
              "isMandatory"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VmAffinityRuleType": {
        "title": "VmAffinityRuleType",
        "description": "A VM affinity rule to be applied to two or more VMs. A VM\\-VM affinity rule specifies whether selected individual virtual machines should run on the same host or be kept on separate hosts. An affinity rule tries to keep the specified virtual machines together on the same host while an anti\\-affinity rule tries to keep the specified virtual machines apart.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AffinityRuleType"
          },
          {
            "type": "object",
            "properties": {
              "vmReferences": {
                "description": "A list of VMs under a specific VM affinity rule.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VmsType"
                  }
                ]
              }
            },
            "required": [
              "vmReferences"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VmAffinityRulesType": {
        "title": "VmAffinityRulesType",
        "description": "The collection existing VM affinity rules available.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "vmAffinityRule": {
                "description": "A VM affinity rule applied to two or more VMs.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VmAffinityRuleType"
                }
              }
            },
            "required": [
              "vmAffinityRule"
            ],
            "additionalProperties": false
          }
        ]
      },
      "VmsType": {
        "title": "VmsType",
        "description": "Represents a list of virtual machines.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "vmReference": {
                "readOnly": true,
                "description": "A reference to a virtual machine.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReferenceType"
                }
              }
            },
            "required": [
              "vmReference"
            ],
            "additionalProperties": false
          }
        ]
      },
      "SupportedOperatingSystemsInfoType": {
        "title": "SupportedOperatingSystemsInfoType",
        "description": "Operating systems available for use on virtual machines owned by this organization.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceType"
          },
          {
            "type": "object",
            "properties": {
              "operatingSystemFamilyInfo": {
                "readOnly": true,
                "description": "Operating system families available for use on virtual machines owned by this organization.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OperatingSystemFamilyInfoType"
                }
              }
            },
            "required": [
              "operatingSystemFamilyInfo"
            ],
            "additionalProperties": false
          }
        ]
      },
      "OperatingSystemFamilyInfoType": {
        "title": "OperatingSystemFamilyInfoType",
        "description": "Represents an operating system family.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "nullable": true,
                "readOnly": true,
                "description": "The name of the operating system family.",
                "type": "string"
              },
              "operatingSystemFamilyId": {
                "nullable": true,
                "readOnly": true,
                "description": "The identifier of the operating system family.",
                "type": "integer",
                "format": "int32"
              },
              "operatingSystem": {
                "readOnly": true,
                "description": "Configuration details for an individual operating system.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OperatingSystemInfoType"
                }
              }
            },
            "required": [
              "name",
              "operatingSystemFamilyId",
              "operatingSystem"
            ],
            "additionalProperties": false
          }
        ]
      },
      "DefaultHardDiskAdapterTypeType": {
        "title": "DefaultHardDiskAdapterTypeType",
        "description": "Represents a virtual hard disk adapter type.",
        "type": "object",
        "additionalProperties": false
      },
      "HardDiskAdapterType": {
        "title": "HardDiskAdapterType",
        "description": "Hard disk controller type detailed description.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "readOnly": true,
                "description": "Identifier for this type of hard disk controller.",
                "type": "string"
              },
              "legacyId": {
                "readOnly": true,
                "description": "Legacy identifier for this type of hard disk controller.",
                "type": "integer",
                "format": "int32"
              },
              "name": {
                "readOnly": true,
                "description": "Name of the adapter type.",
                "type": "string"
              },
              "maximumDiskSizeGb": {
                "readOnly": true,
                "description": "Maximum capacity (in GB) for any virtual hard disk connected to this adapter.",
                "type": "integer",
                "format": "int32"
              },
              "busNumberRanges": {
                "readOnly": true,
                "description": "Set of allowed bus number ranges for this disk controller.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RangesType"
                  }
                ]
              },
              "unitNumberRanges": {
                "readOnly": true,
                "description": "Set of allowed disk unit number ranges for an instance of this disk controller type.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RangesType"
                  }
                ]
              }
            },
            "required": [
              "id",
              "legacyId",
              "name",
              "maximumDiskSizeGb",
              "busNumberRanges",
              "unitNumberRanges"
            ],
            "additionalProperties": false
          }
        ]
      },
      "RangeType": {
        "title": "RangeType",
        "description": "Range of integer values.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "begin": {
                "readOnly": true,
                "description": "First value of range.",
                "type": "integer",
                "format": "int32"
              },
              "end": {
                "readOnly": true,
                "description": "Last value of range.",
                "type": "integer",
                "format": "int32"
              }
            },
            "required": [
              "begin",
              "end"
            ],
            "additionalProperties": false
          }
        ]
      },
      "RangesType": {
        "title": "RangesType",
        "description": "Set of range of integer values.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "range": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RangeType"
                }
              }
            },
            "required": [
              "range"
            ],
            "additionalProperties": false
          }
        ]
      },
      "NICType": {
        "title": "NICType",
        "description": "Represents a supported virtual NIC type.",
        "allOf": [
          {
            "$ref": "#/components/schemas/NICBaseType"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "description": "vSphere name of the virtual NIC type.",
                "type": "string"
              },
              "id": {
                "description": "vCloud Director ID of the NIC.",
                "type": "integer",
                "format": "int32"
              }
            },
            "required": [
              "name",
              "id"
            ],
            "additionalProperties": false
          }
        ]
      },
      "HardDiskAdapterReferenceType": {
        "title": "HardDiskAdapterReferenceType",
        "description": "The reference to a HardDiskAdapter element.",
        "type": "object",
        "additionalProperties": false
      },
      "OperatingSystemInfoType": {
        "title": "OperatingSystemInfoType",
        "description": "Information about an individual operating system.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VCloudExtensibleType"
          },
          {
            "type": "object",
            "properties": {
              "operatingSystemId": {
                "nullable": true,
                "readOnly": true,
                "deprecated": true,
                "description": "The operating system identifier.",
                "type": "integer",
                "format": "int32"
              },
              "defaultHardDiskAdapterType": {
                "nullable": true,
                "readOnly": true,
                "description": "Default hard disk controller type for this operating system.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DefaultHardDiskAdapterTypeType"
                  }
                ]
              },
              "supportedHardDiskAdapter": {
                "readOnly": true,
                "description": "Hard disk adapter types supported for this operating system.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HardDiskAdapterReferenceType"
                }
              },
              "minimumHardDiskSizeGigabytes": {
                "nullable": true,
                "readOnly": true,
                "description": "The minimum size of the primary hard disk for this operating system, in gigabytes.",
                "type": "integer",
                "format": "int32"
              },
              "minimumMemoryMegabytes": {
                "nullable": true,
                "readOnly": true,
                "description": "The minimum amount of memory required to run this operating system, in megabytes.",
                "type": "integer",
                "format": "int32"
              },
              "name": {
                "nullable": true,
                "readOnly": true,
                "description": "The name of the operating system.",
                "type": "string"
              },
              "internalName": {
                "nullable": true,
                "readOnly": true,
                "description": "An alternate identifier for this operating system.",
                "type": "string"
              },
              "supported": {
                "nullable": true,
                "readOnly": true,
                "description": "True if this operating system is supported for use in this organization.",
                "type": "boolean"
              },
              "x64": {
                "nullable": true,
                "readOnly": true,
                "description": "True if this operating system is supported for use on 64\\-bit hardware.",
                "type": "boolean"
              },
              "maximumCpuCount": {
                "nullable": true,
                "readOnly": true,
                "description": "The maximum number of CPUs supported for use with this operating system.",
                "type": "integer",
                "format": "int32"
              },
              "maximumCoresPerSocket": {
                "nullable": true,
                "readOnly": true,
                "description": "The maximum value allowed for CoresPerSocket in a VM with this guest operating system.",
                "type": "integer",
                "format": "int32"
              },
              "maximumSocketCount": {
                "nullable": true,
                "readOnly": true,
                "description": "The maximum value allowed for NumberOfCpus in a VM with this guest operating system.",
                "type": "integer",
                "format": "int32"
              },
              "minimumHardwareVersion": {
                "nullable": true,
                "readOnly": true,
                "description": "The minimum VMware hardware version required to run this operating system.",
                "type": "integer",
                "format": "int32"
              },
              "personalizationEnabled": {
                "nullable": true,
                "readOnly": true,
                "description": "True if this operating system supports personalization.",
                "type": "boolean"
              },
              "personalizationAuto": {
                "nullable": true,
                "readOnly": true,
                "description": "True if this operating system supports automatic personalization.",
                "type": "boolean"
              },
              "sysprepPackagingSupported": {
                "nullable": true,
                "readOnly": true,
                "description": "True if this operating system supports use of Microsoft sysprep packaging. (Windows family only.)",
                "type": "boolean"
              },
              "supportsMemHotAdd": {
                "nullable": true,
                "readOnly": true,
                "description": "True if this operating system allows you to add memory to a running system.",
                "type": "boolean"
              },
              "cimOsId": {
                "nullable": true,
                "readOnly": true,
                "description": "Operating system identifier as specified by the DMTF common information model.",
                "type": "integer",
                "format": "int32"
              },
              "cimVersion": {
                "nullable": true,
                "readOnly": true,
                "description": "Operating system version as specified by the DMTF common information model.",
                "type": "integer",
                "format": "int32"
              },
              "supportedForCreate": {
                "nullable": true,
                "readOnly": true,
                "description": "True if this organization supports creation of new virtual machines with this OS type.",
                "type": "boolean"
              },
              "recommendedNIC": {
                "nullable": true,
                "readOnly": true,
                "description": "Default virtual NIC adapter type for this operating system.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NICType"
                  }
                ]
              },
              "supportedNICType": {
                "readOnly": true,
                "description": "Supported virtual NIC type for this operating system.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NICType"
                }
              }
            },
            "required": [
              "operatingSystemId",
              "defaultHardDiskAdapterType",
              "supportedHardDiskAdapter",
              "minimumHardDiskSizeGigabytes",
              "minimumMemoryMegabytes",
              "name",
              "internalName",
              "supported",
              "x64",
              "maximumCpuCount",
              "maximumCoresPerSocket",
              "maximumSocketCount",
              "minimumHardwareVersion",
              "personalizationEnabled",
              "personalizationAuto",
              "sysprepPackagingSupported",
              "supportsMemHotAdd",
              "cimOsId",
              "cimVersion",
              "supportedForCreate",
              "recommendedNIC",
              "supportedNICType"
            ],
            "additionalProperties": false
          }
        ]
      }
    }
  }
}
